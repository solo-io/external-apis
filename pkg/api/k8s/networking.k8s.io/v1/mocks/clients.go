// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/external-apis/pkg/api/k8s/networking.k8s.io/v1"
	v10 "k8s.io/api/networking/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// NetworkPolicies mocks base method
func (m *MockClientset) NetworkPolicies() v1.NetworkPolicyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkPolicies")
	ret0, _ := ret[0].(v1.NetworkPolicyClient)
	return ret0
}

// NetworkPolicies indicates an expected call of NetworkPolicies
func (mr *MockClientsetMockRecorder) NetworkPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkPolicies", reflect.TypeOf((*MockClientset)(nil).NetworkPolicies))
}

// MockNetworkPolicyReader is a mock of NetworkPolicyReader interface
type MockNetworkPolicyReader struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPolicyReaderMockRecorder
}

// MockNetworkPolicyReaderMockRecorder is the mock recorder for MockNetworkPolicyReader
type MockNetworkPolicyReaderMockRecorder struct {
	mock *MockNetworkPolicyReader
}

// NewMockNetworkPolicyReader creates a new mock instance
func NewMockNetworkPolicyReader(ctrl *gomock.Controller) *MockNetworkPolicyReader {
	mock := &MockNetworkPolicyReader{ctrl: ctrl}
	mock.recorder = &MockNetworkPolicyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkPolicyReader) EXPECT() *MockNetworkPolicyReaderMockRecorder {
	return m.recorder
}

// GetNetworkPolicy mocks base method
func (m *MockNetworkPolicyReader) GetNetworkPolicy(ctx context.Context, key client.ObjectKey) (*v10.NetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicy", ctx, key)
	ret0, _ := ret[0].(*v10.NetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicy indicates an expected call of GetNetworkPolicy
func (mr *MockNetworkPolicyReaderMockRecorder) GetNetworkPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyReader)(nil).GetNetworkPolicy), ctx, key)
}

// ListNetworkPolicy mocks base method
func (m *MockNetworkPolicyReader) ListNetworkPolicy(ctx context.Context, opts ...client.ListOption) (*v10.NetworkPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNetworkPolicy", varargs...)
	ret0, _ := ret[0].(*v10.NetworkPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkPolicy indicates an expected call of ListNetworkPolicy
func (mr *MockNetworkPolicyReaderMockRecorder) ListNetworkPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyReader)(nil).ListNetworkPolicy), varargs...)
}

// MockNetworkPolicyWriter is a mock of NetworkPolicyWriter interface
type MockNetworkPolicyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPolicyWriterMockRecorder
}

// MockNetworkPolicyWriterMockRecorder is the mock recorder for MockNetworkPolicyWriter
type MockNetworkPolicyWriterMockRecorder struct {
	mock *MockNetworkPolicyWriter
}

// NewMockNetworkPolicyWriter creates a new mock instance
func NewMockNetworkPolicyWriter(ctrl *gomock.Controller) *MockNetworkPolicyWriter {
	mock := &MockNetworkPolicyWriter{ctrl: ctrl}
	mock.recorder = &MockNetworkPolicyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkPolicyWriter) EXPECT() *MockNetworkPolicyWriterMockRecorder {
	return m.recorder
}

// CreateNetworkPolicy mocks base method
func (m *MockNetworkPolicyWriter) CreateNetworkPolicy(ctx context.Context, obj *v10.NetworkPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkPolicy indicates an expected call of CreateNetworkPolicy
func (mr *MockNetworkPolicyWriterMockRecorder) CreateNetworkPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyWriter)(nil).CreateNetworkPolicy), varargs...)
}

// DeleteNetworkPolicy mocks base method
func (m *MockNetworkPolicyWriter) DeleteNetworkPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkPolicy indicates an expected call of DeleteNetworkPolicy
func (mr *MockNetworkPolicyWriterMockRecorder) DeleteNetworkPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyWriter)(nil).DeleteNetworkPolicy), varargs...)
}

// UpdateNetworkPolicy mocks base method
func (m *MockNetworkPolicyWriter) UpdateNetworkPolicy(ctx context.Context, obj *v10.NetworkPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkPolicy indicates an expected call of UpdateNetworkPolicy
func (mr *MockNetworkPolicyWriterMockRecorder) UpdateNetworkPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyWriter)(nil).UpdateNetworkPolicy), varargs...)
}

// PatchNetworkPolicy mocks base method
func (m *MockNetworkPolicyWriter) PatchNetworkPolicy(ctx context.Context, obj *v10.NetworkPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNetworkPolicy indicates an expected call of PatchNetworkPolicy
func (mr *MockNetworkPolicyWriterMockRecorder) PatchNetworkPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyWriter)(nil).PatchNetworkPolicy), varargs...)
}

// DeleteAllOfNetworkPolicy mocks base method
func (m *MockNetworkPolicyWriter) DeleteAllOfNetworkPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfNetworkPolicy indicates an expected call of DeleteAllOfNetworkPolicy
func (mr *MockNetworkPolicyWriterMockRecorder) DeleteAllOfNetworkPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyWriter)(nil).DeleteAllOfNetworkPolicy), varargs...)
}

// UpsertNetworkPolicy mocks base method
func (m *MockNetworkPolicyWriter) UpsertNetworkPolicy(ctx context.Context, obj *v10.NetworkPolicy, transitionFuncs ...v1.NetworkPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNetworkPolicy indicates an expected call of UpsertNetworkPolicy
func (mr *MockNetworkPolicyWriterMockRecorder) UpsertNetworkPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyWriter)(nil).UpsertNetworkPolicy), varargs...)
}

// MockNetworkPolicyStatusWriter is a mock of NetworkPolicyStatusWriter interface
type MockNetworkPolicyStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPolicyStatusWriterMockRecorder
}

// MockNetworkPolicyStatusWriterMockRecorder is the mock recorder for MockNetworkPolicyStatusWriter
type MockNetworkPolicyStatusWriterMockRecorder struct {
	mock *MockNetworkPolicyStatusWriter
}

// NewMockNetworkPolicyStatusWriter creates a new mock instance
func NewMockNetworkPolicyStatusWriter(ctrl *gomock.Controller) *MockNetworkPolicyStatusWriter {
	mock := &MockNetworkPolicyStatusWriter{ctrl: ctrl}
	mock.recorder = &MockNetworkPolicyStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkPolicyStatusWriter) EXPECT() *MockNetworkPolicyStatusWriterMockRecorder {
	return m.recorder
}

// UpdateNetworkPolicyStatus mocks base method
func (m *MockNetworkPolicyStatusWriter) UpdateNetworkPolicyStatus(ctx context.Context, obj *v10.NetworkPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNetworkPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkPolicyStatus indicates an expected call of UpdateNetworkPolicyStatus
func (mr *MockNetworkPolicyStatusWriterMockRecorder) UpdateNetworkPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkPolicyStatus", reflect.TypeOf((*MockNetworkPolicyStatusWriter)(nil).UpdateNetworkPolicyStatus), varargs...)
}

// PatchNetworkPolicyStatus mocks base method
func (m *MockNetworkPolicyStatusWriter) PatchNetworkPolicyStatus(ctx context.Context, obj *v10.NetworkPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchNetworkPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNetworkPolicyStatus indicates an expected call of PatchNetworkPolicyStatus
func (mr *MockNetworkPolicyStatusWriterMockRecorder) PatchNetworkPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNetworkPolicyStatus", reflect.TypeOf((*MockNetworkPolicyStatusWriter)(nil).PatchNetworkPolicyStatus), varargs...)
}

// MockNetworkPolicyClient is a mock of NetworkPolicyClient interface
type MockNetworkPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPolicyClientMockRecorder
}

// MockNetworkPolicyClientMockRecorder is the mock recorder for MockNetworkPolicyClient
type MockNetworkPolicyClientMockRecorder struct {
	mock *MockNetworkPolicyClient
}

// NewMockNetworkPolicyClient creates a new mock instance
func NewMockNetworkPolicyClient(ctrl *gomock.Controller) *MockNetworkPolicyClient {
	mock := &MockNetworkPolicyClient{ctrl: ctrl}
	mock.recorder = &MockNetworkPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkPolicyClient) EXPECT() *MockNetworkPolicyClientMockRecorder {
	return m.recorder
}

// GetNetworkPolicy mocks base method
func (m *MockNetworkPolicyClient) GetNetworkPolicy(ctx context.Context, key client.ObjectKey) (*v10.NetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPolicy", ctx, key)
	ret0, _ := ret[0].(*v10.NetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPolicy indicates an expected call of GetNetworkPolicy
func (mr *MockNetworkPolicyClientMockRecorder) GetNetworkPolicy(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyClient)(nil).GetNetworkPolicy), ctx, key)
}

// ListNetworkPolicy mocks base method
func (m *MockNetworkPolicyClient) ListNetworkPolicy(ctx context.Context, opts ...client.ListOption) (*v10.NetworkPolicyList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNetworkPolicy", varargs...)
	ret0, _ := ret[0].(*v10.NetworkPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkPolicy indicates an expected call of ListNetworkPolicy
func (mr *MockNetworkPolicyClientMockRecorder) ListNetworkPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyClient)(nil).ListNetworkPolicy), varargs...)
}

// CreateNetworkPolicy mocks base method
func (m *MockNetworkPolicyClient) CreateNetworkPolicy(ctx context.Context, obj *v10.NetworkPolicy, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkPolicy indicates an expected call of CreateNetworkPolicy
func (mr *MockNetworkPolicyClientMockRecorder) CreateNetworkPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyClient)(nil).CreateNetworkPolicy), varargs...)
}

// DeleteNetworkPolicy mocks base method
func (m *MockNetworkPolicyClient) DeleteNetworkPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkPolicy indicates an expected call of DeleteNetworkPolicy
func (mr *MockNetworkPolicyClientMockRecorder) DeleteNetworkPolicy(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyClient)(nil).DeleteNetworkPolicy), varargs...)
}

// UpdateNetworkPolicy mocks base method
func (m *MockNetworkPolicyClient) UpdateNetworkPolicy(ctx context.Context, obj *v10.NetworkPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkPolicy indicates an expected call of UpdateNetworkPolicy
func (mr *MockNetworkPolicyClientMockRecorder) UpdateNetworkPolicy(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyClient)(nil).UpdateNetworkPolicy), varargs...)
}

// PatchNetworkPolicy mocks base method
func (m *MockNetworkPolicyClient) PatchNetworkPolicy(ctx context.Context, obj *v10.NetworkPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNetworkPolicy indicates an expected call of PatchNetworkPolicy
func (mr *MockNetworkPolicyClientMockRecorder) PatchNetworkPolicy(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyClient)(nil).PatchNetworkPolicy), varargs...)
}

// DeleteAllOfNetworkPolicy mocks base method
func (m *MockNetworkPolicyClient) DeleteAllOfNetworkPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfNetworkPolicy indicates an expected call of DeleteAllOfNetworkPolicy
func (mr *MockNetworkPolicyClientMockRecorder) DeleteAllOfNetworkPolicy(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyClient)(nil).DeleteAllOfNetworkPolicy), varargs...)
}

// UpsertNetworkPolicy mocks base method
func (m *MockNetworkPolicyClient) UpsertNetworkPolicy(ctx context.Context, obj *v10.NetworkPolicy, transitionFuncs ...v1.NetworkPolicyTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertNetworkPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNetworkPolicy indicates an expected call of UpsertNetworkPolicy
func (mr *MockNetworkPolicyClientMockRecorder) UpsertNetworkPolicy(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyClient)(nil).UpsertNetworkPolicy), varargs...)
}

// UpdateNetworkPolicyStatus mocks base method
func (m *MockNetworkPolicyClient) UpdateNetworkPolicyStatus(ctx context.Context, obj *v10.NetworkPolicy, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNetworkPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkPolicyStatus indicates an expected call of UpdateNetworkPolicyStatus
func (mr *MockNetworkPolicyClientMockRecorder) UpdateNetworkPolicyStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkPolicyStatus", reflect.TypeOf((*MockNetworkPolicyClient)(nil).UpdateNetworkPolicyStatus), varargs...)
}

// PatchNetworkPolicyStatus mocks base method
func (m *MockNetworkPolicyClient) PatchNetworkPolicyStatus(ctx context.Context, obj *v10.NetworkPolicy, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchNetworkPolicyStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchNetworkPolicyStatus indicates an expected call of PatchNetworkPolicyStatus
func (mr *MockNetworkPolicyClientMockRecorder) PatchNetworkPolicyStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchNetworkPolicyStatus", reflect.TypeOf((*MockNetworkPolicyClient)(nil).PatchNetworkPolicyStatus), varargs...)
}

// MockMulticlusterNetworkPolicyClient is a mock of MulticlusterNetworkPolicyClient interface
type MockMulticlusterNetworkPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterNetworkPolicyClientMockRecorder
}

// MockMulticlusterNetworkPolicyClientMockRecorder is the mock recorder for MockMulticlusterNetworkPolicyClient
type MockMulticlusterNetworkPolicyClientMockRecorder struct {
	mock *MockMulticlusterNetworkPolicyClient
}

// NewMockMulticlusterNetworkPolicyClient creates a new mock instance
func NewMockMulticlusterNetworkPolicyClient(ctrl *gomock.Controller) *MockMulticlusterNetworkPolicyClient {
	mock := &MockMulticlusterNetworkPolicyClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterNetworkPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterNetworkPolicyClient) EXPECT() *MockMulticlusterNetworkPolicyClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterNetworkPolicyClient) Cluster(cluster string) (v1.NetworkPolicyClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.NetworkPolicyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterNetworkPolicyClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterNetworkPolicyClient)(nil).Cluster), cluster)
}

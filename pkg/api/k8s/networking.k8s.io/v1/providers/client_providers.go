// Code generated by skv2. DO NOT EDIT.

package v1

import (
	networking_k8s_io_v1 "github.com/solo-io/external-apis/pkg/api/k8s/networking.k8s.io/v1"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for NetworkPolicyClient from Clientset
func NetworkPolicyClientFromClientsetProvider(clients networking_k8s_io_v1.Clientset) networking_k8s_io_v1.NetworkPolicyClient {
	return clients.NetworkPolicies()
}

// Provider for NetworkPolicy Client from Client
func NetworkPolicyClientProvider(client client.Client) networking_k8s_io_v1.NetworkPolicyClient {
	return networking_k8s_io_v1.NewNetworkPolicyClient(client)
}

type NetworkPolicyClientFactory func(client client.Client) networking_k8s_io_v1.NetworkPolicyClient

func NetworkPolicyClientFactoryProvider() NetworkPolicyClientFactory {
	return NetworkPolicyClientProvider
}

type NetworkPolicyClientFromConfigFactory func(cfg *rest.Config) (networking_k8s_io_v1.NetworkPolicyClient, error)

func NetworkPolicyClientFromConfigFactoryProvider() NetworkPolicyClientFromConfigFactory {
	return func(cfg *rest.Config) (networking_k8s_io_v1.NetworkPolicyClient, error) {
		clients, err := networking_k8s_io_v1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.NetworkPolicies(), nil
	}
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	networking_k8s_io_v1 "k8s.io/api/networking/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the networking.k8s.io/v1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the networking.k8s.io/v1 APIs
type Clientset interface {
	// clienset for the networking.k8s.io/v1/v1 APIs
	NetworkPolicies() NetworkPolicyClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := networking_k8s_io_v1.SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the networking.k8s.io/v1/v1 APIs
func (c *clientSet) NetworkPolicies() NetworkPolicyClient {
	return NewNetworkPolicyClient(c.client)
}

// Reader knows how to read and list NetworkPolicys.
type NetworkPolicyReader interface {
	// Get retrieves a NetworkPolicy for the given object key
	GetNetworkPolicy(ctx context.Context, key client.ObjectKey) (*networking_k8s_io_v1.NetworkPolicy, error)

	// List retrieves list of NetworkPolicys for a given namespace and list options.
	ListNetworkPolicy(ctx context.Context, opts ...client.ListOption) (*networking_k8s_io_v1.NetworkPolicyList, error)
}

// NetworkPolicyTransitionFunction instructs the NetworkPolicyWriter how to transition between an existing
// NetworkPolicy object and a desired on an Upsert
type NetworkPolicyTransitionFunction func(existing, desired *networking_k8s_io_v1.NetworkPolicy) error

// Writer knows how to create, delete, and update NetworkPolicys.
type NetworkPolicyWriter interface {
	// Create saves the NetworkPolicy object.
	CreateNetworkPolicy(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, opts ...client.CreateOption) error

	// Delete deletes the NetworkPolicy object.
	DeleteNetworkPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given NetworkPolicy object.
	UpdateNetworkPolicy(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, opts ...client.UpdateOption) error

	// Patch patches the given NetworkPolicy object.
	PatchNetworkPolicy(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all NetworkPolicy objects matching the given options.
	DeleteAllOfNetworkPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the NetworkPolicy object.
	UpsertNetworkPolicy(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, transitionFuncs ...NetworkPolicyTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a NetworkPolicy object.
type NetworkPolicyStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given NetworkPolicy object.
	UpdateNetworkPolicyStatus(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given NetworkPolicy object's subresource.
	PatchNetworkPolicyStatus(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on NetworkPolicys.
type NetworkPolicyClient interface {
	NetworkPolicyReader
	NetworkPolicyWriter
	NetworkPolicyStatusWriter
}

type networkPolicyClient struct {
	client client.Client
}

func NewNetworkPolicyClient(client client.Client) *networkPolicyClient {
	return &networkPolicyClient{client: client}
}

func (c *networkPolicyClient) GetNetworkPolicy(ctx context.Context, key client.ObjectKey) (*networking_k8s_io_v1.NetworkPolicy, error) {
	obj := &networking_k8s_io_v1.NetworkPolicy{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *networkPolicyClient) ListNetworkPolicy(ctx context.Context, opts ...client.ListOption) (*networking_k8s_io_v1.NetworkPolicyList, error) {
	list := &networking_k8s_io_v1.NetworkPolicyList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *networkPolicyClient) CreateNetworkPolicy(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *networkPolicyClient) DeleteNetworkPolicy(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &networking_k8s_io_v1.NetworkPolicy{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *networkPolicyClient) UpdateNetworkPolicy(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *networkPolicyClient) PatchNetworkPolicy(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *networkPolicyClient) DeleteAllOfNetworkPolicy(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &networking_k8s_io_v1.NetworkPolicy{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *networkPolicyClient) UpsertNetworkPolicy(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, transitionFuncs ...NetworkPolicyTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*networking_k8s_io_v1.NetworkPolicy), desired.(*networking_k8s_io_v1.NetworkPolicy)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *networkPolicyClient) UpdateNetworkPolicyStatus(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *networkPolicyClient) PatchNetworkPolicyStatus(ctx context.Context, obj *networking_k8s_io_v1.NetworkPolicy, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides NetworkPolicyClients for multiple clusters.
type MulticlusterNetworkPolicyClient interface {
	// Cluster returns a NetworkPolicyClient for the given cluster
	Cluster(cluster string) (NetworkPolicyClient, error)
}

type multiclusterNetworkPolicyClient struct {
	client multicluster.Client
}

func NewMulticlusterNetworkPolicyClient(client multicluster.Client) MulticlusterNetworkPolicyClient {
	return &multiclusterNetworkPolicyClient{client: client}
}

func (m *multiclusterNetworkPolicyClient) Cluster(cluster string) (NetworkPolicyClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewNetworkPolicyClient(client), nil
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	networking_k8s_io_v1 "k8s.io/api/networking/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the NetworkPolicy Resource across clusters.
// implemented by the user
type MulticlusterNetworkPolicyReconciler interface {
	ReconcileNetworkPolicy(clusterName string, obj *networking_k8s_io_v1.NetworkPolicy) (reconcile.Result, error)
}

// Reconcile deletion events for the NetworkPolicy Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterNetworkPolicyDeletionReconciler interface {
	ReconcileNetworkPolicyDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterNetworkPolicyReconcilerFuncs struct {
	OnReconcileNetworkPolicy         func(clusterName string, obj *networking_k8s_io_v1.NetworkPolicy) (reconcile.Result, error)
	OnReconcileNetworkPolicyDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterNetworkPolicyReconcilerFuncs) ReconcileNetworkPolicy(clusterName string, obj *networking_k8s_io_v1.NetworkPolicy) (reconcile.Result, error) {
	if f.OnReconcileNetworkPolicy == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileNetworkPolicy(clusterName, obj)
}

func (f *MulticlusterNetworkPolicyReconcilerFuncs) ReconcileNetworkPolicyDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileNetworkPolicyDeletion == nil {
		return nil
	}
	return f.OnReconcileNetworkPolicyDeletion(clusterName, req)
}

type MulticlusterNetworkPolicyReconcileLoop interface {
	// AddMulticlusterNetworkPolicyReconciler adds a MulticlusterNetworkPolicyReconciler to the MulticlusterNetworkPolicyReconcileLoop.
	AddMulticlusterNetworkPolicyReconciler(ctx context.Context, rec MulticlusterNetworkPolicyReconciler, predicates ...predicate.Predicate)
}

type multiclusterNetworkPolicyReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterNetworkPolicyReconcileLoop) AddMulticlusterNetworkPolicyReconciler(ctx context.Context, rec MulticlusterNetworkPolicyReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericNetworkPolicyMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterNetworkPolicyReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterNetworkPolicyReconcileLoop {
	return &multiclusterNetworkPolicyReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_k8s_io_v1.NetworkPolicy{}, options)}
}

type genericNetworkPolicyMulticlusterReconciler struct {
	reconciler MulticlusterNetworkPolicyReconciler
}

func (g genericNetworkPolicyMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterNetworkPolicyDeletionReconciler); ok {
		return deletionReconciler.ReconcileNetworkPolicyDeletion(cluster, req)
	}
	return nil
}

func (g genericNetworkPolicyMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_k8s_io_v1.NetworkPolicy)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: NetworkPolicy handler received event for %T", object)
	}
	return g.reconciler.ReconcileNetworkPolicy(cluster, obj)
}

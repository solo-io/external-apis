// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/networking.k8s.io/v1/controller"
	v1 "k8s.io/api/networking/v1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockNetworkPolicyEventHandler is a mock of NetworkPolicyEventHandler interface.
type MockNetworkPolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPolicyEventHandlerMockRecorder
}

// MockNetworkPolicyEventHandlerMockRecorder is the mock recorder for MockNetworkPolicyEventHandler.
type MockNetworkPolicyEventHandlerMockRecorder struct {
	mock *MockNetworkPolicyEventHandler
}

// NewMockNetworkPolicyEventHandler creates a new mock instance.
func NewMockNetworkPolicyEventHandler(ctrl *gomock.Controller) *MockNetworkPolicyEventHandler {
	mock := &MockNetworkPolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockNetworkPolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkPolicyEventHandler) EXPECT() *MockNetworkPolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateNetworkPolicy mocks base method.
func (m *MockNetworkPolicyEventHandler) CreateNetworkPolicy(obj *v1.NetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkPolicy indicates an expected call of CreateNetworkPolicy.
func (mr *MockNetworkPolicyEventHandlerMockRecorder) CreateNetworkPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyEventHandler)(nil).CreateNetworkPolicy), obj)
}

// DeleteNetworkPolicy mocks base method.
func (m *MockNetworkPolicyEventHandler) DeleteNetworkPolicy(obj *v1.NetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkPolicy indicates an expected call of DeleteNetworkPolicy.
func (mr *MockNetworkPolicyEventHandlerMockRecorder) DeleteNetworkPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyEventHandler)(nil).DeleteNetworkPolicy), obj)
}

// GenericNetworkPolicy mocks base method.
func (m *MockNetworkPolicyEventHandler) GenericNetworkPolicy(obj *v1.NetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericNetworkPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericNetworkPolicy indicates an expected call of GenericNetworkPolicy.
func (mr *MockNetworkPolicyEventHandlerMockRecorder) GenericNetworkPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyEventHandler)(nil).GenericNetworkPolicy), obj)
}

// UpdateNetworkPolicy mocks base method.
func (m *MockNetworkPolicyEventHandler) UpdateNetworkPolicy(old, new *v1.NetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkPolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkPolicy indicates an expected call of UpdateNetworkPolicy.
func (mr *MockNetworkPolicyEventHandlerMockRecorder) UpdateNetworkPolicy(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkPolicy", reflect.TypeOf((*MockNetworkPolicyEventHandler)(nil).UpdateNetworkPolicy), old, new)
}

// MockNetworkPolicyEventWatcher is a mock of NetworkPolicyEventWatcher interface.
type MockNetworkPolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPolicyEventWatcherMockRecorder
}

// MockNetworkPolicyEventWatcherMockRecorder is the mock recorder for MockNetworkPolicyEventWatcher.
type MockNetworkPolicyEventWatcherMockRecorder struct {
	mock *MockNetworkPolicyEventWatcher
}

// NewMockNetworkPolicyEventWatcher creates a new mock instance.
func NewMockNetworkPolicyEventWatcher(ctrl *gomock.Controller) *MockNetworkPolicyEventWatcher {
	mock := &MockNetworkPolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockNetworkPolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkPolicyEventWatcher) EXPECT() *MockNetworkPolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockNetworkPolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.NetworkPolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockNetworkPolicyEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockNetworkPolicyEventWatcher)(nil).AddEventHandler), varargs...)
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1sets

import (
	batch_v1 "k8s.io/api/batch/v1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type JobSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*batch_v1.Job) bool) []*batch_v1.Job
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*batch_v1.Job) bool) []*batch_v1.Job
	// Return the Set as a map of key to resource.
	Map() map[string]*batch_v1.Job
	// Insert a resource into the set.
	Insert(job ...*batch_v1.Job)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(jobSet JobSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(job ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(job ezkube.ResourceId)
	// Return the union with the provided set
	Union(set JobSet) JobSet
	// Return the difference with the provided set
	Difference(set JobSet) JobSet
	// Return the intersection with the provided set
	Intersection(set JobSet) JobSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*batch_v1.Job, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another JobSet
	Delta(newSet JobSet) sksets.ResourceDelta
	// Create a deep copy of the current JobSet
	Clone() JobSet
	// Get the sort function used by the set
	GetSortFunc() func(toInsert, existing client.Object) bool
	// Get the equality function used by the set
	GetEqualityFunc() func(a, b client.Object) bool
}

func makeGenericJobSet(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	jobList []*batch_v1.Job,
) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range jobList {
		genericResources = append(genericResources, obj)
	}
	genericSortFunc := func(toInsert, existing ezkube.ResourceId) bool {
		return sortFunc(toInsert.(client.Object), existing.(client.Object))
	}
	genericEqualityFunc := func(a, b ezkube.ResourceId) bool {
		return equalityFunc(a.(client.Object), b.(client.Object))
	}
	return sksets.NewResourceSet(genericSortFunc, genericEqualityFunc, genericResources...)
}

type jobSet struct {
	set          sksets.ResourceSet
	sortFunc     func(toInsert, existing client.Object) bool
	equalityFunc func(a, b client.Object) bool
}

func NewJobSet(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	jobList ...*batch_v1.Job,
) JobSet {
	return &jobSet{
		set:          makeGenericJobSet(sortFunc, equalityFunc, jobList),
		sortFunc:     sortFunc,
		equalityFunc: equalityFunc,
	}
}

func NewJobSetFromList(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	jobList *batch_v1.JobList,
) JobSet {
	list := make([]*batch_v1.Job, 0, len(jobList.Items))
	for idx := range jobList.Items {
		list = append(list, &jobList.Items[idx])
	}
	return &jobSet{
		set:          makeGenericJobSet(sortFunc, equalityFunc, list),
		sortFunc:     sortFunc,
		equalityFunc: equalityFunc,
	}
}

func (s *jobSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *jobSet) List(filterResource ...func(*batch_v1.Job) bool) []*batch_v1.Job {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*batch_v1.Job))
		})
	}

	objs := s.Generic().List(genericFilters...)
	jobList := make([]*batch_v1.Job, 0, len(objs))
	for _, obj := range objs {
		jobList = append(jobList, obj.(*batch_v1.Job))
	}
	return jobList
}

func (s *jobSet) UnsortedList(filterResource ...func(*batch_v1.Job) bool) []*batch_v1.Job {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*batch_v1.Job))
		})
	}

	var jobList []*batch_v1.Job
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		jobList = append(jobList, obj.(*batch_v1.Job))
	}
	return jobList
}

func (s *jobSet) Map() map[string]*batch_v1.Job {
	if s == nil {
		return nil
	}

	newMap := map[string]*batch_v1.Job{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*batch_v1.Job)
	}
	return newMap
}

func (s *jobSet) Insert(
	jobList ...*batch_v1.Job,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range jobList {
		s.Generic().Insert(obj)
	}
}

func (s *jobSet) Has(job ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(job)
}

func (s *jobSet) Equal(
	jobSet JobSet,
) bool {
	if s == nil {
		return jobSet == nil
	}
	return s.Generic().Equal(jobSet.Generic())
}

func (s *jobSet) Delete(Job ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(Job)
}

func (s *jobSet) Union(set JobSet) JobSet {
	if s == nil {
		return set
	}
	return NewJobSet(s.sortFunc, s.equalityFunc, append(s.List(), set.List()...)...)
}

func (s *jobSet) Difference(set JobSet) JobSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &jobSet{
		set:          newSet,
		sortFunc:     s.sortFunc,
		equalityFunc: s.equalityFunc,
	}
}

func (s *jobSet) Intersection(set JobSet) JobSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var jobList []*batch_v1.Job
	for _, obj := range newSet.List() {
		jobList = append(jobList, obj.(*batch_v1.Job))
	}
	return NewJobSet(s.sortFunc, s.equalityFunc, jobList...)
}

func (s *jobSet) Find(id ezkube.ResourceId) (*batch_v1.Job, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find Job %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&batch_v1.Job{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*batch_v1.Job), nil
}

func (s *jobSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *jobSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *jobSet) Delta(newSet JobSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *jobSet) Clone() JobSet {
	if s == nil {
		return nil
	}
	genericSortFunc := func(toInsert, existing ezkube.ResourceId) bool {
		return s.sortFunc(toInsert.(client.Object), existing.(client.Object))
	}
	genericEqualityFunc := func(a, b ezkube.ResourceId) bool {
		return s.equalityFunc(a.(client.Object), b.(client.Object))
	}
	return &jobSet{
		set: sksets.NewResourceSet(
			genericSortFunc,
			genericEqualityFunc,
			s.Generic().Clone().List()...,
		),
	}
}

func (s *jobSet) GetSortFunc() func(toInsert, existing client.Object) bool {
	return s.sortFunc
}

func (s *jobSet) GetEqualityFunc() func(a, b client.Object) bool {
	return s.equalityFunc
}

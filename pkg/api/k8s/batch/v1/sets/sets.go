// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1sets

import (
	batch_v1 "k8s.io/api/batch/v1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type JobSet interface {
	Keys() sets.String
	List() []*batch_v1.Job
	Map() map[string]*batch_v1.Job
	Insert(job ...*batch_v1.Job)
	Equal(jobSet JobSet) bool
	Has(job *batch_v1.Job) bool
	Delete(job *batch_v1.Job)
	Union(set JobSet) JobSet
	Difference(set JobSet) JobSet
	Intersection(set JobSet) JobSet
	Find(id ezkube.ResourceId) (*batch_v1.Job, error)
}

func makeGenericJobSet(jobList []*batch_v1.Job) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range jobList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type jobSet struct {
	set sksets.ResourceSet
}

func NewJobSet(jobList ...*batch_v1.Job) JobSet {
	return &jobSet{set: makeGenericJobSet(jobList)}
}

func (s jobSet) Keys() sets.String {
	return s.set.Keys()
}

func (s jobSet) List() []*batch_v1.Job {
	var jobList []*batch_v1.Job
	for _, obj := range s.set.List() {
		jobList = append(jobList, obj.(*batch_v1.Job))
	}
	return jobList
}

func (s jobSet) Map() map[string]*batch_v1.Job {
	newMap := map[string]*batch_v1.Job{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*batch_v1.Job)
	}
	return newMap
}

func (s jobSet) Insert(
	jobList ...*batch_v1.Job,
) {
	for _, obj := range jobList {
		s.set.Insert(obj)
	}
}

func (s jobSet) Has(job *batch_v1.Job) bool {
	return s.set.Has(job)
}

func (s jobSet) Equal(
	jobSet JobSet,
) bool {
	return s.set.Equal(makeGenericJobSet(jobSet.List()))
}

func (s jobSet) Delete(Job *batch_v1.Job) {
	s.set.Delete(Job)
}

func (s jobSet) Union(set JobSet) JobSet {
	return NewJobSet(append(s.List(), set.List()...)...)
}

func (s jobSet) Difference(set JobSet) JobSet {
	newSet := s.set.Difference(makeGenericJobSet(set.List()))
	return jobSet{set: newSet}
}

func (s jobSet) Intersection(set JobSet) JobSet {
	newSet := s.set.Intersection(makeGenericJobSet(set.List()))
	var jobList []*batch_v1.Job
	for _, obj := range newSet.List() {
		jobList = append(jobList, obj.(*batch_v1.Job))
	}
	return NewJobSet(jobList...)
}

func (s jobSet) Find(id ezkube.ResourceId) (*batch_v1.Job, error) {
	obj, err := s.set.Find(&batch_v1.Job{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*batch_v1.Job), nil
}

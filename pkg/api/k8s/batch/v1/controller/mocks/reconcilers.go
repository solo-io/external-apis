// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/batch/v1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1 "k8s.io/api/batch/v1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockJobReconciler is a mock of JobReconciler interface
type MockJobReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockJobReconcilerMockRecorder
}

// MockJobReconcilerMockRecorder is the mock recorder for MockJobReconciler
type MockJobReconcilerMockRecorder struct {
	mock *MockJobReconciler
}

// NewMockJobReconciler creates a new mock instance
func NewMockJobReconciler(ctrl *gomock.Controller) *MockJobReconciler {
	mock := &MockJobReconciler{ctrl: ctrl}
	mock.recorder = &MockJobReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobReconciler) EXPECT() *MockJobReconcilerMockRecorder {
	return m.recorder
}

// ReconcileJob mocks base method
func (m *MockJobReconciler) ReconcileJob(obj *v1.Job) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileJob", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileJob indicates an expected call of ReconcileJob
func (mr *MockJobReconcilerMockRecorder) ReconcileJob(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileJob", reflect.TypeOf((*MockJobReconciler)(nil).ReconcileJob), obj)
}

// MockJobDeletionReconciler is a mock of JobDeletionReconciler interface
type MockJobDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockJobDeletionReconcilerMockRecorder
}

// MockJobDeletionReconcilerMockRecorder is the mock recorder for MockJobDeletionReconciler
type MockJobDeletionReconcilerMockRecorder struct {
	mock *MockJobDeletionReconciler
}

// NewMockJobDeletionReconciler creates a new mock instance
func NewMockJobDeletionReconciler(ctrl *gomock.Controller) *MockJobDeletionReconciler {
	mock := &MockJobDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockJobDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobDeletionReconciler) EXPECT() *MockJobDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileJobDeletion mocks base method
func (m *MockJobDeletionReconciler) ReconcileJobDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileJobDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileJobDeletion indicates an expected call of ReconcileJobDeletion
func (mr *MockJobDeletionReconcilerMockRecorder) ReconcileJobDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileJobDeletion", reflect.TypeOf((*MockJobDeletionReconciler)(nil).ReconcileJobDeletion), req)
}

// MockJobFinalizer is a mock of JobFinalizer interface
type MockJobFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockJobFinalizerMockRecorder
}

// MockJobFinalizerMockRecorder is the mock recorder for MockJobFinalizer
type MockJobFinalizerMockRecorder struct {
	mock *MockJobFinalizer
}

// NewMockJobFinalizer creates a new mock instance
func NewMockJobFinalizer(ctrl *gomock.Controller) *MockJobFinalizer {
	mock := &MockJobFinalizer{ctrl: ctrl}
	mock.recorder = &MockJobFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobFinalizer) EXPECT() *MockJobFinalizerMockRecorder {
	return m.recorder
}

// ReconcileJob mocks base method
func (m *MockJobFinalizer) ReconcileJob(obj *v1.Job) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileJob", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileJob indicates an expected call of ReconcileJob
func (mr *MockJobFinalizerMockRecorder) ReconcileJob(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileJob", reflect.TypeOf((*MockJobFinalizer)(nil).ReconcileJob), obj)
}

// JobFinalizerName mocks base method
func (m *MockJobFinalizer) JobFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// JobFinalizerName indicates an expected call of JobFinalizerName
func (mr *MockJobFinalizerMockRecorder) JobFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobFinalizerName", reflect.TypeOf((*MockJobFinalizer)(nil).JobFinalizerName))
}

// FinalizeJob mocks base method
func (m *MockJobFinalizer) FinalizeJob(obj *v1.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeJob", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeJob indicates an expected call of FinalizeJob
func (mr *MockJobFinalizerMockRecorder) FinalizeJob(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeJob", reflect.TypeOf((*MockJobFinalizer)(nil).FinalizeJob), obj)
}

// MockJobReconcileLoop is a mock of JobReconcileLoop interface
type MockJobReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockJobReconcileLoopMockRecorder
}

// MockJobReconcileLoopMockRecorder is the mock recorder for MockJobReconcileLoop
type MockJobReconcileLoopMockRecorder struct {
	mock *MockJobReconcileLoop
}

// NewMockJobReconcileLoop creates a new mock instance
func NewMockJobReconcileLoop(ctrl *gomock.Controller) *MockJobReconcileLoop {
	mock := &MockJobReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockJobReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJobReconcileLoop) EXPECT() *MockJobReconcileLoopMockRecorder {
	return m.recorder
}

// RunJobReconciler mocks base method
func (m *MockJobReconcileLoop) RunJobReconciler(ctx context.Context, rec controller.JobReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunJobReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunJobReconciler indicates an expected call of RunJobReconciler
func (mr *MockJobReconcileLoopMockRecorder) RunJobReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunJobReconciler", reflect.TypeOf((*MockJobReconcileLoop)(nil).RunJobReconciler), varargs...)
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	batch_v1 "k8s.io/api/batch/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the Job Resource across clusters.
// implemented by the user
type MulticlusterJobReconciler interface {
	ReconcileJob(clusterName string, obj *batch_v1.Job) (reconcile.Result, error)
}

// Reconcile deletion events for the Job Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterJobDeletionReconciler interface {
	ReconcileJobDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterJobReconcilerFuncs struct {
	OnReconcileJob         func(clusterName string, obj *batch_v1.Job) (reconcile.Result, error)
	OnReconcileJobDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterJobReconcilerFuncs) ReconcileJob(clusterName string, obj *batch_v1.Job) (reconcile.Result, error) {
	if f.OnReconcileJob == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileJob(clusterName, obj)
}

func (f *MulticlusterJobReconcilerFuncs) ReconcileJobDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileJobDeletion == nil {
		return nil
	}
	return f.OnReconcileJobDeletion(clusterName, req)
}

type MulticlusterJobReconcileLoop interface {
	// AddMulticlusterJobReconciler adds a MulticlusterJobReconciler to the MulticlusterJobReconcileLoop.
	AddMulticlusterJobReconciler(ctx context.Context, rec MulticlusterJobReconciler, predicates ...predicate.Predicate)
}

type multiclusterJobReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterJobReconcileLoop) AddMulticlusterJobReconciler(ctx context.Context, rec MulticlusterJobReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericJobMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterJobReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterJobReconcileLoop {
	return &multiclusterJobReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &batch_v1.Job{}, options)}
}

type genericJobMulticlusterReconciler struct {
	reconciler MulticlusterJobReconciler
}

func (g genericJobMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterJobDeletionReconciler); ok {
		return deletionReconciler.ReconcileJobDeletion(cluster, req)
	}
	return nil
}

func (g genericJobMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*batch_v1.Job)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Job handler received event for %T", object)
	}
	return g.reconciler.ReconcileJob(cluster, obj)
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1beta1sets

import (
	gateway_networking_k8s_io_v1beta1 "sigs.k8s.io/gateway-api/apis/v1beta1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type GatewaySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*gateway_networking_k8s_io_v1beta1.Gateway) bool) []*gateway_networking_k8s_io_v1beta1.Gateway
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1beta1.Gateway) bool) []*gateway_networking_k8s_io_v1beta1.Gateway
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1beta1.Gateway
	// Insert a resource into the set.
	Insert(gateway ...*gateway_networking_k8s_io_v1beta1.Gateway)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(gatewaySet GatewaySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(gateway ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(gateway ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GatewaySet) GatewaySet
	// Return the difference with the provided set
	Difference(set GatewaySet) GatewaySet
	// Return the intersection with the provided set
	Intersection(set GatewaySet) GatewaySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1beta1.Gateway, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GatewaySet
	Delta(newSet GatewaySet) sksets.ResourceDelta
	// Create a deep copy of the current GatewaySet
	Clone() GatewaySet
}

func makeGenericGatewaySet(gatewayList []*gateway_networking_k8s_io_v1beta1.Gateway) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range gatewayList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type gatewaySet struct {
	set sksets.ResourceSet
}

func NewGatewaySet(gatewayList ...*gateway_networking_k8s_io_v1beta1.Gateway) GatewaySet {
	return &gatewaySet{set: makeGenericGatewaySet(gatewayList)}
}

func NewGatewaySetFromList(gatewayList *gateway_networking_k8s_io_v1beta1.GatewayList) GatewaySet {
	list := make([]*gateway_networking_k8s_io_v1beta1.Gateway, 0, len(gatewayList.Items))
	for idx := range gatewayList.Items {
		list = append(list, &gatewayList.Items[idx])
	}
	return &gatewaySet{set: makeGenericGatewaySet(list)}
}

func (s *gatewaySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *gatewaySet) List(filterResource ...func(*gateway_networking_k8s_io_v1beta1.Gateway) bool) []*gateway_networking_k8s_io_v1beta1.Gateway {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1beta1.Gateway))
		})
	}

	objs := s.Generic().List(genericFilters...)
	gatewayList := make([]*gateway_networking_k8s_io_v1beta1.Gateway, 0, len(objs))
	for _, obj := range objs {
		gatewayList = append(gatewayList, obj.(*gateway_networking_k8s_io_v1beta1.Gateway))
	}
	return gatewayList
}

func (s *gatewaySet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1beta1.Gateway) bool) []*gateway_networking_k8s_io_v1beta1.Gateway {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1beta1.Gateway))
		})
	}

	var gatewayList []*gateway_networking_k8s_io_v1beta1.Gateway
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		gatewayList = append(gatewayList, obj.(*gateway_networking_k8s_io_v1beta1.Gateway))
	}
	return gatewayList
}

func (s *gatewaySet) Map() map[string]*gateway_networking_k8s_io_v1beta1.Gateway {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1beta1.Gateway{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1beta1.Gateway)
	}
	return newMap
}

func (s *gatewaySet) Insert(
	gatewayList ...*gateway_networking_k8s_io_v1beta1.Gateway,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range gatewayList {
		s.Generic().Insert(obj)
	}
}

func (s *gatewaySet) Has(gateway ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(gateway)
}

func (s *gatewaySet) Equal(
	gatewaySet GatewaySet,
) bool {
	if s == nil {
		return gatewaySet == nil
	}
	return s.Generic().Equal(gatewaySet.Generic())
}

func (s *gatewaySet) Delete(Gateway ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(Gateway)
}

func (s *gatewaySet) Union(set GatewaySet) GatewaySet {
	if s == nil {
		return set
	}
	return NewGatewaySet(append(s.List(), set.List()...)...)
}

func (s *gatewaySet) Difference(set GatewaySet) GatewaySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &gatewaySet{set: newSet}
}

func (s *gatewaySet) Intersection(set GatewaySet) GatewaySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var gatewayList []*gateway_networking_k8s_io_v1beta1.Gateway
	for _, obj := range newSet.List() {
		gatewayList = append(gatewayList, obj.(*gateway_networking_k8s_io_v1beta1.Gateway))
	}
	return NewGatewaySet(gatewayList...)
}

func (s *gatewaySet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1beta1.Gateway, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find Gateway %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1beta1.Gateway{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1beta1.Gateway), nil
}

func (s *gatewaySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *gatewaySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *gatewaySet) Delta(newSet GatewaySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *gatewaySet) Clone() GatewaySet {
	if s == nil {
		return nil
	}
	return &gatewaySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type GatewayClassSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*gateway_networking_k8s_io_v1beta1.GatewayClass) bool) []*gateway_networking_k8s_io_v1beta1.GatewayClass
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1beta1.GatewayClass) bool) []*gateway_networking_k8s_io_v1beta1.GatewayClass
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1beta1.GatewayClass
	// Insert a resource into the set.
	Insert(gatewayClass ...*gateway_networking_k8s_io_v1beta1.GatewayClass)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(gatewayClassSet GatewayClassSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(gatewayClass ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(gatewayClass ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GatewayClassSet) GatewayClassSet
	// Return the difference with the provided set
	Difference(set GatewayClassSet) GatewayClassSet
	// Return the intersection with the provided set
	Intersection(set GatewayClassSet) GatewayClassSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1beta1.GatewayClass, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GatewayClassSet
	Delta(newSet GatewayClassSet) sksets.ResourceDelta
	// Create a deep copy of the current GatewayClassSet
	Clone() GatewayClassSet
}

func makeGenericGatewayClassSet(gatewayClassList []*gateway_networking_k8s_io_v1beta1.GatewayClass) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range gatewayClassList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type gatewayClassSet struct {
	set sksets.ResourceSet
}

func NewGatewayClassSet(gatewayClassList ...*gateway_networking_k8s_io_v1beta1.GatewayClass) GatewayClassSet {
	return &gatewayClassSet{set: makeGenericGatewayClassSet(gatewayClassList)}
}

func NewGatewayClassSetFromList(gatewayClassList *gateway_networking_k8s_io_v1beta1.GatewayClassList) GatewayClassSet {
	list := make([]*gateway_networking_k8s_io_v1beta1.GatewayClass, 0, len(gatewayClassList.Items))
	for idx := range gatewayClassList.Items {
		list = append(list, &gatewayClassList.Items[idx])
	}
	return &gatewayClassSet{set: makeGenericGatewayClassSet(list)}
}

func (s *gatewayClassSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *gatewayClassSet) List(filterResource ...func(*gateway_networking_k8s_io_v1beta1.GatewayClass) bool) []*gateway_networking_k8s_io_v1beta1.GatewayClass {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1beta1.GatewayClass))
		})
	}

	objs := s.Generic().List(genericFilters...)
	gatewayClassList := make([]*gateway_networking_k8s_io_v1beta1.GatewayClass, 0, len(objs))
	for _, obj := range objs {
		gatewayClassList = append(gatewayClassList, obj.(*gateway_networking_k8s_io_v1beta1.GatewayClass))
	}
	return gatewayClassList
}

func (s *gatewayClassSet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1beta1.GatewayClass) bool) []*gateway_networking_k8s_io_v1beta1.GatewayClass {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1beta1.GatewayClass))
		})
	}

	var gatewayClassList []*gateway_networking_k8s_io_v1beta1.GatewayClass
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		gatewayClassList = append(gatewayClassList, obj.(*gateway_networking_k8s_io_v1beta1.GatewayClass))
	}
	return gatewayClassList
}

func (s *gatewayClassSet) Map() map[string]*gateway_networking_k8s_io_v1beta1.GatewayClass {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1beta1.GatewayClass{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1beta1.GatewayClass)
	}
	return newMap
}

func (s *gatewayClassSet) Insert(
	gatewayClassList ...*gateway_networking_k8s_io_v1beta1.GatewayClass,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range gatewayClassList {
		s.Generic().Insert(obj)
	}
}

func (s *gatewayClassSet) Has(gatewayClass ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(gatewayClass)
}

func (s *gatewayClassSet) Equal(
	gatewayClassSet GatewayClassSet,
) bool {
	if s == nil {
		return gatewayClassSet == nil
	}
	return s.Generic().Equal(gatewayClassSet.Generic())
}

func (s *gatewayClassSet) Delete(GatewayClass ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GatewayClass)
}

func (s *gatewayClassSet) Union(set GatewayClassSet) GatewayClassSet {
	if s == nil {
		return set
	}
	return NewGatewayClassSet(append(s.List(), set.List()...)...)
}

func (s *gatewayClassSet) Difference(set GatewayClassSet) GatewayClassSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &gatewayClassSet{set: newSet}
}

func (s *gatewayClassSet) Intersection(set GatewayClassSet) GatewayClassSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var gatewayClassList []*gateway_networking_k8s_io_v1beta1.GatewayClass
	for _, obj := range newSet.List() {
		gatewayClassList = append(gatewayClassList, obj.(*gateway_networking_k8s_io_v1beta1.GatewayClass))
	}
	return NewGatewayClassSet(gatewayClassList...)
}

func (s *gatewayClassSet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1beta1.GatewayClass, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GatewayClass %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1beta1.GatewayClass{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1beta1.GatewayClass), nil
}

func (s *gatewayClassSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *gatewayClassSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *gatewayClassSet) Delta(newSet GatewayClassSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *gatewayClassSet) Clone() GatewayClassSet {
	if s == nil {
		return nil
	}
	return &gatewayClassSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type HTTPRouteSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*gateway_networking_k8s_io_v1beta1.HTTPRoute) bool) []*gateway_networking_k8s_io_v1beta1.HTTPRoute
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1beta1.HTTPRoute) bool) []*gateway_networking_k8s_io_v1beta1.HTTPRoute
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1beta1.HTTPRoute
	// Insert a resource into the set.
	Insert(hTTPRoute ...*gateway_networking_k8s_io_v1beta1.HTTPRoute)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(hTTPRouteSet HTTPRouteSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(hTTPRoute ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(hTTPRoute ezkube.ResourceId)
	// Return the union with the provided set
	Union(set HTTPRouteSet) HTTPRouteSet
	// Return the difference with the provided set
	Difference(set HTTPRouteSet) HTTPRouteSet
	// Return the intersection with the provided set
	Intersection(set HTTPRouteSet) HTTPRouteSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1beta1.HTTPRoute, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another HTTPRouteSet
	Delta(newSet HTTPRouteSet) sksets.ResourceDelta
	// Create a deep copy of the current HTTPRouteSet
	Clone() HTTPRouteSet
}

func makeGenericHTTPRouteSet(hTTPRouteList []*gateway_networking_k8s_io_v1beta1.HTTPRoute) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range hTTPRouteList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type hTTPRouteSet struct {
	set sksets.ResourceSet
}

func NewHTTPRouteSet(hTTPRouteList ...*gateway_networking_k8s_io_v1beta1.HTTPRoute) HTTPRouteSet {
	return &hTTPRouteSet{set: makeGenericHTTPRouteSet(hTTPRouteList)}
}

func NewHTTPRouteSetFromList(hTTPRouteList *gateway_networking_k8s_io_v1beta1.HTTPRouteList) HTTPRouteSet {
	list := make([]*gateway_networking_k8s_io_v1beta1.HTTPRoute, 0, len(hTTPRouteList.Items))
	for idx := range hTTPRouteList.Items {
		list = append(list, &hTTPRouteList.Items[idx])
	}
	return &hTTPRouteSet{set: makeGenericHTTPRouteSet(list)}
}

func (s *hTTPRouteSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *hTTPRouteSet) List(filterResource ...func(*gateway_networking_k8s_io_v1beta1.HTTPRoute) bool) []*gateway_networking_k8s_io_v1beta1.HTTPRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1beta1.HTTPRoute))
		})
	}

	objs := s.Generic().List(genericFilters...)
	hTTPRouteList := make([]*gateway_networking_k8s_io_v1beta1.HTTPRoute, 0, len(objs))
	for _, obj := range objs {
		hTTPRouteList = append(hTTPRouteList, obj.(*gateway_networking_k8s_io_v1beta1.HTTPRoute))
	}
	return hTTPRouteList
}

func (s *hTTPRouteSet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1beta1.HTTPRoute) bool) []*gateway_networking_k8s_io_v1beta1.HTTPRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1beta1.HTTPRoute))
		})
	}

	var hTTPRouteList []*gateway_networking_k8s_io_v1beta1.HTTPRoute
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		hTTPRouteList = append(hTTPRouteList, obj.(*gateway_networking_k8s_io_v1beta1.HTTPRoute))
	}
	return hTTPRouteList
}

func (s *hTTPRouteSet) Map() map[string]*gateway_networking_k8s_io_v1beta1.HTTPRoute {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1beta1.HTTPRoute{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1beta1.HTTPRoute)
	}
	return newMap
}

func (s *hTTPRouteSet) Insert(
	hTTPRouteList ...*gateway_networking_k8s_io_v1beta1.HTTPRoute,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range hTTPRouteList {
		s.Generic().Insert(obj)
	}
}

func (s *hTTPRouteSet) Has(hTTPRoute ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(hTTPRoute)
}

func (s *hTTPRouteSet) Equal(
	hTTPRouteSet HTTPRouteSet,
) bool {
	if s == nil {
		return hTTPRouteSet == nil
	}
	return s.Generic().Equal(hTTPRouteSet.Generic())
}

func (s *hTTPRouteSet) Delete(HTTPRoute ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(HTTPRoute)
}

func (s *hTTPRouteSet) Union(set HTTPRouteSet) HTTPRouteSet {
	if s == nil {
		return set
	}
	return NewHTTPRouteSet(append(s.List(), set.List()...)...)
}

func (s *hTTPRouteSet) Difference(set HTTPRouteSet) HTTPRouteSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &hTTPRouteSet{set: newSet}
}

func (s *hTTPRouteSet) Intersection(set HTTPRouteSet) HTTPRouteSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var hTTPRouteList []*gateway_networking_k8s_io_v1beta1.HTTPRoute
	for _, obj := range newSet.List() {
		hTTPRouteList = append(hTTPRouteList, obj.(*gateway_networking_k8s_io_v1beta1.HTTPRoute))
	}
	return NewHTTPRouteSet(hTTPRouteList...)
}

func (s *hTTPRouteSet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1beta1.HTTPRoute, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find HTTPRoute %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1beta1.HTTPRoute{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1beta1.HTTPRoute), nil
}

func (s *hTTPRouteSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *hTTPRouteSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *hTTPRouteSet) Delta(newSet HTTPRouteSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *hTTPRouteSet) Clone() HTTPRouteSet {
	if s == nil {
		return nil
	}
	return &hTTPRouteSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type ReferenceGrantSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*gateway_networking_k8s_io_v1beta1.ReferenceGrant) bool) []*gateway_networking_k8s_io_v1beta1.ReferenceGrant
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1beta1.ReferenceGrant) bool) []*gateway_networking_k8s_io_v1beta1.ReferenceGrant
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1beta1.ReferenceGrant
	// Insert a resource into the set.
	Insert(referenceGrant ...*gateway_networking_k8s_io_v1beta1.ReferenceGrant)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(referenceGrantSet ReferenceGrantSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(referenceGrant ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(referenceGrant ezkube.ResourceId)
	// Return the union with the provided set
	Union(set ReferenceGrantSet) ReferenceGrantSet
	// Return the difference with the provided set
	Difference(set ReferenceGrantSet) ReferenceGrantSet
	// Return the intersection with the provided set
	Intersection(set ReferenceGrantSet) ReferenceGrantSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1beta1.ReferenceGrant, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another ReferenceGrantSet
	Delta(newSet ReferenceGrantSet) sksets.ResourceDelta
	// Create a deep copy of the current ReferenceGrantSet
	Clone() ReferenceGrantSet
}

func makeGenericReferenceGrantSet(referenceGrantList []*gateway_networking_k8s_io_v1beta1.ReferenceGrant) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range referenceGrantList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type referenceGrantSet struct {
	set sksets.ResourceSet
}

func NewReferenceGrantSet(referenceGrantList ...*gateway_networking_k8s_io_v1beta1.ReferenceGrant) ReferenceGrantSet {
	return &referenceGrantSet{set: makeGenericReferenceGrantSet(referenceGrantList)}
}

func NewReferenceGrantSetFromList(referenceGrantList *gateway_networking_k8s_io_v1beta1.ReferenceGrantList) ReferenceGrantSet {
	list := make([]*gateway_networking_k8s_io_v1beta1.ReferenceGrant, 0, len(referenceGrantList.Items))
	for idx := range referenceGrantList.Items {
		list = append(list, &referenceGrantList.Items[idx])
	}
	return &referenceGrantSet{set: makeGenericReferenceGrantSet(list)}
}

func (s *referenceGrantSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *referenceGrantSet) List(filterResource ...func(*gateway_networking_k8s_io_v1beta1.ReferenceGrant) bool) []*gateway_networking_k8s_io_v1beta1.ReferenceGrant {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1beta1.ReferenceGrant))
		})
	}

	objs := s.Generic().List(genericFilters...)
	referenceGrantList := make([]*gateway_networking_k8s_io_v1beta1.ReferenceGrant, 0, len(objs))
	for _, obj := range objs {
		referenceGrantList = append(referenceGrantList, obj.(*gateway_networking_k8s_io_v1beta1.ReferenceGrant))
	}
	return referenceGrantList
}

func (s *referenceGrantSet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1beta1.ReferenceGrant) bool) []*gateway_networking_k8s_io_v1beta1.ReferenceGrant {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1beta1.ReferenceGrant))
		})
	}

	var referenceGrantList []*gateway_networking_k8s_io_v1beta1.ReferenceGrant
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		referenceGrantList = append(referenceGrantList, obj.(*gateway_networking_k8s_io_v1beta1.ReferenceGrant))
	}
	return referenceGrantList
}

func (s *referenceGrantSet) Map() map[string]*gateway_networking_k8s_io_v1beta1.ReferenceGrant {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1beta1.ReferenceGrant{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1beta1.ReferenceGrant)
	}
	return newMap
}

func (s *referenceGrantSet) Insert(
	referenceGrantList ...*gateway_networking_k8s_io_v1beta1.ReferenceGrant,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range referenceGrantList {
		s.Generic().Insert(obj)
	}
}

func (s *referenceGrantSet) Has(referenceGrant ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(referenceGrant)
}

func (s *referenceGrantSet) Equal(
	referenceGrantSet ReferenceGrantSet,
) bool {
	if s == nil {
		return referenceGrantSet == nil
	}
	return s.Generic().Equal(referenceGrantSet.Generic())
}

func (s *referenceGrantSet) Delete(ReferenceGrant ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(ReferenceGrant)
}

func (s *referenceGrantSet) Union(set ReferenceGrantSet) ReferenceGrantSet {
	if s == nil {
		return set
	}
	return NewReferenceGrantSet(append(s.List(), set.List()...)...)
}

func (s *referenceGrantSet) Difference(set ReferenceGrantSet) ReferenceGrantSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &referenceGrantSet{set: newSet}
}

func (s *referenceGrantSet) Intersection(set ReferenceGrantSet) ReferenceGrantSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var referenceGrantList []*gateway_networking_k8s_io_v1beta1.ReferenceGrant
	for _, obj := range newSet.List() {
		referenceGrantList = append(referenceGrantList, obj.(*gateway_networking_k8s_io_v1beta1.ReferenceGrant))
	}
	return NewReferenceGrantSet(referenceGrantList...)
}

func (s *referenceGrantSet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1beta1.ReferenceGrant, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find ReferenceGrant %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1beta1.ReferenceGrant{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1beta1.ReferenceGrant), nil
}

func (s *referenceGrantSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *referenceGrantSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *referenceGrantSet) Delta(newSet ReferenceGrantSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *referenceGrantSet) Clone() ReferenceGrantSet {
	if s == nil {
		return nil
	}
	return &referenceGrantSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

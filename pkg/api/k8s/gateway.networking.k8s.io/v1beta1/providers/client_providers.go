// Code generated by skv2. DO NOT EDIT.

package v1beta1

import (
	gateway_networking_k8s_io_v1beta1 "github.com/solo-io/external-apis/pkg/api/k8s/gateway.networking.k8s.io/v1beta1"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for GatewayClient from Clientset
func GatewayClientFromClientsetProvider(clients gateway_networking_k8s_io_v1beta1.Clientset) gateway_networking_k8s_io_v1beta1.GatewayClient {
	return clients.Gateways()
}

// Provider for Gateway Client from Client
func GatewayClientProvider(client client.Client) gateway_networking_k8s_io_v1beta1.GatewayClient {
	return gateway_networking_k8s_io_v1beta1.NewGatewayClient(client)
}

type GatewayClientFactory func(client client.Client) gateway_networking_k8s_io_v1beta1.GatewayClient

func GatewayClientFactoryProvider() GatewayClientFactory {
	return GatewayClientProvider
}

type GatewayClientFromConfigFactory func(cfg *rest.Config) (gateway_networking_k8s_io_v1beta1.GatewayClient, error)

func GatewayClientFromConfigFactoryProvider() GatewayClientFromConfigFactory {
	return func(cfg *rest.Config) (gateway_networking_k8s_io_v1beta1.GatewayClient, error) {
		clients, err := gateway_networking_k8s_io_v1beta1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.Gateways(), nil
	}
}

// Provider for GatewayClassClient from Clientset
func GatewayClassClientFromClientsetProvider(clients gateway_networking_k8s_io_v1beta1.Clientset) gateway_networking_k8s_io_v1beta1.GatewayClassClient {
	return clients.GatewayClasses()
}

// Provider for GatewayClass Client from Client
func GatewayClassClientProvider(client client.Client) gateway_networking_k8s_io_v1beta1.GatewayClassClient {
	return gateway_networking_k8s_io_v1beta1.NewGatewayClassClient(client)
}

type GatewayClassClientFactory func(client client.Client) gateway_networking_k8s_io_v1beta1.GatewayClassClient

func GatewayClassClientFactoryProvider() GatewayClassClientFactory {
	return GatewayClassClientProvider
}

type GatewayClassClientFromConfigFactory func(cfg *rest.Config) (gateway_networking_k8s_io_v1beta1.GatewayClassClient, error)

func GatewayClassClientFromConfigFactoryProvider() GatewayClassClientFromConfigFactory {
	return func(cfg *rest.Config) (gateway_networking_k8s_io_v1beta1.GatewayClassClient, error) {
		clients, err := gateway_networking_k8s_io_v1beta1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.GatewayClasses(), nil
	}
}

// Provider for HTTPRouteClient from Clientset
func HTTPRouteClientFromClientsetProvider(clients gateway_networking_k8s_io_v1beta1.Clientset) gateway_networking_k8s_io_v1beta1.HTTPRouteClient {
	return clients.HTTPRoutes()
}

// Provider for HTTPRoute Client from Client
func HTTPRouteClientProvider(client client.Client) gateway_networking_k8s_io_v1beta1.HTTPRouteClient {
	return gateway_networking_k8s_io_v1beta1.NewHTTPRouteClient(client)
}

type HTTPRouteClientFactory func(client client.Client) gateway_networking_k8s_io_v1beta1.HTTPRouteClient

func HTTPRouteClientFactoryProvider() HTTPRouteClientFactory {
	return HTTPRouteClientProvider
}

type HTTPRouteClientFromConfigFactory func(cfg *rest.Config) (gateway_networking_k8s_io_v1beta1.HTTPRouteClient, error)

func HTTPRouteClientFromConfigFactoryProvider() HTTPRouteClientFromConfigFactory {
	return func(cfg *rest.Config) (gateway_networking_k8s_io_v1beta1.HTTPRouteClient, error) {
		clients, err := gateway_networking_k8s_io_v1beta1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.HTTPRoutes(), nil
	}
}

// Provider for ReferenceGrantClient from Clientset
func ReferenceGrantClientFromClientsetProvider(clients gateway_networking_k8s_io_v1beta1.Clientset) gateway_networking_k8s_io_v1beta1.ReferenceGrantClient {
	return clients.ReferenceGrants()
}

// Provider for ReferenceGrant Client from Client
func ReferenceGrantClientProvider(client client.Client) gateway_networking_k8s_io_v1beta1.ReferenceGrantClient {
	return gateway_networking_k8s_io_v1beta1.NewReferenceGrantClient(client)
}

type ReferenceGrantClientFactory func(client client.Client) gateway_networking_k8s_io_v1beta1.ReferenceGrantClient

func ReferenceGrantClientFactoryProvider() ReferenceGrantClientFactory {
	return ReferenceGrantClientProvider
}

type ReferenceGrantClientFromConfigFactory func(cfg *rest.Config) (gateway_networking_k8s_io_v1beta1.ReferenceGrantClient, error)

func ReferenceGrantClientFromConfigFactoryProvider() ReferenceGrantClientFromConfigFactory {
	return func(cfg *rest.Config) (gateway_networking_k8s_io_v1beta1.ReferenceGrantClient, error) {
		clients, err := gateway_networking_k8s_io_v1beta1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.ReferenceGrants(), nil
	}
}

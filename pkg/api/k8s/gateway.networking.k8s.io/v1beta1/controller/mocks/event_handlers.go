// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/gateway.networking.k8s.io/v1beta1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
	v1beta1 "sigs.k8s.io/gateway-api/apis/v1beta1"
)

// MockGatewayEventHandler is a mock of GatewayEventHandler interface.
type MockGatewayEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayEventHandlerMockRecorder
}

// MockGatewayEventHandlerMockRecorder is the mock recorder for MockGatewayEventHandler.
type MockGatewayEventHandlerMockRecorder struct {
	mock *MockGatewayEventHandler
}

// NewMockGatewayEventHandler creates a new mock instance.
func NewMockGatewayEventHandler(ctrl *gomock.Controller) *MockGatewayEventHandler {
	mock := &MockGatewayEventHandler{ctrl: ctrl}
	mock.recorder = &MockGatewayEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayEventHandler) EXPECT() *MockGatewayEventHandlerMockRecorder {
	return m.recorder
}

// CreateGateway mocks base method.
func (m *MockGatewayEventHandler) CreateGateway(obj *v1beta1.Gateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGateway indicates an expected call of CreateGateway.
func (mr *MockGatewayEventHandlerMockRecorder) CreateGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGateway", reflect.TypeOf((*MockGatewayEventHandler)(nil).CreateGateway), obj)
}

// DeleteGateway mocks base method.
func (m *MockGatewayEventHandler) DeleteGateway(obj *v1beta1.Gateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGateway indicates an expected call of DeleteGateway.
func (mr *MockGatewayEventHandlerMockRecorder) DeleteGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockGatewayEventHandler)(nil).DeleteGateway), obj)
}

// GenericGateway mocks base method.
func (m *MockGatewayEventHandler) GenericGateway(obj *v1beta1.Gateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGateway indicates an expected call of GenericGateway.
func (mr *MockGatewayEventHandlerMockRecorder) GenericGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGateway", reflect.TypeOf((*MockGatewayEventHandler)(nil).GenericGateway), obj)
}

// UpdateGateway mocks base method.
func (m *MockGatewayEventHandler) UpdateGateway(old, new *v1beta1.Gateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGateway", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGateway indicates an expected call of UpdateGateway.
func (mr *MockGatewayEventHandlerMockRecorder) UpdateGateway(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGateway", reflect.TypeOf((*MockGatewayEventHandler)(nil).UpdateGateway), old, new)
}

// MockGatewayEventWatcher is a mock of GatewayEventWatcher interface.
type MockGatewayEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayEventWatcherMockRecorder
}

// MockGatewayEventWatcherMockRecorder is the mock recorder for MockGatewayEventWatcher.
type MockGatewayEventWatcherMockRecorder struct {
	mock *MockGatewayEventWatcher
}

// NewMockGatewayEventWatcher creates a new mock instance.
func NewMockGatewayEventWatcher(ctrl *gomock.Controller) *MockGatewayEventWatcher {
	mock := &MockGatewayEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGatewayEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayEventWatcher) EXPECT() *MockGatewayEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGatewayEventWatcher) AddEventHandler(ctx context.Context, h controller.GatewayEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGatewayEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGatewayEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockGatewayClassEventHandler is a mock of GatewayClassEventHandler interface.
type MockGatewayClassEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClassEventHandlerMockRecorder
}

// MockGatewayClassEventHandlerMockRecorder is the mock recorder for MockGatewayClassEventHandler.
type MockGatewayClassEventHandlerMockRecorder struct {
	mock *MockGatewayClassEventHandler
}

// NewMockGatewayClassEventHandler creates a new mock instance.
func NewMockGatewayClassEventHandler(ctrl *gomock.Controller) *MockGatewayClassEventHandler {
	mock := &MockGatewayClassEventHandler{ctrl: ctrl}
	mock.recorder = &MockGatewayClassEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayClassEventHandler) EXPECT() *MockGatewayClassEventHandlerMockRecorder {
	return m.recorder
}

// CreateGatewayClass mocks base method.
func (m *MockGatewayClassEventHandler) CreateGatewayClass(obj *v1beta1.GatewayClass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGatewayClass", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatewayClass indicates an expected call of CreateGatewayClass.
func (mr *MockGatewayClassEventHandlerMockRecorder) CreateGatewayClass(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayClass", reflect.TypeOf((*MockGatewayClassEventHandler)(nil).CreateGatewayClass), obj)
}

// DeleteGatewayClass mocks base method.
func (m *MockGatewayClassEventHandler) DeleteGatewayClass(obj *v1beta1.GatewayClass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGatewayClass", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGatewayClass indicates an expected call of DeleteGatewayClass.
func (mr *MockGatewayClassEventHandlerMockRecorder) DeleteGatewayClass(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayClass", reflect.TypeOf((*MockGatewayClassEventHandler)(nil).DeleteGatewayClass), obj)
}

// GenericGatewayClass mocks base method.
func (m *MockGatewayClassEventHandler) GenericGatewayClass(obj *v1beta1.GatewayClass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGatewayClass", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGatewayClass indicates an expected call of GenericGatewayClass.
func (mr *MockGatewayClassEventHandlerMockRecorder) GenericGatewayClass(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGatewayClass", reflect.TypeOf((*MockGatewayClassEventHandler)(nil).GenericGatewayClass), obj)
}

// UpdateGatewayClass mocks base method.
func (m *MockGatewayClassEventHandler) UpdateGatewayClass(old, new *v1beta1.GatewayClass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGatewayClass", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayClass indicates an expected call of UpdateGatewayClass.
func (mr *MockGatewayClassEventHandlerMockRecorder) UpdateGatewayClass(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayClass", reflect.TypeOf((*MockGatewayClassEventHandler)(nil).UpdateGatewayClass), old, new)
}

// MockGatewayClassEventWatcher is a mock of GatewayClassEventWatcher interface.
type MockGatewayClassEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClassEventWatcherMockRecorder
}

// MockGatewayClassEventWatcherMockRecorder is the mock recorder for MockGatewayClassEventWatcher.
type MockGatewayClassEventWatcherMockRecorder struct {
	mock *MockGatewayClassEventWatcher
}

// NewMockGatewayClassEventWatcher creates a new mock instance.
func NewMockGatewayClassEventWatcher(ctrl *gomock.Controller) *MockGatewayClassEventWatcher {
	mock := &MockGatewayClassEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGatewayClassEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayClassEventWatcher) EXPECT() *MockGatewayClassEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGatewayClassEventWatcher) AddEventHandler(ctx context.Context, h controller.GatewayClassEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGatewayClassEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGatewayClassEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockHTTPRouteEventHandler is a mock of HTTPRouteEventHandler interface.
type MockHTTPRouteEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPRouteEventHandlerMockRecorder
}

// MockHTTPRouteEventHandlerMockRecorder is the mock recorder for MockHTTPRouteEventHandler.
type MockHTTPRouteEventHandlerMockRecorder struct {
	mock *MockHTTPRouteEventHandler
}

// NewMockHTTPRouteEventHandler creates a new mock instance.
func NewMockHTTPRouteEventHandler(ctrl *gomock.Controller) *MockHTTPRouteEventHandler {
	mock := &MockHTTPRouteEventHandler{ctrl: ctrl}
	mock.recorder = &MockHTTPRouteEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPRouteEventHandler) EXPECT() *MockHTTPRouteEventHandlerMockRecorder {
	return m.recorder
}

// CreateHTTPRoute mocks base method.
func (m *MockHTTPRouteEventHandler) CreateHTTPRoute(obj *v1beta1.HTTPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHTTPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHTTPRoute indicates an expected call of CreateHTTPRoute.
func (mr *MockHTTPRouteEventHandlerMockRecorder) CreateHTTPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHTTPRoute", reflect.TypeOf((*MockHTTPRouteEventHandler)(nil).CreateHTTPRoute), obj)
}

// DeleteHTTPRoute mocks base method.
func (m *MockHTTPRouteEventHandler) DeleteHTTPRoute(obj *v1beta1.HTTPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHTTPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHTTPRoute indicates an expected call of DeleteHTTPRoute.
func (mr *MockHTTPRouteEventHandlerMockRecorder) DeleteHTTPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHTTPRoute", reflect.TypeOf((*MockHTTPRouteEventHandler)(nil).DeleteHTTPRoute), obj)
}

// GenericHTTPRoute mocks base method.
func (m *MockHTTPRouteEventHandler) GenericHTTPRoute(obj *v1beta1.HTTPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericHTTPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericHTTPRoute indicates an expected call of GenericHTTPRoute.
func (mr *MockHTTPRouteEventHandlerMockRecorder) GenericHTTPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericHTTPRoute", reflect.TypeOf((*MockHTTPRouteEventHandler)(nil).GenericHTTPRoute), obj)
}

// UpdateHTTPRoute mocks base method.
func (m *MockHTTPRouteEventHandler) UpdateHTTPRoute(old, new *v1beta1.HTTPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHTTPRoute", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHTTPRoute indicates an expected call of UpdateHTTPRoute.
func (mr *MockHTTPRouteEventHandlerMockRecorder) UpdateHTTPRoute(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHTTPRoute", reflect.TypeOf((*MockHTTPRouteEventHandler)(nil).UpdateHTTPRoute), old, new)
}

// MockHTTPRouteEventWatcher is a mock of HTTPRouteEventWatcher interface.
type MockHTTPRouteEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPRouteEventWatcherMockRecorder
}

// MockHTTPRouteEventWatcherMockRecorder is the mock recorder for MockHTTPRouteEventWatcher.
type MockHTTPRouteEventWatcherMockRecorder struct {
	mock *MockHTTPRouteEventWatcher
}

// NewMockHTTPRouteEventWatcher creates a new mock instance.
func NewMockHTTPRouteEventWatcher(ctrl *gomock.Controller) *MockHTTPRouteEventWatcher {
	mock := &MockHTTPRouteEventWatcher{ctrl: ctrl}
	mock.recorder = &MockHTTPRouteEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPRouteEventWatcher) EXPECT() *MockHTTPRouteEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockHTTPRouteEventWatcher) AddEventHandler(ctx context.Context, h controller.HTTPRouteEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockHTTPRouteEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockHTTPRouteEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockReferenceGrantEventHandler is a mock of ReferenceGrantEventHandler interface.
type MockReferenceGrantEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceGrantEventHandlerMockRecorder
}

// MockReferenceGrantEventHandlerMockRecorder is the mock recorder for MockReferenceGrantEventHandler.
type MockReferenceGrantEventHandlerMockRecorder struct {
	mock *MockReferenceGrantEventHandler
}

// NewMockReferenceGrantEventHandler creates a new mock instance.
func NewMockReferenceGrantEventHandler(ctrl *gomock.Controller) *MockReferenceGrantEventHandler {
	mock := &MockReferenceGrantEventHandler{ctrl: ctrl}
	mock.recorder = &MockReferenceGrantEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceGrantEventHandler) EXPECT() *MockReferenceGrantEventHandlerMockRecorder {
	return m.recorder
}

// CreateReferenceGrant mocks base method.
func (m *MockReferenceGrantEventHandler) CreateReferenceGrant(obj *v1beta1.ReferenceGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferenceGrant", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReferenceGrant indicates an expected call of CreateReferenceGrant.
func (mr *MockReferenceGrantEventHandlerMockRecorder) CreateReferenceGrant(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferenceGrant", reflect.TypeOf((*MockReferenceGrantEventHandler)(nil).CreateReferenceGrant), obj)
}

// DeleteReferenceGrant mocks base method.
func (m *MockReferenceGrantEventHandler) DeleteReferenceGrant(obj *v1beta1.ReferenceGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReferenceGrant", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReferenceGrant indicates an expected call of DeleteReferenceGrant.
func (mr *MockReferenceGrantEventHandlerMockRecorder) DeleteReferenceGrant(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReferenceGrant", reflect.TypeOf((*MockReferenceGrantEventHandler)(nil).DeleteReferenceGrant), obj)
}

// GenericReferenceGrant mocks base method.
func (m *MockReferenceGrantEventHandler) GenericReferenceGrant(obj *v1beta1.ReferenceGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericReferenceGrant", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericReferenceGrant indicates an expected call of GenericReferenceGrant.
func (mr *MockReferenceGrantEventHandlerMockRecorder) GenericReferenceGrant(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericReferenceGrant", reflect.TypeOf((*MockReferenceGrantEventHandler)(nil).GenericReferenceGrant), obj)
}

// UpdateReferenceGrant mocks base method.
func (m *MockReferenceGrantEventHandler) UpdateReferenceGrant(old, new *v1beta1.ReferenceGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReferenceGrant", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReferenceGrant indicates an expected call of UpdateReferenceGrant.
func (mr *MockReferenceGrantEventHandlerMockRecorder) UpdateReferenceGrant(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferenceGrant", reflect.TypeOf((*MockReferenceGrantEventHandler)(nil).UpdateReferenceGrant), old, new)
}

// MockReferenceGrantEventWatcher is a mock of ReferenceGrantEventWatcher interface.
type MockReferenceGrantEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceGrantEventWatcherMockRecorder
}

// MockReferenceGrantEventWatcherMockRecorder is the mock recorder for MockReferenceGrantEventWatcher.
type MockReferenceGrantEventWatcherMockRecorder struct {
	mock *MockReferenceGrantEventWatcher
}

// NewMockReferenceGrantEventWatcher creates a new mock instance.
func NewMockReferenceGrantEventWatcher(ctrl *gomock.Controller) *MockReferenceGrantEventWatcher {
	mock := &MockReferenceGrantEventWatcher{ctrl: ctrl}
	mock.recorder = &MockReferenceGrantEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceGrantEventWatcher) EXPECT() *MockReferenceGrantEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockReferenceGrantEventWatcher) AddEventHandler(ctx context.Context, h controller.ReferenceGrantEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockReferenceGrantEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockReferenceGrantEventWatcher)(nil).AddEventHandler), varargs...)
}

// Code generated by skv2. DO NOT EDIT.

package v1alpha2

import (
	gateway_networking_k8s_io_v1alpha2 "github.com/solo-io/external-apis/pkg/api/k8s/gateway.networking.k8s.io/v1alpha2"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for GRPCRouteClient from Clientset
func GRPCRouteClientFromClientsetProvider(clients gateway_networking_k8s_io_v1alpha2.Clientset) gateway_networking_k8s_io_v1alpha2.GRPCRouteClient {
	return clients.GRPCRoutes()
}

// Provider for GRPCRoute Client from Client
func GRPCRouteClientProvider(client client.Client) gateway_networking_k8s_io_v1alpha2.GRPCRouteClient {
	return gateway_networking_k8s_io_v1alpha2.NewGRPCRouteClient(client)
}

type GRPCRouteClientFactory func(client client.Client) gateway_networking_k8s_io_v1alpha2.GRPCRouteClient

func GRPCRouteClientFactoryProvider() GRPCRouteClientFactory {
	return GRPCRouteClientProvider
}

type GRPCRouteClientFromConfigFactory func(cfg *rest.Config) (gateway_networking_k8s_io_v1alpha2.GRPCRouteClient, error)

func GRPCRouteClientFromConfigFactoryProvider() GRPCRouteClientFromConfigFactory {
	return func(cfg *rest.Config) (gateway_networking_k8s_io_v1alpha2.GRPCRouteClient, error) {
		clients, err := gateway_networking_k8s_io_v1alpha2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.GRPCRoutes(), nil
	}
}

// Provider for TCPRouteClient from Clientset
func TCPRouteClientFromClientsetProvider(clients gateway_networking_k8s_io_v1alpha2.Clientset) gateway_networking_k8s_io_v1alpha2.TCPRouteClient {
	return clients.TCPRoutes()
}

// Provider for TCPRoute Client from Client
func TCPRouteClientProvider(client client.Client) gateway_networking_k8s_io_v1alpha2.TCPRouteClient {
	return gateway_networking_k8s_io_v1alpha2.NewTCPRouteClient(client)
}

type TCPRouteClientFactory func(client client.Client) gateway_networking_k8s_io_v1alpha2.TCPRouteClient

func TCPRouteClientFactoryProvider() TCPRouteClientFactory {
	return TCPRouteClientProvider
}

type TCPRouteClientFromConfigFactory func(cfg *rest.Config) (gateway_networking_k8s_io_v1alpha2.TCPRouteClient, error)

func TCPRouteClientFromConfigFactoryProvider() TCPRouteClientFromConfigFactory {
	return func(cfg *rest.Config) (gateway_networking_k8s_io_v1alpha2.TCPRouteClient, error) {
		clients, err := gateway_networking_k8s_io_v1alpha2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.TCPRoutes(), nil
	}
}

// Provider for TLSRouteClient from Clientset
func TLSRouteClientFromClientsetProvider(clients gateway_networking_k8s_io_v1alpha2.Clientset) gateway_networking_k8s_io_v1alpha2.TLSRouteClient {
	return clients.TLSRoutes()
}

// Provider for TLSRoute Client from Client
func TLSRouteClientProvider(client client.Client) gateway_networking_k8s_io_v1alpha2.TLSRouteClient {
	return gateway_networking_k8s_io_v1alpha2.NewTLSRouteClient(client)
}

type TLSRouteClientFactory func(client client.Client) gateway_networking_k8s_io_v1alpha2.TLSRouteClient

func TLSRouteClientFactoryProvider() TLSRouteClientFactory {
	return TLSRouteClientProvider
}

type TLSRouteClientFromConfigFactory func(cfg *rest.Config) (gateway_networking_k8s_io_v1alpha2.TLSRouteClient, error)

func TLSRouteClientFromConfigFactoryProvider() TLSRouteClientFromConfigFactory {
	return func(cfg *rest.Config) (gateway_networking_k8s_io_v1alpha2.TLSRouteClient, error) {
		clients, err := gateway_networking_k8s_io_v1alpha2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.TLSRoutes(), nil
	}
}

// Provider for UDPRouteClient from Clientset
func UDPRouteClientFromClientsetProvider(clients gateway_networking_k8s_io_v1alpha2.Clientset) gateway_networking_k8s_io_v1alpha2.UDPRouteClient {
	return clients.UDPRoutes()
}

// Provider for UDPRoute Client from Client
func UDPRouteClientProvider(client client.Client) gateway_networking_k8s_io_v1alpha2.UDPRouteClient {
	return gateway_networking_k8s_io_v1alpha2.NewUDPRouteClient(client)
}

type UDPRouteClientFactory func(client client.Client) gateway_networking_k8s_io_v1alpha2.UDPRouteClient

func UDPRouteClientFactoryProvider() UDPRouteClientFactory {
	return UDPRouteClientProvider
}

type UDPRouteClientFromConfigFactory func(cfg *rest.Config) (gateway_networking_k8s_io_v1alpha2.UDPRouteClient, error)

func UDPRouteClientFromConfigFactoryProvider() UDPRouteClientFromConfigFactory {
	return func(cfg *rest.Config) (gateway_networking_k8s_io_v1alpha2.UDPRouteClient, error) {
		clients, err := gateway_networking_k8s_io_v1alpha2.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.UDPRoutes(), nil
	}
}

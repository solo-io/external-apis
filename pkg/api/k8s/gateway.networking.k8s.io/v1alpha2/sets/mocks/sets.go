// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v1alpha2sets is a generated GoMock package.
package mock_v1alpha2sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2sets "github.com/solo-io/external-apis/pkg/api/k8s/gateway.networking.k8s.io/v1alpha2/sets"
	sets "github.com/solo-io/skv2/contrib/pkg/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets0 "k8s.io/apimachinery/pkg/util/sets"
	v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// MockGRPCRouteSet is a mock of GRPCRouteSet interface.
type MockGRPCRouteSet struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteSetMockRecorder
}

// MockGRPCRouteSetMockRecorder is the mock recorder for MockGRPCRouteSet.
type MockGRPCRouteSetMockRecorder struct {
	mock *MockGRPCRouteSet
}

// NewMockGRPCRouteSet creates a new mock instance.
func NewMockGRPCRouteSet(ctrl *gomock.Controller) *MockGRPCRouteSet {
	mock := &MockGRPCRouteSet{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteSet) EXPECT() *MockGRPCRouteSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockGRPCRouteSet) Clone() v1alpha2sets.GRPCRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1alpha2sets.GRPCRouteSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGRPCRouteSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGRPCRouteSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockGRPCRouteSet) Delete(gRPCRoute ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", gRPCRoute)
}

// Delete indicates an expected call of Delete.
func (mr *MockGRPCRouteSetMockRecorder) Delete(gRPCRoute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGRPCRouteSet)(nil).Delete), gRPCRoute)
}

// Delta mocks base method.
func (m *MockGRPCRouteSet) Delta(newSet v1alpha2sets.GRPCRouteSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockGRPCRouteSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockGRPCRouteSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockGRPCRouteSet) Difference(set v1alpha2sets.GRPCRouteSet) v1alpha2sets.GRPCRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha2sets.GRPCRouteSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockGRPCRouteSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockGRPCRouteSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockGRPCRouteSet) Equal(gRPCRouteSet v1alpha2sets.GRPCRouteSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", gRPCRouteSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockGRPCRouteSetMockRecorder) Equal(gRPCRouteSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockGRPCRouteSet)(nil).Equal), gRPCRouteSet)
}

// Find mocks base method.
func (m *MockGRPCRouteSet) Find(id ezkube.ResourceId) (*v1alpha2.GRPCRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha2.GRPCRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGRPCRouteSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGRPCRouteSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockGRPCRouteSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockGRPCRouteSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockGRPCRouteSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockGRPCRouteSet) Has(gRPCRoute ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", gRPCRoute)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockGRPCRouteSetMockRecorder) Has(gRPCRoute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockGRPCRouteSet)(nil).Has), gRPCRoute)
}

// Insert mocks base method.
func (m *MockGRPCRouteSet) Insert(gRPCRoute ...*v1alpha2.GRPCRoute) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range gRPCRoute {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockGRPCRouteSetMockRecorder) Insert(gRPCRoute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGRPCRouteSet)(nil).Insert), gRPCRoute...)
}

// Intersection mocks base method.
func (m *MockGRPCRouteSet) Intersection(set v1alpha2sets.GRPCRouteSet) v1alpha2sets.GRPCRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha2sets.GRPCRouteSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockGRPCRouteSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockGRPCRouteSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockGRPCRouteSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockGRPCRouteSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockGRPCRouteSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockGRPCRouteSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockGRPCRouteSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockGRPCRouteSet)(nil).Length))
}

// List mocks base method.
func (m *MockGRPCRouteSet) List(filterResource ...func(*v1alpha2.GRPCRoute) bool) []*v1alpha2.GRPCRoute {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.GRPCRoute)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockGRPCRouteSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGRPCRouteSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockGRPCRouteSet) Map() map[string]*v1alpha2.GRPCRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha2.GRPCRoute)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockGRPCRouteSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockGRPCRouteSet)(nil).Map))
}

// Union mocks base method.
func (m *MockGRPCRouteSet) Union(set v1alpha2sets.GRPCRouteSet) v1alpha2sets.GRPCRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha2sets.GRPCRouteSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockGRPCRouteSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockGRPCRouteSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockGRPCRouteSet) UnsortedList(filterResource ...func(*v1alpha2.GRPCRoute) bool) []*v1alpha2.GRPCRoute {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.GRPCRoute)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockGRPCRouteSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockGRPCRouteSet)(nil).UnsortedList), filterResource...)
}

// MockTCPRouteSet is a mock of TCPRouteSet interface.
type MockTCPRouteSet struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteSetMockRecorder
}

// MockTCPRouteSetMockRecorder is the mock recorder for MockTCPRouteSet.
type MockTCPRouteSetMockRecorder struct {
	mock *MockTCPRouteSet
}

// NewMockTCPRouteSet creates a new mock instance.
func NewMockTCPRouteSet(ctrl *gomock.Controller) *MockTCPRouteSet {
	mock := &MockTCPRouteSet{ctrl: ctrl}
	mock.recorder = &MockTCPRouteSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteSet) EXPECT() *MockTCPRouteSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockTCPRouteSet) Clone() v1alpha2sets.TCPRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1alpha2sets.TCPRouteSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockTCPRouteSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockTCPRouteSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockTCPRouteSet) Delete(tCPRoute ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", tCPRoute)
}

// Delete indicates an expected call of Delete.
func (mr *MockTCPRouteSetMockRecorder) Delete(tCPRoute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTCPRouteSet)(nil).Delete), tCPRoute)
}

// Delta mocks base method.
func (m *MockTCPRouteSet) Delta(newSet v1alpha2sets.TCPRouteSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockTCPRouteSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockTCPRouteSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockTCPRouteSet) Difference(set v1alpha2sets.TCPRouteSet) v1alpha2sets.TCPRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha2sets.TCPRouteSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockTCPRouteSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockTCPRouteSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockTCPRouteSet) Equal(tCPRouteSet v1alpha2sets.TCPRouteSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", tCPRouteSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockTCPRouteSetMockRecorder) Equal(tCPRouteSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockTCPRouteSet)(nil).Equal), tCPRouteSet)
}

// Find mocks base method.
func (m *MockTCPRouteSet) Find(id ezkube.ResourceId) (*v1alpha2.TCPRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha2.TCPRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTCPRouteSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTCPRouteSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockTCPRouteSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockTCPRouteSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockTCPRouteSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockTCPRouteSet) Has(tCPRoute ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", tCPRoute)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockTCPRouteSetMockRecorder) Has(tCPRoute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockTCPRouteSet)(nil).Has), tCPRoute)
}

// Insert mocks base method.
func (m *MockTCPRouteSet) Insert(tCPRoute ...*v1alpha2.TCPRoute) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range tCPRoute {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockTCPRouteSetMockRecorder) Insert(tCPRoute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTCPRouteSet)(nil).Insert), tCPRoute...)
}

// Intersection mocks base method.
func (m *MockTCPRouteSet) Intersection(set v1alpha2sets.TCPRouteSet) v1alpha2sets.TCPRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha2sets.TCPRouteSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockTCPRouteSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockTCPRouteSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockTCPRouteSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockTCPRouteSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockTCPRouteSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockTCPRouteSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockTCPRouteSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockTCPRouteSet)(nil).Length))
}

// List mocks base method.
func (m *MockTCPRouteSet) List(filterResource ...func(*v1alpha2.TCPRoute) bool) []*v1alpha2.TCPRoute {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.TCPRoute)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockTCPRouteSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTCPRouteSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockTCPRouteSet) Map() map[string]*v1alpha2.TCPRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha2.TCPRoute)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockTCPRouteSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockTCPRouteSet)(nil).Map))
}

// Union mocks base method.
func (m *MockTCPRouteSet) Union(set v1alpha2sets.TCPRouteSet) v1alpha2sets.TCPRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha2sets.TCPRouteSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockTCPRouteSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockTCPRouteSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockTCPRouteSet) UnsortedList(filterResource ...func(*v1alpha2.TCPRoute) bool) []*v1alpha2.TCPRoute {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.TCPRoute)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockTCPRouteSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockTCPRouteSet)(nil).UnsortedList), filterResource...)
}

// MockTLSRouteSet is a mock of TLSRouteSet interface.
type MockTLSRouteSet struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteSetMockRecorder
}

// MockTLSRouteSetMockRecorder is the mock recorder for MockTLSRouteSet.
type MockTLSRouteSetMockRecorder struct {
	mock *MockTLSRouteSet
}

// NewMockTLSRouteSet creates a new mock instance.
func NewMockTLSRouteSet(ctrl *gomock.Controller) *MockTLSRouteSet {
	mock := &MockTLSRouteSet{ctrl: ctrl}
	mock.recorder = &MockTLSRouteSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteSet) EXPECT() *MockTLSRouteSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockTLSRouteSet) Clone() v1alpha2sets.TLSRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1alpha2sets.TLSRouteSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockTLSRouteSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockTLSRouteSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockTLSRouteSet) Delete(tLSRoute ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", tLSRoute)
}

// Delete indicates an expected call of Delete.
func (mr *MockTLSRouteSetMockRecorder) Delete(tLSRoute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTLSRouteSet)(nil).Delete), tLSRoute)
}

// Delta mocks base method.
func (m *MockTLSRouteSet) Delta(newSet v1alpha2sets.TLSRouteSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockTLSRouteSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockTLSRouteSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockTLSRouteSet) Difference(set v1alpha2sets.TLSRouteSet) v1alpha2sets.TLSRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha2sets.TLSRouteSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockTLSRouteSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockTLSRouteSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockTLSRouteSet) Equal(tLSRouteSet v1alpha2sets.TLSRouteSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", tLSRouteSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockTLSRouteSetMockRecorder) Equal(tLSRouteSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockTLSRouteSet)(nil).Equal), tLSRouteSet)
}

// Find mocks base method.
func (m *MockTLSRouteSet) Find(id ezkube.ResourceId) (*v1alpha2.TLSRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha2.TLSRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTLSRouteSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTLSRouteSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockTLSRouteSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockTLSRouteSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockTLSRouteSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockTLSRouteSet) Has(tLSRoute ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", tLSRoute)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockTLSRouteSetMockRecorder) Has(tLSRoute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockTLSRouteSet)(nil).Has), tLSRoute)
}

// Insert mocks base method.
func (m *MockTLSRouteSet) Insert(tLSRoute ...*v1alpha2.TLSRoute) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range tLSRoute {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockTLSRouteSetMockRecorder) Insert(tLSRoute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTLSRouteSet)(nil).Insert), tLSRoute...)
}

// Intersection mocks base method.
func (m *MockTLSRouteSet) Intersection(set v1alpha2sets.TLSRouteSet) v1alpha2sets.TLSRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha2sets.TLSRouteSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockTLSRouteSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockTLSRouteSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockTLSRouteSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockTLSRouteSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockTLSRouteSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockTLSRouteSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockTLSRouteSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockTLSRouteSet)(nil).Length))
}

// List mocks base method.
func (m *MockTLSRouteSet) List(filterResource ...func(*v1alpha2.TLSRoute) bool) []*v1alpha2.TLSRoute {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.TLSRoute)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockTLSRouteSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTLSRouteSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockTLSRouteSet) Map() map[string]*v1alpha2.TLSRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha2.TLSRoute)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockTLSRouteSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockTLSRouteSet)(nil).Map))
}

// Union mocks base method.
func (m *MockTLSRouteSet) Union(set v1alpha2sets.TLSRouteSet) v1alpha2sets.TLSRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha2sets.TLSRouteSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockTLSRouteSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockTLSRouteSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockTLSRouteSet) UnsortedList(filterResource ...func(*v1alpha2.TLSRoute) bool) []*v1alpha2.TLSRoute {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.TLSRoute)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockTLSRouteSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockTLSRouteSet)(nil).UnsortedList), filterResource...)
}

// MockUDPRouteSet is a mock of UDPRouteSet interface.
type MockUDPRouteSet struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteSetMockRecorder
}

// MockUDPRouteSetMockRecorder is the mock recorder for MockUDPRouteSet.
type MockUDPRouteSetMockRecorder struct {
	mock *MockUDPRouteSet
}

// NewMockUDPRouteSet creates a new mock instance.
func NewMockUDPRouteSet(ctrl *gomock.Controller) *MockUDPRouteSet {
	mock := &MockUDPRouteSet{ctrl: ctrl}
	mock.recorder = &MockUDPRouteSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteSet) EXPECT() *MockUDPRouteSetMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockUDPRouteSet) Clone() v1alpha2sets.UDPRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(v1alpha2sets.UDPRouteSet)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockUDPRouteSetMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockUDPRouteSet)(nil).Clone))
}

// Delete mocks base method.
func (m *MockUDPRouteSet) Delete(uDPRoute ezkube.ResourceId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", uDPRoute)
}

// Delete indicates an expected call of Delete.
func (mr *MockUDPRouteSetMockRecorder) Delete(uDPRoute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUDPRouteSet)(nil).Delete), uDPRoute)
}

// Delta mocks base method.
func (m *MockUDPRouteSet) Delta(newSet v1alpha2sets.UDPRouteSet) sets.ResourceDelta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delta", newSet)
	ret0, _ := ret[0].(sets.ResourceDelta)
	return ret0
}

// Delta indicates an expected call of Delta.
func (mr *MockUDPRouteSetMockRecorder) Delta(newSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delta", reflect.TypeOf((*MockUDPRouteSet)(nil).Delta), newSet)
}

// Difference mocks base method.
func (m *MockUDPRouteSet) Difference(set v1alpha2sets.UDPRouteSet) v1alpha2sets.UDPRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha2sets.UDPRouteSet)
	return ret0
}

// Difference indicates an expected call of Difference.
func (mr *MockUDPRouteSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockUDPRouteSet)(nil).Difference), set)
}

// Equal mocks base method.
func (m *MockUDPRouteSet) Equal(uDPRouteSet v1alpha2sets.UDPRouteSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", uDPRouteSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockUDPRouteSetMockRecorder) Equal(uDPRouteSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockUDPRouteSet)(nil).Equal), uDPRouteSet)
}

// Find mocks base method.
func (m *MockUDPRouteSet) Find(id ezkube.ResourceId) (*v1alpha2.UDPRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha2.UDPRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUDPRouteSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUDPRouteSet)(nil).Find), id)
}

// Generic mocks base method.
func (m *MockUDPRouteSet) Generic() sets.ResourceSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generic")
	ret0, _ := ret[0].(sets.ResourceSet)
	return ret0
}

// Generic indicates an expected call of Generic.
func (mr *MockUDPRouteSetMockRecorder) Generic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generic", reflect.TypeOf((*MockUDPRouteSet)(nil).Generic))
}

// Has mocks base method.
func (m *MockUDPRouteSet) Has(uDPRoute ezkube.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", uDPRoute)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockUDPRouteSetMockRecorder) Has(uDPRoute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockUDPRouteSet)(nil).Has), uDPRoute)
}

// Insert mocks base method.
func (m *MockUDPRouteSet) Insert(uDPRoute ...*v1alpha2.UDPRoute) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range uDPRoute {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockUDPRouteSetMockRecorder) Insert(uDPRoute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUDPRouteSet)(nil).Insert), uDPRoute...)
}

// Intersection mocks base method.
func (m *MockUDPRouteSet) Intersection(set v1alpha2sets.UDPRouteSet) v1alpha2sets.UDPRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha2sets.UDPRouteSet)
	return ret0
}

// Intersection indicates an expected call of Intersection.
func (mr *MockUDPRouteSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockUDPRouteSet)(nil).Intersection), set)
}

// Keys mocks base method.
func (m *MockUDPRouteSet) Keys() sets0.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets0.String)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockUDPRouteSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockUDPRouteSet)(nil).Keys))
}

// Length mocks base method.
func (m *MockUDPRouteSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockUDPRouteSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockUDPRouteSet)(nil).Length))
}

// List mocks base method.
func (m *MockUDPRouteSet) List(filterResource ...func(*v1alpha2.UDPRoute) bool) []*v1alpha2.UDPRoute {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.UDPRoute)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockUDPRouteSetMockRecorder) List(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUDPRouteSet)(nil).List), filterResource...)
}

// Map mocks base method.
func (m *MockUDPRouteSet) Map() map[string]*v1alpha2.UDPRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha2.UDPRoute)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockUDPRouteSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockUDPRouteSet)(nil).Map))
}

// Union mocks base method.
func (m *MockUDPRouteSet) Union(set v1alpha2sets.UDPRouteSet) v1alpha2sets.UDPRouteSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha2sets.UDPRouteSet)
	return ret0
}

// Union indicates an expected call of Union.
func (mr *MockUDPRouteSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockUDPRouteSet)(nil).Union), set)
}

// UnsortedList mocks base method.
func (m *MockUDPRouteSet) UnsortedList(filterResource ...func(*v1alpha2.UDPRoute) bool) []*v1alpha2.UDPRoute {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filterResource {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsortedList", varargs...)
	ret0, _ := ret[0].([]*v1alpha2.UDPRoute)
	return ret0
}

// UnsortedList indicates an expected call of UnsortedList.
func (mr *MockUDPRouteSetMockRecorder) UnsortedList(filterResource ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsortedList", reflect.TypeOf((*MockUDPRouteSet)(nil).UnsortedList), filterResource...)
}

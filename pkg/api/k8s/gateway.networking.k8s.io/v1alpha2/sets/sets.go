// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha2sets

import (
	gateway_networking_k8s_io_v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type ReferenceGrantSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant) bool) []*gateway_networking_k8s_io_v1alpha2.ReferenceGrant
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant) bool) []*gateway_networking_k8s_io_v1alpha2.ReferenceGrant
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1alpha2.ReferenceGrant
	// Insert a resource into the set.
	Insert(referenceGrant ...*gateway_networking_k8s_io_v1alpha2.ReferenceGrant)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(referenceGrantSet ReferenceGrantSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(referenceGrant ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(referenceGrant ezkube.ResourceId)
	// Return the union with the provided set
	Union(set ReferenceGrantSet) ReferenceGrantSet
	// Return the difference with the provided set
	Difference(set ReferenceGrantSet) ReferenceGrantSet
	// Return the intersection with the provided set
	Intersection(set ReferenceGrantSet) ReferenceGrantSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.ReferenceGrant, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another ReferenceGrantSet
	Delta(newSet ReferenceGrantSet) sksets.ResourceDelta
	// Create a deep copy of the current ReferenceGrantSet
	Clone() ReferenceGrantSet
}

func makeGenericReferenceGrantSet(referenceGrantList []*gateway_networking_k8s_io_v1alpha2.ReferenceGrant) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range referenceGrantList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type referenceGrantSet struct {
	set sksets.ResourceSet
}

func NewReferenceGrantSet(referenceGrantList ...*gateway_networking_k8s_io_v1alpha2.ReferenceGrant) ReferenceGrantSet {
	return &referenceGrantSet{set: makeGenericReferenceGrantSet(referenceGrantList)}
}

func NewReferenceGrantSetFromList(referenceGrantList *gateway_networking_k8s_io_v1alpha2.ReferenceGrantList) ReferenceGrantSet {
	list := make([]*gateway_networking_k8s_io_v1alpha2.ReferenceGrant, 0, len(referenceGrantList.Items))
	for idx := range referenceGrantList.Items {
		list = append(list, &referenceGrantList.Items[idx])
	}
	return &referenceGrantSet{set: makeGenericReferenceGrantSet(list)}
}

func (s *referenceGrantSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *referenceGrantSet) List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant) bool) []*gateway_networking_k8s_io_v1alpha2.ReferenceGrant {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant))
		})
	}

	objs := s.Generic().List(genericFilters...)
	referenceGrantList := make([]*gateway_networking_k8s_io_v1alpha2.ReferenceGrant, 0, len(objs))
	for _, obj := range objs {
		referenceGrantList = append(referenceGrantList, obj.(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant))
	}
	return referenceGrantList
}

func (s *referenceGrantSet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant) bool) []*gateway_networking_k8s_io_v1alpha2.ReferenceGrant {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant))
		})
	}

	var referenceGrantList []*gateway_networking_k8s_io_v1alpha2.ReferenceGrant
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		referenceGrantList = append(referenceGrantList, obj.(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant))
	}
	return referenceGrantList
}

func (s *referenceGrantSet) Map() map[string]*gateway_networking_k8s_io_v1alpha2.ReferenceGrant {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1alpha2.ReferenceGrant{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant)
	}
	return newMap
}

func (s *referenceGrantSet) Insert(
	referenceGrantList ...*gateway_networking_k8s_io_v1alpha2.ReferenceGrant,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range referenceGrantList {
		s.Generic().Insert(obj)
	}
}

func (s *referenceGrantSet) Has(referenceGrant ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(referenceGrant)
}

func (s *referenceGrantSet) Equal(
	referenceGrantSet ReferenceGrantSet,
) bool {
	if s == nil {
		return referenceGrantSet == nil
	}
	return s.Generic().Equal(referenceGrantSet.Generic())
}

func (s *referenceGrantSet) Delete(ReferenceGrant ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(ReferenceGrant)
}

func (s *referenceGrantSet) Union(set ReferenceGrantSet) ReferenceGrantSet {
	if s == nil {
		return set
	}
	return NewReferenceGrantSet(append(s.List(), set.List()...)...)
}

func (s *referenceGrantSet) Difference(set ReferenceGrantSet) ReferenceGrantSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &referenceGrantSet{set: newSet}
}

func (s *referenceGrantSet) Intersection(set ReferenceGrantSet) ReferenceGrantSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var referenceGrantList []*gateway_networking_k8s_io_v1alpha2.ReferenceGrant
	for _, obj := range newSet.List() {
		referenceGrantList = append(referenceGrantList, obj.(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant))
	}
	return NewReferenceGrantSet(referenceGrantList...)
}

func (s *referenceGrantSet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.ReferenceGrant, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find ReferenceGrant %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1alpha2.ReferenceGrant{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant), nil
}

func (s *referenceGrantSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *referenceGrantSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *referenceGrantSet) Delta(newSet ReferenceGrantSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *referenceGrantSet) Clone() ReferenceGrantSet {
	if s == nil {
		return nil
	}
	return &referenceGrantSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type GRPCRouteSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.GRPCRoute) bool) []*gateway_networking_k8s_io_v1alpha2.GRPCRoute
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.GRPCRoute) bool) []*gateway_networking_k8s_io_v1alpha2.GRPCRoute
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1alpha2.GRPCRoute
	// Insert a resource into the set.
	Insert(gRPCRoute ...*gateway_networking_k8s_io_v1alpha2.GRPCRoute)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(gRPCRouteSet GRPCRouteSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(gRPCRoute ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(gRPCRoute ezkube.ResourceId)
	// Return the union with the provided set
	Union(set GRPCRouteSet) GRPCRouteSet
	// Return the difference with the provided set
	Difference(set GRPCRouteSet) GRPCRouteSet
	// Return the intersection with the provided set
	Intersection(set GRPCRouteSet) GRPCRouteSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.GRPCRoute, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another GRPCRouteSet
	Delta(newSet GRPCRouteSet) sksets.ResourceDelta
	// Create a deep copy of the current GRPCRouteSet
	Clone() GRPCRouteSet
}

func makeGenericGRPCRouteSet(gRPCRouteList []*gateway_networking_k8s_io_v1alpha2.GRPCRoute) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range gRPCRouteList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type gRPCRouteSet struct {
	set sksets.ResourceSet
}

func NewGRPCRouteSet(gRPCRouteList ...*gateway_networking_k8s_io_v1alpha2.GRPCRoute) GRPCRouteSet {
	return &gRPCRouteSet{set: makeGenericGRPCRouteSet(gRPCRouteList)}
}

func NewGRPCRouteSetFromList(gRPCRouteList *gateway_networking_k8s_io_v1alpha2.GRPCRouteList) GRPCRouteSet {
	list := make([]*gateway_networking_k8s_io_v1alpha2.GRPCRoute, 0, len(gRPCRouteList.Items))
	for idx := range gRPCRouteList.Items {
		list = append(list, &gRPCRouteList.Items[idx])
	}
	return &gRPCRouteSet{set: makeGenericGRPCRouteSet(list)}
}

func (s *gRPCRouteSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *gRPCRouteSet) List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.GRPCRoute) bool) []*gateway_networking_k8s_io_v1alpha2.GRPCRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.GRPCRoute))
		})
	}

	objs := s.Generic().List(genericFilters...)
	gRPCRouteList := make([]*gateway_networking_k8s_io_v1alpha2.GRPCRoute, 0, len(objs))
	for _, obj := range objs {
		gRPCRouteList = append(gRPCRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.GRPCRoute))
	}
	return gRPCRouteList
}

func (s *gRPCRouteSet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.GRPCRoute) bool) []*gateway_networking_k8s_io_v1alpha2.GRPCRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.GRPCRoute))
		})
	}

	var gRPCRouteList []*gateway_networking_k8s_io_v1alpha2.GRPCRoute
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		gRPCRouteList = append(gRPCRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.GRPCRoute))
	}
	return gRPCRouteList
}

func (s *gRPCRouteSet) Map() map[string]*gateway_networking_k8s_io_v1alpha2.GRPCRoute {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1alpha2.GRPCRoute{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1alpha2.GRPCRoute)
	}
	return newMap
}

func (s *gRPCRouteSet) Insert(
	gRPCRouteList ...*gateway_networking_k8s_io_v1alpha2.GRPCRoute,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range gRPCRouteList {
		s.Generic().Insert(obj)
	}
}

func (s *gRPCRouteSet) Has(gRPCRoute ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(gRPCRoute)
}

func (s *gRPCRouteSet) Equal(
	gRPCRouteSet GRPCRouteSet,
) bool {
	if s == nil {
		return gRPCRouteSet == nil
	}
	return s.Generic().Equal(gRPCRouteSet.Generic())
}

func (s *gRPCRouteSet) Delete(GRPCRoute ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(GRPCRoute)
}

func (s *gRPCRouteSet) Union(set GRPCRouteSet) GRPCRouteSet {
	if s == nil {
		return set
	}
	return NewGRPCRouteSet(append(s.List(), set.List()...)...)
}

func (s *gRPCRouteSet) Difference(set GRPCRouteSet) GRPCRouteSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &gRPCRouteSet{set: newSet}
}

func (s *gRPCRouteSet) Intersection(set GRPCRouteSet) GRPCRouteSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var gRPCRouteList []*gateway_networking_k8s_io_v1alpha2.GRPCRoute
	for _, obj := range newSet.List() {
		gRPCRouteList = append(gRPCRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.GRPCRoute))
	}
	return NewGRPCRouteSet(gRPCRouteList...)
}

func (s *gRPCRouteSet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.GRPCRoute, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find GRPCRoute %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1alpha2.GRPCRoute{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1alpha2.GRPCRoute), nil
}

func (s *gRPCRouteSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *gRPCRouteSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *gRPCRouteSet) Delta(newSet GRPCRouteSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *gRPCRouteSet) Clone() GRPCRouteSet {
	if s == nil {
		return nil
	}
	return &gRPCRouteSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type TCPRouteSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TCPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TCPRoute
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TCPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TCPRoute
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1alpha2.TCPRoute
	// Insert a resource into the set.
	Insert(tCPRoute ...*gateway_networking_k8s_io_v1alpha2.TCPRoute)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(tCPRouteSet TCPRouteSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(tCPRoute ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(tCPRoute ezkube.ResourceId)
	// Return the union with the provided set
	Union(set TCPRouteSet) TCPRouteSet
	// Return the difference with the provided set
	Difference(set TCPRouteSet) TCPRouteSet
	// Return the intersection with the provided set
	Intersection(set TCPRouteSet) TCPRouteSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.TCPRoute, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another TCPRouteSet
	Delta(newSet TCPRouteSet) sksets.ResourceDelta
	// Create a deep copy of the current TCPRouteSet
	Clone() TCPRouteSet
}

func makeGenericTCPRouteSet(tCPRouteList []*gateway_networking_k8s_io_v1alpha2.TCPRoute) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range tCPRouteList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type tCPRouteSet struct {
	set sksets.ResourceSet
}

func NewTCPRouteSet(tCPRouteList ...*gateway_networking_k8s_io_v1alpha2.TCPRoute) TCPRouteSet {
	return &tCPRouteSet{set: makeGenericTCPRouteSet(tCPRouteList)}
}

func NewTCPRouteSetFromList(tCPRouteList *gateway_networking_k8s_io_v1alpha2.TCPRouteList) TCPRouteSet {
	list := make([]*gateway_networking_k8s_io_v1alpha2.TCPRoute, 0, len(tCPRouteList.Items))
	for idx := range tCPRouteList.Items {
		list = append(list, &tCPRouteList.Items[idx])
	}
	return &tCPRouteSet{set: makeGenericTCPRouteSet(list)}
}

func (s *tCPRouteSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *tCPRouteSet) List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TCPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TCPRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
		})
	}

	objs := s.Generic().List(genericFilters...)
	tCPRouteList := make([]*gateway_networking_k8s_io_v1alpha2.TCPRoute, 0, len(objs))
	for _, obj := range objs {
		tCPRouteList = append(tCPRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
	}
	return tCPRouteList
}

func (s *tCPRouteSet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TCPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TCPRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
		})
	}

	var tCPRouteList []*gateway_networking_k8s_io_v1alpha2.TCPRoute
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		tCPRouteList = append(tCPRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
	}
	return tCPRouteList
}

func (s *tCPRouteSet) Map() map[string]*gateway_networking_k8s_io_v1alpha2.TCPRoute {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1alpha2.TCPRoute{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1alpha2.TCPRoute)
	}
	return newMap
}

func (s *tCPRouteSet) Insert(
	tCPRouteList ...*gateway_networking_k8s_io_v1alpha2.TCPRoute,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range tCPRouteList {
		s.Generic().Insert(obj)
	}
}

func (s *tCPRouteSet) Has(tCPRoute ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(tCPRoute)
}

func (s *tCPRouteSet) Equal(
	tCPRouteSet TCPRouteSet,
) bool {
	if s == nil {
		return tCPRouteSet == nil
	}
	return s.Generic().Equal(tCPRouteSet.Generic())
}

func (s *tCPRouteSet) Delete(TCPRoute ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(TCPRoute)
}

func (s *tCPRouteSet) Union(set TCPRouteSet) TCPRouteSet {
	if s == nil {
		return set
	}
	return NewTCPRouteSet(append(s.List(), set.List()...)...)
}

func (s *tCPRouteSet) Difference(set TCPRouteSet) TCPRouteSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &tCPRouteSet{set: newSet}
}

func (s *tCPRouteSet) Intersection(set TCPRouteSet) TCPRouteSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var tCPRouteList []*gateway_networking_k8s_io_v1alpha2.TCPRoute
	for _, obj := range newSet.List() {
		tCPRouteList = append(tCPRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute))
	}
	return NewTCPRouteSet(tCPRouteList...)
}

func (s *tCPRouteSet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.TCPRoute, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find TCPRoute %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1alpha2.TCPRoute{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1alpha2.TCPRoute), nil
}

func (s *tCPRouteSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *tCPRouteSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *tCPRouteSet) Delta(newSet TCPRouteSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *tCPRouteSet) Clone() TCPRouteSet {
	if s == nil {
		return nil
	}
	return &tCPRouteSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type TLSRouteSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TLSRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TLSRoute
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TLSRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TLSRoute
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1alpha2.TLSRoute
	// Insert a resource into the set.
	Insert(tLSRoute ...*gateway_networking_k8s_io_v1alpha2.TLSRoute)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(tLSRouteSet TLSRouteSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(tLSRoute ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(tLSRoute ezkube.ResourceId)
	// Return the union with the provided set
	Union(set TLSRouteSet) TLSRouteSet
	// Return the difference with the provided set
	Difference(set TLSRouteSet) TLSRouteSet
	// Return the intersection with the provided set
	Intersection(set TLSRouteSet) TLSRouteSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.TLSRoute, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another TLSRouteSet
	Delta(newSet TLSRouteSet) sksets.ResourceDelta
	// Create a deep copy of the current TLSRouteSet
	Clone() TLSRouteSet
}

func makeGenericTLSRouteSet(tLSRouteList []*gateway_networking_k8s_io_v1alpha2.TLSRoute) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range tLSRouteList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type tLSRouteSet struct {
	set sksets.ResourceSet
}

func NewTLSRouteSet(tLSRouteList ...*gateway_networking_k8s_io_v1alpha2.TLSRoute) TLSRouteSet {
	return &tLSRouteSet{set: makeGenericTLSRouteSet(tLSRouteList)}
}

func NewTLSRouteSetFromList(tLSRouteList *gateway_networking_k8s_io_v1alpha2.TLSRouteList) TLSRouteSet {
	list := make([]*gateway_networking_k8s_io_v1alpha2.TLSRoute, 0, len(tLSRouteList.Items))
	for idx := range tLSRouteList.Items {
		list = append(list, &tLSRouteList.Items[idx])
	}
	return &tLSRouteSet{set: makeGenericTLSRouteSet(list)}
}

func (s *tLSRouteSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *tLSRouteSet) List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TLSRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TLSRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.TLSRoute))
		})
	}

	objs := s.Generic().List(genericFilters...)
	tLSRouteList := make([]*gateway_networking_k8s_io_v1alpha2.TLSRoute, 0, len(objs))
	for _, obj := range objs {
		tLSRouteList = append(tLSRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.TLSRoute))
	}
	return tLSRouteList
}

func (s *tLSRouteSet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.TLSRoute) bool) []*gateway_networking_k8s_io_v1alpha2.TLSRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.TLSRoute))
		})
	}

	var tLSRouteList []*gateway_networking_k8s_io_v1alpha2.TLSRoute
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		tLSRouteList = append(tLSRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.TLSRoute))
	}
	return tLSRouteList
}

func (s *tLSRouteSet) Map() map[string]*gateway_networking_k8s_io_v1alpha2.TLSRoute {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1alpha2.TLSRoute{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1alpha2.TLSRoute)
	}
	return newMap
}

func (s *tLSRouteSet) Insert(
	tLSRouteList ...*gateway_networking_k8s_io_v1alpha2.TLSRoute,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range tLSRouteList {
		s.Generic().Insert(obj)
	}
}

func (s *tLSRouteSet) Has(tLSRoute ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(tLSRoute)
}

func (s *tLSRouteSet) Equal(
	tLSRouteSet TLSRouteSet,
) bool {
	if s == nil {
		return tLSRouteSet == nil
	}
	return s.Generic().Equal(tLSRouteSet.Generic())
}

func (s *tLSRouteSet) Delete(TLSRoute ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(TLSRoute)
}

func (s *tLSRouteSet) Union(set TLSRouteSet) TLSRouteSet {
	if s == nil {
		return set
	}
	return NewTLSRouteSet(append(s.List(), set.List()...)...)
}

func (s *tLSRouteSet) Difference(set TLSRouteSet) TLSRouteSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &tLSRouteSet{set: newSet}
}

func (s *tLSRouteSet) Intersection(set TLSRouteSet) TLSRouteSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var tLSRouteList []*gateway_networking_k8s_io_v1alpha2.TLSRoute
	for _, obj := range newSet.List() {
		tLSRouteList = append(tLSRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.TLSRoute))
	}
	return NewTLSRouteSet(tLSRouteList...)
}

func (s *tLSRouteSet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.TLSRoute, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find TLSRoute %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1alpha2.TLSRoute{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1alpha2.TLSRoute), nil
}

func (s *tLSRouteSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *tLSRouteSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *tLSRouteSet) Delta(newSet TLSRouteSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *tLSRouteSet) Clone() TLSRouteSet {
	if s == nil {
		return nil
	}
	return &tLSRouteSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

type UDPRouteSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.UDPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.UDPRoute
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.UDPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.UDPRoute
	// Return the Set as a map of key to resource.
	Map() map[string]*gateway_networking_k8s_io_v1alpha2.UDPRoute
	// Insert a resource into the set.
	Insert(uDPRoute ...*gateway_networking_k8s_io_v1alpha2.UDPRoute)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(uDPRouteSet UDPRouteSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(uDPRoute ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(uDPRoute ezkube.ResourceId)
	// Return the union with the provided set
	Union(set UDPRouteSet) UDPRouteSet
	// Return the difference with the provided set
	Difference(set UDPRouteSet) UDPRouteSet
	// Return the intersection with the provided set
	Intersection(set UDPRouteSet) UDPRouteSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.UDPRoute, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another UDPRouteSet
	Delta(newSet UDPRouteSet) sksets.ResourceDelta
	// Create a deep copy of the current UDPRouteSet
	Clone() UDPRouteSet
}

func makeGenericUDPRouteSet(uDPRouteList []*gateway_networking_k8s_io_v1alpha2.UDPRoute) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range uDPRouteList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type uDPRouteSet struct {
	set sksets.ResourceSet
}

func NewUDPRouteSet(uDPRouteList ...*gateway_networking_k8s_io_v1alpha2.UDPRoute) UDPRouteSet {
	return &uDPRouteSet{set: makeGenericUDPRouteSet(uDPRouteList)}
}

func NewUDPRouteSetFromList(uDPRouteList *gateway_networking_k8s_io_v1alpha2.UDPRouteList) UDPRouteSet {
	list := make([]*gateway_networking_k8s_io_v1alpha2.UDPRoute, 0, len(uDPRouteList.Items))
	for idx := range uDPRouteList.Items {
		list = append(list, &uDPRouteList.Items[idx])
	}
	return &uDPRouteSet{set: makeGenericUDPRouteSet(list)}
}

func (s *uDPRouteSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *uDPRouteSet) List(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.UDPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.UDPRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.UDPRoute))
		})
	}

	objs := s.Generic().List(genericFilters...)
	uDPRouteList := make([]*gateway_networking_k8s_io_v1alpha2.UDPRoute, 0, len(objs))
	for _, obj := range objs {
		uDPRouteList = append(uDPRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.UDPRoute))
	}
	return uDPRouteList
}

func (s *uDPRouteSet) UnsortedList(filterResource ...func(*gateway_networking_k8s_io_v1alpha2.UDPRoute) bool) []*gateway_networking_k8s_io_v1alpha2.UDPRoute {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*gateway_networking_k8s_io_v1alpha2.UDPRoute))
		})
	}

	var uDPRouteList []*gateway_networking_k8s_io_v1alpha2.UDPRoute
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		uDPRouteList = append(uDPRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.UDPRoute))
	}
	return uDPRouteList
}

func (s *uDPRouteSet) Map() map[string]*gateway_networking_k8s_io_v1alpha2.UDPRoute {
	if s == nil {
		return nil
	}

	newMap := map[string]*gateway_networking_k8s_io_v1alpha2.UDPRoute{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*gateway_networking_k8s_io_v1alpha2.UDPRoute)
	}
	return newMap
}

func (s *uDPRouteSet) Insert(
	uDPRouteList ...*gateway_networking_k8s_io_v1alpha2.UDPRoute,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range uDPRouteList {
		s.Generic().Insert(obj)
	}
}

func (s *uDPRouteSet) Has(uDPRoute ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(uDPRoute)
}

func (s *uDPRouteSet) Equal(
	uDPRouteSet UDPRouteSet,
) bool {
	if s == nil {
		return uDPRouteSet == nil
	}
	return s.Generic().Equal(uDPRouteSet.Generic())
}

func (s *uDPRouteSet) Delete(UDPRoute ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(UDPRoute)
}

func (s *uDPRouteSet) Union(set UDPRouteSet) UDPRouteSet {
	if s == nil {
		return set
	}
	return NewUDPRouteSet(append(s.List(), set.List()...)...)
}

func (s *uDPRouteSet) Difference(set UDPRouteSet) UDPRouteSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &uDPRouteSet{set: newSet}
}

func (s *uDPRouteSet) Intersection(set UDPRouteSet) UDPRouteSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var uDPRouteList []*gateway_networking_k8s_io_v1alpha2.UDPRoute
	for _, obj := range newSet.List() {
		uDPRouteList = append(uDPRouteList, obj.(*gateway_networking_k8s_io_v1alpha2.UDPRoute))
	}
	return NewUDPRouteSet(uDPRouteList...)
}

func (s *uDPRouteSet) Find(id ezkube.ResourceId) (*gateway_networking_k8s_io_v1alpha2.UDPRoute, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find UDPRoute %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&gateway_networking_k8s_io_v1alpha2.UDPRoute{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*gateway_networking_k8s_io_v1alpha2.UDPRoute), nil
}

func (s *uDPRouteSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *uDPRouteSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *uDPRouteSet) Delta(newSet UDPRouteSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *uDPRouteSet) Clone() UDPRouteSet {
	if s == nil {
		return nil
	}
	return &uDPRouteSet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

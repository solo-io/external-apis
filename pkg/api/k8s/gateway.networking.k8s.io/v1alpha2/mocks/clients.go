// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha2 is a generated GoMock package.
package mock_v1alpha2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/solo-io/external-apis/pkg/api/k8s/gateway.networking.k8s.io/v1alpha2"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	v1alpha20 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha2.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// GRPCRoutes mocks base method.
func (m *MockClientset) GRPCRoutes() v1alpha2.GRPCRouteClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCRoutes")
	ret0, _ := ret[0].(v1alpha2.GRPCRouteClient)
	return ret0
}

// GRPCRoutes indicates an expected call of GRPCRoutes.
func (mr *MockClientsetMockRecorder) GRPCRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCRoutes", reflect.TypeOf((*MockClientset)(nil).GRPCRoutes))
}

// TCPRoutes mocks base method.
func (m *MockClientset) TCPRoutes() v1alpha2.TCPRouteClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCPRoutes")
	ret0, _ := ret[0].(v1alpha2.TCPRouteClient)
	return ret0
}

// TCPRoutes indicates an expected call of TCPRoutes.
func (mr *MockClientsetMockRecorder) TCPRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCPRoutes", reflect.TypeOf((*MockClientset)(nil).TCPRoutes))
}

// TLSRoutes mocks base method.
func (m *MockClientset) TLSRoutes() v1alpha2.TLSRouteClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSRoutes")
	ret0, _ := ret[0].(v1alpha2.TLSRouteClient)
	return ret0
}

// TLSRoutes indicates an expected call of TLSRoutes.
func (mr *MockClientsetMockRecorder) TLSRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSRoutes", reflect.TypeOf((*MockClientset)(nil).TLSRoutes))
}

// UDPRoutes mocks base method.
func (m *MockClientset) UDPRoutes() v1alpha2.UDPRouteClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UDPRoutes")
	ret0, _ := ret[0].(v1alpha2.UDPRouteClient)
	return ret0
}

// UDPRoutes indicates an expected call of UDPRoutes.
func (mr *MockClientsetMockRecorder) UDPRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UDPRoutes", reflect.TypeOf((*MockClientset)(nil).UDPRoutes))
}

// MockGRPCRouteReader is a mock of GRPCRouteReader interface.
type MockGRPCRouteReader struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteReaderMockRecorder
}

// MockGRPCRouteReaderMockRecorder is the mock recorder for MockGRPCRouteReader.
type MockGRPCRouteReaderMockRecorder struct {
	mock *MockGRPCRouteReader
}

// NewMockGRPCRouteReader creates a new mock instance.
func NewMockGRPCRouteReader(ctrl *gomock.Controller) *MockGRPCRouteReader {
	mock := &MockGRPCRouteReader{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteReader) EXPECT() *MockGRPCRouteReaderMockRecorder {
	return m.recorder
}

// GetGRPCRoute mocks base method.
func (m *MockGRPCRouteReader) GetGRPCRoute(ctx context.Context, key client.ObjectKey) (*v1alpha20.GRPCRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGRPCRoute", ctx, key)
	ret0, _ := ret[0].(*v1alpha20.GRPCRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGRPCRoute indicates an expected call of GetGRPCRoute.
func (mr *MockGRPCRouteReaderMockRecorder) GetGRPCRoute(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGRPCRoute", reflect.TypeOf((*MockGRPCRouteReader)(nil).GetGRPCRoute), ctx, key)
}

// ListGRPCRoute mocks base method.
func (m *MockGRPCRouteReader) ListGRPCRoute(ctx context.Context, opts ...client.ListOption) (*v1alpha20.GRPCRouteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGRPCRoute", varargs...)
	ret0, _ := ret[0].(*v1alpha20.GRPCRouteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGRPCRoute indicates an expected call of ListGRPCRoute.
func (mr *MockGRPCRouteReaderMockRecorder) ListGRPCRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGRPCRoute", reflect.TypeOf((*MockGRPCRouteReader)(nil).ListGRPCRoute), varargs...)
}

// MockGRPCRouteWriter is a mock of GRPCRouteWriter interface.
type MockGRPCRouteWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteWriterMockRecorder
}

// MockGRPCRouteWriterMockRecorder is the mock recorder for MockGRPCRouteWriter.
type MockGRPCRouteWriterMockRecorder struct {
	mock *MockGRPCRouteWriter
}

// NewMockGRPCRouteWriter creates a new mock instance.
func NewMockGRPCRouteWriter(ctrl *gomock.Controller) *MockGRPCRouteWriter {
	mock := &MockGRPCRouteWriter{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteWriter) EXPECT() *MockGRPCRouteWriterMockRecorder {
	return m.recorder
}

// CreateGRPCRoute mocks base method.
func (m *MockGRPCRouteWriter) CreateGRPCRoute(ctx context.Context, obj *v1alpha20.GRPCRoute, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGRPCRoute indicates an expected call of CreateGRPCRoute.
func (mr *MockGRPCRouteWriterMockRecorder) CreateGRPCRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGRPCRoute", reflect.TypeOf((*MockGRPCRouteWriter)(nil).CreateGRPCRoute), varargs...)
}

// DeleteAllOfGRPCRoute mocks base method.
func (m *MockGRPCRouteWriter) DeleteAllOfGRPCRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGRPCRoute indicates an expected call of DeleteAllOfGRPCRoute.
func (mr *MockGRPCRouteWriterMockRecorder) DeleteAllOfGRPCRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGRPCRoute", reflect.TypeOf((*MockGRPCRouteWriter)(nil).DeleteAllOfGRPCRoute), varargs...)
}

// DeleteGRPCRoute mocks base method.
func (m *MockGRPCRouteWriter) DeleteGRPCRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGRPCRoute indicates an expected call of DeleteGRPCRoute.
func (mr *MockGRPCRouteWriterMockRecorder) DeleteGRPCRoute(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGRPCRoute", reflect.TypeOf((*MockGRPCRouteWriter)(nil).DeleteGRPCRoute), varargs...)
}

// PatchGRPCRoute mocks base method.
func (m *MockGRPCRouteWriter) PatchGRPCRoute(ctx context.Context, obj *v1alpha20.GRPCRoute, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGRPCRoute indicates an expected call of PatchGRPCRoute.
func (mr *MockGRPCRouteWriterMockRecorder) PatchGRPCRoute(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGRPCRoute", reflect.TypeOf((*MockGRPCRouteWriter)(nil).PatchGRPCRoute), varargs...)
}

// UpdateGRPCRoute mocks base method.
func (m *MockGRPCRouteWriter) UpdateGRPCRoute(ctx context.Context, obj *v1alpha20.GRPCRoute, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGRPCRoute indicates an expected call of UpdateGRPCRoute.
func (mr *MockGRPCRouteWriterMockRecorder) UpdateGRPCRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGRPCRoute", reflect.TypeOf((*MockGRPCRouteWriter)(nil).UpdateGRPCRoute), varargs...)
}

// UpsertGRPCRoute mocks base method.
func (m *MockGRPCRouteWriter) UpsertGRPCRoute(ctx context.Context, obj *v1alpha20.GRPCRoute, transitionFuncs ...v1alpha2.GRPCRouteTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGRPCRoute indicates an expected call of UpsertGRPCRoute.
func (mr *MockGRPCRouteWriterMockRecorder) UpsertGRPCRoute(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGRPCRoute", reflect.TypeOf((*MockGRPCRouteWriter)(nil).UpsertGRPCRoute), varargs...)
}

// MockGRPCRouteStatusWriter is a mock of GRPCRouteStatusWriter interface.
type MockGRPCRouteStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteStatusWriterMockRecorder
}

// MockGRPCRouteStatusWriterMockRecorder is the mock recorder for MockGRPCRouteStatusWriter.
type MockGRPCRouteStatusWriterMockRecorder struct {
	mock *MockGRPCRouteStatusWriter
}

// NewMockGRPCRouteStatusWriter creates a new mock instance.
func NewMockGRPCRouteStatusWriter(ctrl *gomock.Controller) *MockGRPCRouteStatusWriter {
	mock := &MockGRPCRouteStatusWriter{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteStatusWriter) EXPECT() *MockGRPCRouteStatusWriterMockRecorder {
	return m.recorder
}

// PatchGRPCRouteStatus mocks base method.
func (m *MockGRPCRouteStatusWriter) PatchGRPCRouteStatus(ctx context.Context, obj *v1alpha20.GRPCRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGRPCRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGRPCRouteStatus indicates an expected call of PatchGRPCRouteStatus.
func (mr *MockGRPCRouteStatusWriterMockRecorder) PatchGRPCRouteStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGRPCRouteStatus", reflect.TypeOf((*MockGRPCRouteStatusWriter)(nil).PatchGRPCRouteStatus), varargs...)
}

// UpdateGRPCRouteStatus mocks base method.
func (m *MockGRPCRouteStatusWriter) UpdateGRPCRouteStatus(ctx context.Context, obj *v1alpha20.GRPCRoute, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGRPCRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGRPCRouteStatus indicates an expected call of UpdateGRPCRouteStatus.
func (mr *MockGRPCRouteStatusWriterMockRecorder) UpdateGRPCRouteStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGRPCRouteStatus", reflect.TypeOf((*MockGRPCRouteStatusWriter)(nil).UpdateGRPCRouteStatus), varargs...)
}

// MockGRPCRouteClient is a mock of GRPCRouteClient interface.
type MockGRPCRouteClient struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteClientMockRecorder
}

// MockGRPCRouteClientMockRecorder is the mock recorder for MockGRPCRouteClient.
type MockGRPCRouteClientMockRecorder struct {
	mock *MockGRPCRouteClient
}

// NewMockGRPCRouteClient creates a new mock instance.
func NewMockGRPCRouteClient(ctrl *gomock.Controller) *MockGRPCRouteClient {
	mock := &MockGRPCRouteClient{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteClient) EXPECT() *MockGRPCRouteClientMockRecorder {
	return m.recorder
}

// CreateGRPCRoute mocks base method.
func (m *MockGRPCRouteClient) CreateGRPCRoute(ctx context.Context, obj *v1alpha20.GRPCRoute, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGRPCRoute indicates an expected call of CreateGRPCRoute.
func (mr *MockGRPCRouteClientMockRecorder) CreateGRPCRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGRPCRoute", reflect.TypeOf((*MockGRPCRouteClient)(nil).CreateGRPCRoute), varargs...)
}

// DeleteAllOfGRPCRoute mocks base method.
func (m *MockGRPCRouteClient) DeleteAllOfGRPCRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfGRPCRoute indicates an expected call of DeleteAllOfGRPCRoute.
func (mr *MockGRPCRouteClientMockRecorder) DeleteAllOfGRPCRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfGRPCRoute", reflect.TypeOf((*MockGRPCRouteClient)(nil).DeleteAllOfGRPCRoute), varargs...)
}

// DeleteGRPCRoute mocks base method.
func (m *MockGRPCRouteClient) DeleteGRPCRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGRPCRoute indicates an expected call of DeleteGRPCRoute.
func (mr *MockGRPCRouteClientMockRecorder) DeleteGRPCRoute(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGRPCRoute", reflect.TypeOf((*MockGRPCRouteClient)(nil).DeleteGRPCRoute), varargs...)
}

// GetGRPCRoute mocks base method.
func (m *MockGRPCRouteClient) GetGRPCRoute(ctx context.Context, key client.ObjectKey) (*v1alpha20.GRPCRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGRPCRoute", ctx, key)
	ret0, _ := ret[0].(*v1alpha20.GRPCRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGRPCRoute indicates an expected call of GetGRPCRoute.
func (mr *MockGRPCRouteClientMockRecorder) GetGRPCRoute(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGRPCRoute", reflect.TypeOf((*MockGRPCRouteClient)(nil).GetGRPCRoute), ctx, key)
}

// ListGRPCRoute mocks base method.
func (m *MockGRPCRouteClient) ListGRPCRoute(ctx context.Context, opts ...client.ListOption) (*v1alpha20.GRPCRouteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGRPCRoute", varargs...)
	ret0, _ := ret[0].(*v1alpha20.GRPCRouteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGRPCRoute indicates an expected call of ListGRPCRoute.
func (mr *MockGRPCRouteClientMockRecorder) ListGRPCRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGRPCRoute", reflect.TypeOf((*MockGRPCRouteClient)(nil).ListGRPCRoute), varargs...)
}

// PatchGRPCRoute mocks base method.
func (m *MockGRPCRouteClient) PatchGRPCRoute(ctx context.Context, obj *v1alpha20.GRPCRoute, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGRPCRoute indicates an expected call of PatchGRPCRoute.
func (mr *MockGRPCRouteClientMockRecorder) PatchGRPCRoute(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGRPCRoute", reflect.TypeOf((*MockGRPCRouteClient)(nil).PatchGRPCRoute), varargs...)
}

// PatchGRPCRouteStatus mocks base method.
func (m *MockGRPCRouteClient) PatchGRPCRouteStatus(ctx context.Context, obj *v1alpha20.GRPCRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchGRPCRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchGRPCRouteStatus indicates an expected call of PatchGRPCRouteStatus.
func (mr *MockGRPCRouteClientMockRecorder) PatchGRPCRouteStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchGRPCRouteStatus", reflect.TypeOf((*MockGRPCRouteClient)(nil).PatchGRPCRouteStatus), varargs...)
}

// UpdateGRPCRoute mocks base method.
func (m *MockGRPCRouteClient) UpdateGRPCRoute(ctx context.Context, obj *v1alpha20.GRPCRoute, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGRPCRoute indicates an expected call of UpdateGRPCRoute.
func (mr *MockGRPCRouteClientMockRecorder) UpdateGRPCRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGRPCRoute", reflect.TypeOf((*MockGRPCRouteClient)(nil).UpdateGRPCRoute), varargs...)
}

// UpdateGRPCRouteStatus mocks base method.
func (m *MockGRPCRouteClient) UpdateGRPCRouteStatus(ctx context.Context, obj *v1alpha20.GRPCRoute, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGRPCRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGRPCRouteStatus indicates an expected call of UpdateGRPCRouteStatus.
func (mr *MockGRPCRouteClientMockRecorder) UpdateGRPCRouteStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGRPCRouteStatus", reflect.TypeOf((*MockGRPCRouteClient)(nil).UpdateGRPCRouteStatus), varargs...)
}

// UpsertGRPCRoute mocks base method.
func (m *MockGRPCRouteClient) UpsertGRPCRoute(ctx context.Context, obj *v1alpha20.GRPCRoute, transitionFuncs ...v1alpha2.GRPCRouteTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertGRPCRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertGRPCRoute indicates an expected call of UpsertGRPCRoute.
func (mr *MockGRPCRouteClientMockRecorder) UpsertGRPCRoute(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertGRPCRoute", reflect.TypeOf((*MockGRPCRouteClient)(nil).UpsertGRPCRoute), varargs...)
}

// MockMulticlusterGRPCRouteClient is a mock of MulticlusterGRPCRouteClient interface.
type MockMulticlusterGRPCRouteClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGRPCRouteClientMockRecorder
}

// MockMulticlusterGRPCRouteClientMockRecorder is the mock recorder for MockMulticlusterGRPCRouteClient.
type MockMulticlusterGRPCRouteClientMockRecorder struct {
	mock *MockMulticlusterGRPCRouteClient
}

// NewMockMulticlusterGRPCRouteClient creates a new mock instance.
func NewMockMulticlusterGRPCRouteClient(ctrl *gomock.Controller) *MockMulticlusterGRPCRouteClient {
	mock := &MockMulticlusterGRPCRouteClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGRPCRouteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGRPCRouteClient) EXPECT() *MockMulticlusterGRPCRouteClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterGRPCRouteClient) Cluster(cluster string) (v1alpha2.GRPCRouteClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.GRPCRouteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterGRPCRouteClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterGRPCRouteClient)(nil).Cluster), cluster)
}

// MockTCPRouteReader is a mock of TCPRouteReader interface.
type MockTCPRouteReader struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteReaderMockRecorder
}

// MockTCPRouteReaderMockRecorder is the mock recorder for MockTCPRouteReader.
type MockTCPRouteReaderMockRecorder struct {
	mock *MockTCPRouteReader
}

// NewMockTCPRouteReader creates a new mock instance.
func NewMockTCPRouteReader(ctrl *gomock.Controller) *MockTCPRouteReader {
	mock := &MockTCPRouteReader{ctrl: ctrl}
	mock.recorder = &MockTCPRouteReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteReader) EXPECT() *MockTCPRouteReaderMockRecorder {
	return m.recorder
}

// GetTCPRoute mocks base method.
func (m *MockTCPRouteReader) GetTCPRoute(ctx context.Context, key client.ObjectKey) (*v1alpha20.TCPRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTCPRoute", ctx, key)
	ret0, _ := ret[0].(*v1alpha20.TCPRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTCPRoute indicates an expected call of GetTCPRoute.
func (mr *MockTCPRouteReaderMockRecorder) GetTCPRoute(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTCPRoute", reflect.TypeOf((*MockTCPRouteReader)(nil).GetTCPRoute), ctx, key)
}

// ListTCPRoute mocks base method.
func (m *MockTCPRouteReader) ListTCPRoute(ctx context.Context, opts ...client.ListOption) (*v1alpha20.TCPRouteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTCPRoute", varargs...)
	ret0, _ := ret[0].(*v1alpha20.TCPRouteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTCPRoute indicates an expected call of ListTCPRoute.
func (mr *MockTCPRouteReaderMockRecorder) ListTCPRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTCPRoute", reflect.TypeOf((*MockTCPRouteReader)(nil).ListTCPRoute), varargs...)
}

// MockTCPRouteWriter is a mock of TCPRouteWriter interface.
type MockTCPRouteWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteWriterMockRecorder
}

// MockTCPRouteWriterMockRecorder is the mock recorder for MockTCPRouteWriter.
type MockTCPRouteWriterMockRecorder struct {
	mock *MockTCPRouteWriter
}

// NewMockTCPRouteWriter creates a new mock instance.
func NewMockTCPRouteWriter(ctrl *gomock.Controller) *MockTCPRouteWriter {
	mock := &MockTCPRouteWriter{ctrl: ctrl}
	mock.recorder = &MockTCPRouteWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteWriter) EXPECT() *MockTCPRouteWriterMockRecorder {
	return m.recorder
}

// CreateTCPRoute mocks base method.
func (m *MockTCPRouteWriter) CreateTCPRoute(ctx context.Context, obj *v1alpha20.TCPRoute, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTCPRoute indicates an expected call of CreateTCPRoute.
func (mr *MockTCPRouteWriterMockRecorder) CreateTCPRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTCPRoute", reflect.TypeOf((*MockTCPRouteWriter)(nil).CreateTCPRoute), varargs...)
}

// DeleteAllOfTCPRoute mocks base method.
func (m *MockTCPRouteWriter) DeleteAllOfTCPRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTCPRoute indicates an expected call of DeleteAllOfTCPRoute.
func (mr *MockTCPRouteWriterMockRecorder) DeleteAllOfTCPRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTCPRoute", reflect.TypeOf((*MockTCPRouteWriter)(nil).DeleteAllOfTCPRoute), varargs...)
}

// DeleteTCPRoute mocks base method.
func (m *MockTCPRouteWriter) DeleteTCPRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTCPRoute indicates an expected call of DeleteTCPRoute.
func (mr *MockTCPRouteWriterMockRecorder) DeleteTCPRoute(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTCPRoute", reflect.TypeOf((*MockTCPRouteWriter)(nil).DeleteTCPRoute), varargs...)
}

// PatchTCPRoute mocks base method.
func (m *MockTCPRouteWriter) PatchTCPRoute(ctx context.Context, obj *v1alpha20.TCPRoute, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTCPRoute indicates an expected call of PatchTCPRoute.
func (mr *MockTCPRouteWriterMockRecorder) PatchTCPRoute(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTCPRoute", reflect.TypeOf((*MockTCPRouteWriter)(nil).PatchTCPRoute), varargs...)
}

// UpdateTCPRoute mocks base method.
func (m *MockTCPRouteWriter) UpdateTCPRoute(ctx context.Context, obj *v1alpha20.TCPRoute, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTCPRoute indicates an expected call of UpdateTCPRoute.
func (mr *MockTCPRouteWriterMockRecorder) UpdateTCPRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTCPRoute", reflect.TypeOf((*MockTCPRouteWriter)(nil).UpdateTCPRoute), varargs...)
}

// UpsertTCPRoute mocks base method.
func (m *MockTCPRouteWriter) UpsertTCPRoute(ctx context.Context, obj *v1alpha20.TCPRoute, transitionFuncs ...v1alpha2.TCPRouteTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTCPRoute indicates an expected call of UpsertTCPRoute.
func (mr *MockTCPRouteWriterMockRecorder) UpsertTCPRoute(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTCPRoute", reflect.TypeOf((*MockTCPRouteWriter)(nil).UpsertTCPRoute), varargs...)
}

// MockTCPRouteStatusWriter is a mock of TCPRouteStatusWriter interface.
type MockTCPRouteStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteStatusWriterMockRecorder
}

// MockTCPRouteStatusWriterMockRecorder is the mock recorder for MockTCPRouteStatusWriter.
type MockTCPRouteStatusWriterMockRecorder struct {
	mock *MockTCPRouteStatusWriter
}

// NewMockTCPRouteStatusWriter creates a new mock instance.
func NewMockTCPRouteStatusWriter(ctrl *gomock.Controller) *MockTCPRouteStatusWriter {
	mock := &MockTCPRouteStatusWriter{ctrl: ctrl}
	mock.recorder = &MockTCPRouteStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteStatusWriter) EXPECT() *MockTCPRouteStatusWriterMockRecorder {
	return m.recorder
}

// PatchTCPRouteStatus mocks base method.
func (m *MockTCPRouteStatusWriter) PatchTCPRouteStatus(ctx context.Context, obj *v1alpha20.TCPRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTCPRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTCPRouteStatus indicates an expected call of PatchTCPRouteStatus.
func (mr *MockTCPRouteStatusWriterMockRecorder) PatchTCPRouteStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTCPRouteStatus", reflect.TypeOf((*MockTCPRouteStatusWriter)(nil).PatchTCPRouteStatus), varargs...)
}

// UpdateTCPRouteStatus mocks base method.
func (m *MockTCPRouteStatusWriter) UpdateTCPRouteStatus(ctx context.Context, obj *v1alpha20.TCPRoute, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTCPRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTCPRouteStatus indicates an expected call of UpdateTCPRouteStatus.
func (mr *MockTCPRouteStatusWriterMockRecorder) UpdateTCPRouteStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTCPRouteStatus", reflect.TypeOf((*MockTCPRouteStatusWriter)(nil).UpdateTCPRouteStatus), varargs...)
}

// MockTCPRouteClient is a mock of TCPRouteClient interface.
type MockTCPRouteClient struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteClientMockRecorder
}

// MockTCPRouteClientMockRecorder is the mock recorder for MockTCPRouteClient.
type MockTCPRouteClientMockRecorder struct {
	mock *MockTCPRouteClient
}

// NewMockTCPRouteClient creates a new mock instance.
func NewMockTCPRouteClient(ctrl *gomock.Controller) *MockTCPRouteClient {
	mock := &MockTCPRouteClient{ctrl: ctrl}
	mock.recorder = &MockTCPRouteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteClient) EXPECT() *MockTCPRouteClientMockRecorder {
	return m.recorder
}

// CreateTCPRoute mocks base method.
func (m *MockTCPRouteClient) CreateTCPRoute(ctx context.Context, obj *v1alpha20.TCPRoute, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTCPRoute indicates an expected call of CreateTCPRoute.
func (mr *MockTCPRouteClientMockRecorder) CreateTCPRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTCPRoute", reflect.TypeOf((*MockTCPRouteClient)(nil).CreateTCPRoute), varargs...)
}

// DeleteAllOfTCPRoute mocks base method.
func (m *MockTCPRouteClient) DeleteAllOfTCPRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTCPRoute indicates an expected call of DeleteAllOfTCPRoute.
func (mr *MockTCPRouteClientMockRecorder) DeleteAllOfTCPRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTCPRoute", reflect.TypeOf((*MockTCPRouteClient)(nil).DeleteAllOfTCPRoute), varargs...)
}

// DeleteTCPRoute mocks base method.
func (m *MockTCPRouteClient) DeleteTCPRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTCPRoute indicates an expected call of DeleteTCPRoute.
func (mr *MockTCPRouteClientMockRecorder) DeleteTCPRoute(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTCPRoute", reflect.TypeOf((*MockTCPRouteClient)(nil).DeleteTCPRoute), varargs...)
}

// GetTCPRoute mocks base method.
func (m *MockTCPRouteClient) GetTCPRoute(ctx context.Context, key client.ObjectKey) (*v1alpha20.TCPRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTCPRoute", ctx, key)
	ret0, _ := ret[0].(*v1alpha20.TCPRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTCPRoute indicates an expected call of GetTCPRoute.
func (mr *MockTCPRouteClientMockRecorder) GetTCPRoute(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTCPRoute", reflect.TypeOf((*MockTCPRouteClient)(nil).GetTCPRoute), ctx, key)
}

// ListTCPRoute mocks base method.
func (m *MockTCPRouteClient) ListTCPRoute(ctx context.Context, opts ...client.ListOption) (*v1alpha20.TCPRouteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTCPRoute", varargs...)
	ret0, _ := ret[0].(*v1alpha20.TCPRouteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTCPRoute indicates an expected call of ListTCPRoute.
func (mr *MockTCPRouteClientMockRecorder) ListTCPRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTCPRoute", reflect.TypeOf((*MockTCPRouteClient)(nil).ListTCPRoute), varargs...)
}

// PatchTCPRoute mocks base method.
func (m *MockTCPRouteClient) PatchTCPRoute(ctx context.Context, obj *v1alpha20.TCPRoute, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTCPRoute indicates an expected call of PatchTCPRoute.
func (mr *MockTCPRouteClientMockRecorder) PatchTCPRoute(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTCPRoute", reflect.TypeOf((*MockTCPRouteClient)(nil).PatchTCPRoute), varargs...)
}

// PatchTCPRouteStatus mocks base method.
func (m *MockTCPRouteClient) PatchTCPRouteStatus(ctx context.Context, obj *v1alpha20.TCPRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTCPRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTCPRouteStatus indicates an expected call of PatchTCPRouteStatus.
func (mr *MockTCPRouteClientMockRecorder) PatchTCPRouteStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTCPRouteStatus", reflect.TypeOf((*MockTCPRouteClient)(nil).PatchTCPRouteStatus), varargs...)
}

// UpdateTCPRoute mocks base method.
func (m *MockTCPRouteClient) UpdateTCPRoute(ctx context.Context, obj *v1alpha20.TCPRoute, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTCPRoute indicates an expected call of UpdateTCPRoute.
func (mr *MockTCPRouteClientMockRecorder) UpdateTCPRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTCPRoute", reflect.TypeOf((*MockTCPRouteClient)(nil).UpdateTCPRoute), varargs...)
}

// UpdateTCPRouteStatus mocks base method.
func (m *MockTCPRouteClient) UpdateTCPRouteStatus(ctx context.Context, obj *v1alpha20.TCPRoute, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTCPRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTCPRouteStatus indicates an expected call of UpdateTCPRouteStatus.
func (mr *MockTCPRouteClientMockRecorder) UpdateTCPRouteStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTCPRouteStatus", reflect.TypeOf((*MockTCPRouteClient)(nil).UpdateTCPRouteStatus), varargs...)
}

// UpsertTCPRoute mocks base method.
func (m *MockTCPRouteClient) UpsertTCPRoute(ctx context.Context, obj *v1alpha20.TCPRoute, transitionFuncs ...v1alpha2.TCPRouteTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTCPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTCPRoute indicates an expected call of UpsertTCPRoute.
func (mr *MockTCPRouteClientMockRecorder) UpsertTCPRoute(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTCPRoute", reflect.TypeOf((*MockTCPRouteClient)(nil).UpsertTCPRoute), varargs...)
}

// MockMulticlusterTCPRouteClient is a mock of MulticlusterTCPRouteClient interface.
type MockMulticlusterTCPRouteClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTCPRouteClientMockRecorder
}

// MockMulticlusterTCPRouteClientMockRecorder is the mock recorder for MockMulticlusterTCPRouteClient.
type MockMulticlusterTCPRouteClientMockRecorder struct {
	mock *MockMulticlusterTCPRouteClient
}

// NewMockMulticlusterTCPRouteClient creates a new mock instance.
func NewMockMulticlusterTCPRouteClient(ctrl *gomock.Controller) *MockMulticlusterTCPRouteClient {
	mock := &MockMulticlusterTCPRouteClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTCPRouteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTCPRouteClient) EXPECT() *MockMulticlusterTCPRouteClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterTCPRouteClient) Cluster(cluster string) (v1alpha2.TCPRouteClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.TCPRouteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterTCPRouteClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterTCPRouteClient)(nil).Cluster), cluster)
}

// MockTLSRouteReader is a mock of TLSRouteReader interface.
type MockTLSRouteReader struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteReaderMockRecorder
}

// MockTLSRouteReaderMockRecorder is the mock recorder for MockTLSRouteReader.
type MockTLSRouteReaderMockRecorder struct {
	mock *MockTLSRouteReader
}

// NewMockTLSRouteReader creates a new mock instance.
func NewMockTLSRouteReader(ctrl *gomock.Controller) *MockTLSRouteReader {
	mock := &MockTLSRouteReader{ctrl: ctrl}
	mock.recorder = &MockTLSRouteReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteReader) EXPECT() *MockTLSRouteReaderMockRecorder {
	return m.recorder
}

// GetTLSRoute mocks base method.
func (m *MockTLSRouteReader) GetTLSRoute(ctx context.Context, key client.ObjectKey) (*v1alpha20.TLSRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSRoute", ctx, key)
	ret0, _ := ret[0].(*v1alpha20.TLSRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLSRoute indicates an expected call of GetTLSRoute.
func (mr *MockTLSRouteReaderMockRecorder) GetTLSRoute(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSRoute", reflect.TypeOf((*MockTLSRouteReader)(nil).GetTLSRoute), ctx, key)
}

// ListTLSRoute mocks base method.
func (m *MockTLSRouteReader) ListTLSRoute(ctx context.Context, opts ...client.ListOption) (*v1alpha20.TLSRouteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTLSRoute", varargs...)
	ret0, _ := ret[0].(*v1alpha20.TLSRouteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTLSRoute indicates an expected call of ListTLSRoute.
func (mr *MockTLSRouteReaderMockRecorder) ListTLSRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTLSRoute", reflect.TypeOf((*MockTLSRouteReader)(nil).ListTLSRoute), varargs...)
}

// MockTLSRouteWriter is a mock of TLSRouteWriter interface.
type MockTLSRouteWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteWriterMockRecorder
}

// MockTLSRouteWriterMockRecorder is the mock recorder for MockTLSRouteWriter.
type MockTLSRouteWriterMockRecorder struct {
	mock *MockTLSRouteWriter
}

// NewMockTLSRouteWriter creates a new mock instance.
func NewMockTLSRouteWriter(ctrl *gomock.Controller) *MockTLSRouteWriter {
	mock := &MockTLSRouteWriter{ctrl: ctrl}
	mock.recorder = &MockTLSRouteWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteWriter) EXPECT() *MockTLSRouteWriterMockRecorder {
	return m.recorder
}

// CreateTLSRoute mocks base method.
func (m *MockTLSRouteWriter) CreateTLSRoute(ctx context.Context, obj *v1alpha20.TLSRoute, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTLSRoute indicates an expected call of CreateTLSRoute.
func (mr *MockTLSRouteWriterMockRecorder) CreateTLSRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTLSRoute", reflect.TypeOf((*MockTLSRouteWriter)(nil).CreateTLSRoute), varargs...)
}

// DeleteAllOfTLSRoute mocks base method.
func (m *MockTLSRouteWriter) DeleteAllOfTLSRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTLSRoute indicates an expected call of DeleteAllOfTLSRoute.
func (mr *MockTLSRouteWriterMockRecorder) DeleteAllOfTLSRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTLSRoute", reflect.TypeOf((*MockTLSRouteWriter)(nil).DeleteAllOfTLSRoute), varargs...)
}

// DeleteTLSRoute mocks base method.
func (m *MockTLSRouteWriter) DeleteTLSRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTLSRoute indicates an expected call of DeleteTLSRoute.
func (mr *MockTLSRouteWriterMockRecorder) DeleteTLSRoute(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTLSRoute", reflect.TypeOf((*MockTLSRouteWriter)(nil).DeleteTLSRoute), varargs...)
}

// PatchTLSRoute mocks base method.
func (m *MockTLSRouteWriter) PatchTLSRoute(ctx context.Context, obj *v1alpha20.TLSRoute, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTLSRoute indicates an expected call of PatchTLSRoute.
func (mr *MockTLSRouteWriterMockRecorder) PatchTLSRoute(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTLSRoute", reflect.TypeOf((*MockTLSRouteWriter)(nil).PatchTLSRoute), varargs...)
}

// UpdateTLSRoute mocks base method.
func (m *MockTLSRouteWriter) UpdateTLSRoute(ctx context.Context, obj *v1alpha20.TLSRoute, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTLSRoute indicates an expected call of UpdateTLSRoute.
func (mr *MockTLSRouteWriterMockRecorder) UpdateTLSRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTLSRoute", reflect.TypeOf((*MockTLSRouteWriter)(nil).UpdateTLSRoute), varargs...)
}

// UpsertTLSRoute mocks base method.
func (m *MockTLSRouteWriter) UpsertTLSRoute(ctx context.Context, obj *v1alpha20.TLSRoute, transitionFuncs ...v1alpha2.TLSRouteTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTLSRoute indicates an expected call of UpsertTLSRoute.
func (mr *MockTLSRouteWriterMockRecorder) UpsertTLSRoute(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTLSRoute", reflect.TypeOf((*MockTLSRouteWriter)(nil).UpsertTLSRoute), varargs...)
}

// MockTLSRouteStatusWriter is a mock of TLSRouteStatusWriter interface.
type MockTLSRouteStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteStatusWriterMockRecorder
}

// MockTLSRouteStatusWriterMockRecorder is the mock recorder for MockTLSRouteStatusWriter.
type MockTLSRouteStatusWriterMockRecorder struct {
	mock *MockTLSRouteStatusWriter
}

// NewMockTLSRouteStatusWriter creates a new mock instance.
func NewMockTLSRouteStatusWriter(ctrl *gomock.Controller) *MockTLSRouteStatusWriter {
	mock := &MockTLSRouteStatusWriter{ctrl: ctrl}
	mock.recorder = &MockTLSRouteStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteStatusWriter) EXPECT() *MockTLSRouteStatusWriterMockRecorder {
	return m.recorder
}

// PatchTLSRouteStatus mocks base method.
func (m *MockTLSRouteStatusWriter) PatchTLSRouteStatus(ctx context.Context, obj *v1alpha20.TLSRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTLSRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTLSRouteStatus indicates an expected call of PatchTLSRouteStatus.
func (mr *MockTLSRouteStatusWriterMockRecorder) PatchTLSRouteStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTLSRouteStatus", reflect.TypeOf((*MockTLSRouteStatusWriter)(nil).PatchTLSRouteStatus), varargs...)
}

// UpdateTLSRouteStatus mocks base method.
func (m *MockTLSRouteStatusWriter) UpdateTLSRouteStatus(ctx context.Context, obj *v1alpha20.TLSRoute, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTLSRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTLSRouteStatus indicates an expected call of UpdateTLSRouteStatus.
func (mr *MockTLSRouteStatusWriterMockRecorder) UpdateTLSRouteStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTLSRouteStatus", reflect.TypeOf((*MockTLSRouteStatusWriter)(nil).UpdateTLSRouteStatus), varargs...)
}

// MockTLSRouteClient is a mock of TLSRouteClient interface.
type MockTLSRouteClient struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteClientMockRecorder
}

// MockTLSRouteClientMockRecorder is the mock recorder for MockTLSRouteClient.
type MockTLSRouteClientMockRecorder struct {
	mock *MockTLSRouteClient
}

// NewMockTLSRouteClient creates a new mock instance.
func NewMockTLSRouteClient(ctrl *gomock.Controller) *MockTLSRouteClient {
	mock := &MockTLSRouteClient{ctrl: ctrl}
	mock.recorder = &MockTLSRouteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteClient) EXPECT() *MockTLSRouteClientMockRecorder {
	return m.recorder
}

// CreateTLSRoute mocks base method.
func (m *MockTLSRouteClient) CreateTLSRoute(ctx context.Context, obj *v1alpha20.TLSRoute, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTLSRoute indicates an expected call of CreateTLSRoute.
func (mr *MockTLSRouteClientMockRecorder) CreateTLSRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTLSRoute", reflect.TypeOf((*MockTLSRouteClient)(nil).CreateTLSRoute), varargs...)
}

// DeleteAllOfTLSRoute mocks base method.
func (m *MockTLSRouteClient) DeleteAllOfTLSRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTLSRoute indicates an expected call of DeleteAllOfTLSRoute.
func (mr *MockTLSRouteClientMockRecorder) DeleteAllOfTLSRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTLSRoute", reflect.TypeOf((*MockTLSRouteClient)(nil).DeleteAllOfTLSRoute), varargs...)
}

// DeleteTLSRoute mocks base method.
func (m *MockTLSRouteClient) DeleteTLSRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTLSRoute indicates an expected call of DeleteTLSRoute.
func (mr *MockTLSRouteClientMockRecorder) DeleteTLSRoute(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTLSRoute", reflect.TypeOf((*MockTLSRouteClient)(nil).DeleteTLSRoute), varargs...)
}

// GetTLSRoute mocks base method.
func (m *MockTLSRouteClient) GetTLSRoute(ctx context.Context, key client.ObjectKey) (*v1alpha20.TLSRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSRoute", ctx, key)
	ret0, _ := ret[0].(*v1alpha20.TLSRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLSRoute indicates an expected call of GetTLSRoute.
func (mr *MockTLSRouteClientMockRecorder) GetTLSRoute(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSRoute", reflect.TypeOf((*MockTLSRouteClient)(nil).GetTLSRoute), ctx, key)
}

// ListTLSRoute mocks base method.
func (m *MockTLSRouteClient) ListTLSRoute(ctx context.Context, opts ...client.ListOption) (*v1alpha20.TLSRouteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTLSRoute", varargs...)
	ret0, _ := ret[0].(*v1alpha20.TLSRouteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTLSRoute indicates an expected call of ListTLSRoute.
func (mr *MockTLSRouteClientMockRecorder) ListTLSRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTLSRoute", reflect.TypeOf((*MockTLSRouteClient)(nil).ListTLSRoute), varargs...)
}

// PatchTLSRoute mocks base method.
func (m *MockTLSRouteClient) PatchTLSRoute(ctx context.Context, obj *v1alpha20.TLSRoute, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTLSRoute indicates an expected call of PatchTLSRoute.
func (mr *MockTLSRouteClientMockRecorder) PatchTLSRoute(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTLSRoute", reflect.TypeOf((*MockTLSRouteClient)(nil).PatchTLSRoute), varargs...)
}

// PatchTLSRouteStatus mocks base method.
func (m *MockTLSRouteClient) PatchTLSRouteStatus(ctx context.Context, obj *v1alpha20.TLSRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTLSRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTLSRouteStatus indicates an expected call of PatchTLSRouteStatus.
func (mr *MockTLSRouteClientMockRecorder) PatchTLSRouteStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTLSRouteStatus", reflect.TypeOf((*MockTLSRouteClient)(nil).PatchTLSRouteStatus), varargs...)
}

// UpdateTLSRoute mocks base method.
func (m *MockTLSRouteClient) UpdateTLSRoute(ctx context.Context, obj *v1alpha20.TLSRoute, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTLSRoute indicates an expected call of UpdateTLSRoute.
func (mr *MockTLSRouteClientMockRecorder) UpdateTLSRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTLSRoute", reflect.TypeOf((*MockTLSRouteClient)(nil).UpdateTLSRoute), varargs...)
}

// UpdateTLSRouteStatus mocks base method.
func (m *MockTLSRouteClient) UpdateTLSRouteStatus(ctx context.Context, obj *v1alpha20.TLSRoute, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTLSRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTLSRouteStatus indicates an expected call of UpdateTLSRouteStatus.
func (mr *MockTLSRouteClientMockRecorder) UpdateTLSRouteStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTLSRouteStatus", reflect.TypeOf((*MockTLSRouteClient)(nil).UpdateTLSRouteStatus), varargs...)
}

// UpsertTLSRoute mocks base method.
func (m *MockTLSRouteClient) UpsertTLSRoute(ctx context.Context, obj *v1alpha20.TLSRoute, transitionFuncs ...v1alpha2.TLSRouteTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTLSRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTLSRoute indicates an expected call of UpsertTLSRoute.
func (mr *MockTLSRouteClientMockRecorder) UpsertTLSRoute(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTLSRoute", reflect.TypeOf((*MockTLSRouteClient)(nil).UpsertTLSRoute), varargs...)
}

// MockMulticlusterTLSRouteClient is a mock of MulticlusterTLSRouteClient interface.
type MockMulticlusterTLSRouteClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTLSRouteClientMockRecorder
}

// MockMulticlusterTLSRouteClientMockRecorder is the mock recorder for MockMulticlusterTLSRouteClient.
type MockMulticlusterTLSRouteClientMockRecorder struct {
	mock *MockMulticlusterTLSRouteClient
}

// NewMockMulticlusterTLSRouteClient creates a new mock instance.
func NewMockMulticlusterTLSRouteClient(ctrl *gomock.Controller) *MockMulticlusterTLSRouteClient {
	mock := &MockMulticlusterTLSRouteClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTLSRouteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTLSRouteClient) EXPECT() *MockMulticlusterTLSRouteClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterTLSRouteClient) Cluster(cluster string) (v1alpha2.TLSRouteClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.TLSRouteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterTLSRouteClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterTLSRouteClient)(nil).Cluster), cluster)
}

// MockUDPRouteReader is a mock of UDPRouteReader interface.
type MockUDPRouteReader struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteReaderMockRecorder
}

// MockUDPRouteReaderMockRecorder is the mock recorder for MockUDPRouteReader.
type MockUDPRouteReaderMockRecorder struct {
	mock *MockUDPRouteReader
}

// NewMockUDPRouteReader creates a new mock instance.
func NewMockUDPRouteReader(ctrl *gomock.Controller) *MockUDPRouteReader {
	mock := &MockUDPRouteReader{ctrl: ctrl}
	mock.recorder = &MockUDPRouteReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteReader) EXPECT() *MockUDPRouteReaderMockRecorder {
	return m.recorder
}

// GetUDPRoute mocks base method.
func (m *MockUDPRouteReader) GetUDPRoute(ctx context.Context, key client.ObjectKey) (*v1alpha20.UDPRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUDPRoute", ctx, key)
	ret0, _ := ret[0].(*v1alpha20.UDPRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUDPRoute indicates an expected call of GetUDPRoute.
func (mr *MockUDPRouteReaderMockRecorder) GetUDPRoute(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUDPRoute", reflect.TypeOf((*MockUDPRouteReader)(nil).GetUDPRoute), ctx, key)
}

// ListUDPRoute mocks base method.
func (m *MockUDPRouteReader) ListUDPRoute(ctx context.Context, opts ...client.ListOption) (*v1alpha20.UDPRouteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUDPRoute", varargs...)
	ret0, _ := ret[0].(*v1alpha20.UDPRouteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUDPRoute indicates an expected call of ListUDPRoute.
func (mr *MockUDPRouteReaderMockRecorder) ListUDPRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUDPRoute", reflect.TypeOf((*MockUDPRouteReader)(nil).ListUDPRoute), varargs...)
}

// MockUDPRouteWriter is a mock of UDPRouteWriter interface.
type MockUDPRouteWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteWriterMockRecorder
}

// MockUDPRouteWriterMockRecorder is the mock recorder for MockUDPRouteWriter.
type MockUDPRouteWriterMockRecorder struct {
	mock *MockUDPRouteWriter
}

// NewMockUDPRouteWriter creates a new mock instance.
func NewMockUDPRouteWriter(ctrl *gomock.Controller) *MockUDPRouteWriter {
	mock := &MockUDPRouteWriter{ctrl: ctrl}
	mock.recorder = &MockUDPRouteWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteWriter) EXPECT() *MockUDPRouteWriterMockRecorder {
	return m.recorder
}

// CreateUDPRoute mocks base method.
func (m *MockUDPRouteWriter) CreateUDPRoute(ctx context.Context, obj *v1alpha20.UDPRoute, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUDPRoute indicates an expected call of CreateUDPRoute.
func (mr *MockUDPRouteWriterMockRecorder) CreateUDPRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUDPRoute", reflect.TypeOf((*MockUDPRouteWriter)(nil).CreateUDPRoute), varargs...)
}

// DeleteAllOfUDPRoute mocks base method.
func (m *MockUDPRouteWriter) DeleteAllOfUDPRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfUDPRoute indicates an expected call of DeleteAllOfUDPRoute.
func (mr *MockUDPRouteWriterMockRecorder) DeleteAllOfUDPRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfUDPRoute", reflect.TypeOf((*MockUDPRouteWriter)(nil).DeleteAllOfUDPRoute), varargs...)
}

// DeleteUDPRoute mocks base method.
func (m *MockUDPRouteWriter) DeleteUDPRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUDPRoute indicates an expected call of DeleteUDPRoute.
func (mr *MockUDPRouteWriterMockRecorder) DeleteUDPRoute(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUDPRoute", reflect.TypeOf((*MockUDPRouteWriter)(nil).DeleteUDPRoute), varargs...)
}

// PatchUDPRoute mocks base method.
func (m *MockUDPRouteWriter) PatchUDPRoute(ctx context.Context, obj *v1alpha20.UDPRoute, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchUDPRoute indicates an expected call of PatchUDPRoute.
func (mr *MockUDPRouteWriterMockRecorder) PatchUDPRoute(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUDPRoute", reflect.TypeOf((*MockUDPRouteWriter)(nil).PatchUDPRoute), varargs...)
}

// UpdateUDPRoute mocks base method.
func (m *MockUDPRouteWriter) UpdateUDPRoute(ctx context.Context, obj *v1alpha20.UDPRoute, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUDPRoute indicates an expected call of UpdateUDPRoute.
func (mr *MockUDPRouteWriterMockRecorder) UpdateUDPRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUDPRoute", reflect.TypeOf((*MockUDPRouteWriter)(nil).UpdateUDPRoute), varargs...)
}

// UpsertUDPRoute mocks base method.
func (m *MockUDPRouteWriter) UpsertUDPRoute(ctx context.Context, obj *v1alpha20.UDPRoute, transitionFuncs ...v1alpha2.UDPRouteTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUDPRoute indicates an expected call of UpsertUDPRoute.
func (mr *MockUDPRouteWriterMockRecorder) UpsertUDPRoute(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUDPRoute", reflect.TypeOf((*MockUDPRouteWriter)(nil).UpsertUDPRoute), varargs...)
}

// MockUDPRouteStatusWriter is a mock of UDPRouteStatusWriter interface.
type MockUDPRouteStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteStatusWriterMockRecorder
}

// MockUDPRouteStatusWriterMockRecorder is the mock recorder for MockUDPRouteStatusWriter.
type MockUDPRouteStatusWriterMockRecorder struct {
	mock *MockUDPRouteStatusWriter
}

// NewMockUDPRouteStatusWriter creates a new mock instance.
func NewMockUDPRouteStatusWriter(ctrl *gomock.Controller) *MockUDPRouteStatusWriter {
	mock := &MockUDPRouteStatusWriter{ctrl: ctrl}
	mock.recorder = &MockUDPRouteStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteStatusWriter) EXPECT() *MockUDPRouteStatusWriterMockRecorder {
	return m.recorder
}

// PatchUDPRouteStatus mocks base method.
func (m *MockUDPRouteStatusWriter) PatchUDPRouteStatus(ctx context.Context, obj *v1alpha20.UDPRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchUDPRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchUDPRouteStatus indicates an expected call of PatchUDPRouteStatus.
func (mr *MockUDPRouteStatusWriterMockRecorder) PatchUDPRouteStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUDPRouteStatus", reflect.TypeOf((*MockUDPRouteStatusWriter)(nil).PatchUDPRouteStatus), varargs...)
}

// UpdateUDPRouteStatus mocks base method.
func (m *MockUDPRouteStatusWriter) UpdateUDPRouteStatus(ctx context.Context, obj *v1alpha20.UDPRoute, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUDPRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUDPRouteStatus indicates an expected call of UpdateUDPRouteStatus.
func (mr *MockUDPRouteStatusWriterMockRecorder) UpdateUDPRouteStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUDPRouteStatus", reflect.TypeOf((*MockUDPRouteStatusWriter)(nil).UpdateUDPRouteStatus), varargs...)
}

// MockUDPRouteClient is a mock of UDPRouteClient interface.
type MockUDPRouteClient struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteClientMockRecorder
}

// MockUDPRouteClientMockRecorder is the mock recorder for MockUDPRouteClient.
type MockUDPRouteClientMockRecorder struct {
	mock *MockUDPRouteClient
}

// NewMockUDPRouteClient creates a new mock instance.
func NewMockUDPRouteClient(ctrl *gomock.Controller) *MockUDPRouteClient {
	mock := &MockUDPRouteClient{ctrl: ctrl}
	mock.recorder = &MockUDPRouteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteClient) EXPECT() *MockUDPRouteClientMockRecorder {
	return m.recorder
}

// CreateUDPRoute mocks base method.
func (m *MockUDPRouteClient) CreateUDPRoute(ctx context.Context, obj *v1alpha20.UDPRoute, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUDPRoute indicates an expected call of CreateUDPRoute.
func (mr *MockUDPRouteClientMockRecorder) CreateUDPRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUDPRoute", reflect.TypeOf((*MockUDPRouteClient)(nil).CreateUDPRoute), varargs...)
}

// DeleteAllOfUDPRoute mocks base method.
func (m *MockUDPRouteClient) DeleteAllOfUDPRoute(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfUDPRoute indicates an expected call of DeleteAllOfUDPRoute.
func (mr *MockUDPRouteClientMockRecorder) DeleteAllOfUDPRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfUDPRoute", reflect.TypeOf((*MockUDPRouteClient)(nil).DeleteAllOfUDPRoute), varargs...)
}

// DeleteUDPRoute mocks base method.
func (m *MockUDPRouteClient) DeleteUDPRoute(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUDPRoute indicates an expected call of DeleteUDPRoute.
func (mr *MockUDPRouteClientMockRecorder) DeleteUDPRoute(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUDPRoute", reflect.TypeOf((*MockUDPRouteClient)(nil).DeleteUDPRoute), varargs...)
}

// GetUDPRoute mocks base method.
func (m *MockUDPRouteClient) GetUDPRoute(ctx context.Context, key client.ObjectKey) (*v1alpha20.UDPRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUDPRoute", ctx, key)
	ret0, _ := ret[0].(*v1alpha20.UDPRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUDPRoute indicates an expected call of GetUDPRoute.
func (mr *MockUDPRouteClientMockRecorder) GetUDPRoute(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUDPRoute", reflect.TypeOf((*MockUDPRouteClient)(nil).GetUDPRoute), ctx, key)
}

// ListUDPRoute mocks base method.
func (m *MockUDPRouteClient) ListUDPRoute(ctx context.Context, opts ...client.ListOption) (*v1alpha20.UDPRouteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUDPRoute", varargs...)
	ret0, _ := ret[0].(*v1alpha20.UDPRouteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUDPRoute indicates an expected call of ListUDPRoute.
func (mr *MockUDPRouteClientMockRecorder) ListUDPRoute(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUDPRoute", reflect.TypeOf((*MockUDPRouteClient)(nil).ListUDPRoute), varargs...)
}

// PatchUDPRoute mocks base method.
func (m *MockUDPRouteClient) PatchUDPRoute(ctx context.Context, obj *v1alpha20.UDPRoute, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchUDPRoute indicates an expected call of PatchUDPRoute.
func (mr *MockUDPRouteClientMockRecorder) PatchUDPRoute(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUDPRoute", reflect.TypeOf((*MockUDPRouteClient)(nil).PatchUDPRoute), varargs...)
}

// PatchUDPRouteStatus mocks base method.
func (m *MockUDPRouteClient) PatchUDPRouteStatus(ctx context.Context, obj *v1alpha20.UDPRoute, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchUDPRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchUDPRouteStatus indicates an expected call of PatchUDPRouteStatus.
func (mr *MockUDPRouteClientMockRecorder) PatchUDPRouteStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUDPRouteStatus", reflect.TypeOf((*MockUDPRouteClient)(nil).PatchUDPRouteStatus), varargs...)
}

// UpdateUDPRoute mocks base method.
func (m *MockUDPRouteClient) UpdateUDPRoute(ctx context.Context, obj *v1alpha20.UDPRoute, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUDPRoute indicates an expected call of UpdateUDPRoute.
func (mr *MockUDPRouteClientMockRecorder) UpdateUDPRoute(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUDPRoute", reflect.TypeOf((*MockUDPRouteClient)(nil).UpdateUDPRoute), varargs...)
}

// UpdateUDPRouteStatus mocks base method.
func (m *MockUDPRouteClient) UpdateUDPRouteStatus(ctx context.Context, obj *v1alpha20.UDPRoute, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUDPRouteStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUDPRouteStatus indicates an expected call of UpdateUDPRouteStatus.
func (mr *MockUDPRouteClientMockRecorder) UpdateUDPRouteStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUDPRouteStatus", reflect.TypeOf((*MockUDPRouteClient)(nil).UpdateUDPRouteStatus), varargs...)
}

// UpsertUDPRoute mocks base method.
func (m *MockUDPRouteClient) UpsertUDPRoute(ctx context.Context, obj *v1alpha20.UDPRoute, transitionFuncs ...v1alpha2.UDPRouteTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertUDPRoute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUDPRoute indicates an expected call of UpsertUDPRoute.
func (mr *MockUDPRouteClientMockRecorder) UpsertUDPRoute(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUDPRoute", reflect.TypeOf((*MockUDPRouteClient)(nil).UpsertUDPRoute), varargs...)
}

// MockMulticlusterUDPRouteClient is a mock of MulticlusterUDPRouteClient interface.
type MockMulticlusterUDPRouteClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterUDPRouteClientMockRecorder
}

// MockMulticlusterUDPRouteClientMockRecorder is the mock recorder for MockMulticlusterUDPRouteClient.
type MockMulticlusterUDPRouteClientMockRecorder struct {
	mock *MockMulticlusterUDPRouteClient
}

// NewMockMulticlusterUDPRouteClient creates a new mock instance.
func NewMockMulticlusterUDPRouteClient(ctrl *gomock.Controller) *MockMulticlusterUDPRouteClient {
	mock := &MockMulticlusterUDPRouteClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterUDPRouteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterUDPRouteClient) EXPECT() *MockMulticlusterUDPRouteClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterUDPRouteClient) Cluster(cluster string) (v1alpha2.UDPRouteClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha2.UDPRouteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterUDPRouteClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterUDPRouteClient)(nil).Cluster), cluster)
}

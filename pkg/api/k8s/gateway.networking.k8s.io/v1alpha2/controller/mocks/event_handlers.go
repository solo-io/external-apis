// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/gateway.networking.k8s.io/v1alpha2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
	v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// MockGRPCRouteEventHandler is a mock of GRPCRouteEventHandler interface.
type MockGRPCRouteEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteEventHandlerMockRecorder
}

// MockGRPCRouteEventHandlerMockRecorder is the mock recorder for MockGRPCRouteEventHandler.
type MockGRPCRouteEventHandlerMockRecorder struct {
	mock *MockGRPCRouteEventHandler
}

// NewMockGRPCRouteEventHandler creates a new mock instance.
func NewMockGRPCRouteEventHandler(ctrl *gomock.Controller) *MockGRPCRouteEventHandler {
	mock := &MockGRPCRouteEventHandler{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteEventHandler) EXPECT() *MockGRPCRouteEventHandlerMockRecorder {
	return m.recorder
}

// CreateGRPCRoute mocks base method.
func (m *MockGRPCRouteEventHandler) CreateGRPCRoute(obj *v1alpha2.GRPCRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGRPCRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGRPCRoute indicates an expected call of CreateGRPCRoute.
func (mr *MockGRPCRouteEventHandlerMockRecorder) CreateGRPCRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGRPCRoute", reflect.TypeOf((*MockGRPCRouteEventHandler)(nil).CreateGRPCRoute), obj)
}

// DeleteGRPCRoute mocks base method.
func (m *MockGRPCRouteEventHandler) DeleteGRPCRoute(obj *v1alpha2.GRPCRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGRPCRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGRPCRoute indicates an expected call of DeleteGRPCRoute.
func (mr *MockGRPCRouteEventHandlerMockRecorder) DeleteGRPCRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGRPCRoute", reflect.TypeOf((*MockGRPCRouteEventHandler)(nil).DeleteGRPCRoute), obj)
}

// GenericGRPCRoute mocks base method.
func (m *MockGRPCRouteEventHandler) GenericGRPCRoute(obj *v1alpha2.GRPCRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGRPCRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGRPCRoute indicates an expected call of GenericGRPCRoute.
func (mr *MockGRPCRouteEventHandlerMockRecorder) GenericGRPCRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGRPCRoute", reflect.TypeOf((*MockGRPCRouteEventHandler)(nil).GenericGRPCRoute), obj)
}

// UpdateGRPCRoute mocks base method.
func (m *MockGRPCRouteEventHandler) UpdateGRPCRoute(old, new *v1alpha2.GRPCRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGRPCRoute", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGRPCRoute indicates an expected call of UpdateGRPCRoute.
func (mr *MockGRPCRouteEventHandlerMockRecorder) UpdateGRPCRoute(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGRPCRoute", reflect.TypeOf((*MockGRPCRouteEventHandler)(nil).UpdateGRPCRoute), old, new)
}

// MockGRPCRouteEventWatcher is a mock of GRPCRouteEventWatcher interface.
type MockGRPCRouteEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteEventWatcherMockRecorder
}

// MockGRPCRouteEventWatcherMockRecorder is the mock recorder for MockGRPCRouteEventWatcher.
type MockGRPCRouteEventWatcherMockRecorder struct {
	mock *MockGRPCRouteEventWatcher
}

// NewMockGRPCRouteEventWatcher creates a new mock instance.
func NewMockGRPCRouteEventWatcher(ctrl *gomock.Controller) *MockGRPCRouteEventWatcher {
	mock := &MockGRPCRouteEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteEventWatcher) EXPECT() *MockGRPCRouteEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockGRPCRouteEventWatcher) AddEventHandler(ctx context.Context, h controller.GRPCRouteEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockGRPCRouteEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGRPCRouteEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockTCPRouteEventHandler is a mock of TCPRouteEventHandler interface.
type MockTCPRouteEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteEventHandlerMockRecorder
}

// MockTCPRouteEventHandlerMockRecorder is the mock recorder for MockTCPRouteEventHandler.
type MockTCPRouteEventHandlerMockRecorder struct {
	mock *MockTCPRouteEventHandler
}

// NewMockTCPRouteEventHandler creates a new mock instance.
func NewMockTCPRouteEventHandler(ctrl *gomock.Controller) *MockTCPRouteEventHandler {
	mock := &MockTCPRouteEventHandler{ctrl: ctrl}
	mock.recorder = &MockTCPRouteEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteEventHandler) EXPECT() *MockTCPRouteEventHandlerMockRecorder {
	return m.recorder
}

// CreateTCPRoute mocks base method.
func (m *MockTCPRouteEventHandler) CreateTCPRoute(obj *v1alpha2.TCPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTCPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTCPRoute indicates an expected call of CreateTCPRoute.
func (mr *MockTCPRouteEventHandlerMockRecorder) CreateTCPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTCPRoute", reflect.TypeOf((*MockTCPRouteEventHandler)(nil).CreateTCPRoute), obj)
}

// DeleteTCPRoute mocks base method.
func (m *MockTCPRouteEventHandler) DeleteTCPRoute(obj *v1alpha2.TCPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTCPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTCPRoute indicates an expected call of DeleteTCPRoute.
func (mr *MockTCPRouteEventHandlerMockRecorder) DeleteTCPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTCPRoute", reflect.TypeOf((*MockTCPRouteEventHandler)(nil).DeleteTCPRoute), obj)
}

// GenericTCPRoute mocks base method.
func (m *MockTCPRouteEventHandler) GenericTCPRoute(obj *v1alpha2.TCPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericTCPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericTCPRoute indicates an expected call of GenericTCPRoute.
func (mr *MockTCPRouteEventHandlerMockRecorder) GenericTCPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericTCPRoute", reflect.TypeOf((*MockTCPRouteEventHandler)(nil).GenericTCPRoute), obj)
}

// UpdateTCPRoute mocks base method.
func (m *MockTCPRouteEventHandler) UpdateTCPRoute(old, new *v1alpha2.TCPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTCPRoute", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTCPRoute indicates an expected call of UpdateTCPRoute.
func (mr *MockTCPRouteEventHandlerMockRecorder) UpdateTCPRoute(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTCPRoute", reflect.TypeOf((*MockTCPRouteEventHandler)(nil).UpdateTCPRoute), old, new)
}

// MockTCPRouteEventWatcher is a mock of TCPRouteEventWatcher interface.
type MockTCPRouteEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteEventWatcherMockRecorder
}

// MockTCPRouteEventWatcherMockRecorder is the mock recorder for MockTCPRouteEventWatcher.
type MockTCPRouteEventWatcherMockRecorder struct {
	mock *MockTCPRouteEventWatcher
}

// NewMockTCPRouteEventWatcher creates a new mock instance.
func NewMockTCPRouteEventWatcher(ctrl *gomock.Controller) *MockTCPRouteEventWatcher {
	mock := &MockTCPRouteEventWatcher{ctrl: ctrl}
	mock.recorder = &MockTCPRouteEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteEventWatcher) EXPECT() *MockTCPRouteEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockTCPRouteEventWatcher) AddEventHandler(ctx context.Context, h controller.TCPRouteEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockTCPRouteEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockTCPRouteEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockTLSRouteEventHandler is a mock of TLSRouteEventHandler interface.
type MockTLSRouteEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteEventHandlerMockRecorder
}

// MockTLSRouteEventHandlerMockRecorder is the mock recorder for MockTLSRouteEventHandler.
type MockTLSRouteEventHandlerMockRecorder struct {
	mock *MockTLSRouteEventHandler
}

// NewMockTLSRouteEventHandler creates a new mock instance.
func NewMockTLSRouteEventHandler(ctrl *gomock.Controller) *MockTLSRouteEventHandler {
	mock := &MockTLSRouteEventHandler{ctrl: ctrl}
	mock.recorder = &MockTLSRouteEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteEventHandler) EXPECT() *MockTLSRouteEventHandlerMockRecorder {
	return m.recorder
}

// CreateTLSRoute mocks base method.
func (m *MockTLSRouteEventHandler) CreateTLSRoute(obj *v1alpha2.TLSRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTLSRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTLSRoute indicates an expected call of CreateTLSRoute.
func (mr *MockTLSRouteEventHandlerMockRecorder) CreateTLSRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTLSRoute", reflect.TypeOf((*MockTLSRouteEventHandler)(nil).CreateTLSRoute), obj)
}

// DeleteTLSRoute mocks base method.
func (m *MockTLSRouteEventHandler) DeleteTLSRoute(obj *v1alpha2.TLSRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTLSRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTLSRoute indicates an expected call of DeleteTLSRoute.
func (mr *MockTLSRouteEventHandlerMockRecorder) DeleteTLSRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTLSRoute", reflect.TypeOf((*MockTLSRouteEventHandler)(nil).DeleteTLSRoute), obj)
}

// GenericTLSRoute mocks base method.
func (m *MockTLSRouteEventHandler) GenericTLSRoute(obj *v1alpha2.TLSRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericTLSRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericTLSRoute indicates an expected call of GenericTLSRoute.
func (mr *MockTLSRouteEventHandlerMockRecorder) GenericTLSRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericTLSRoute", reflect.TypeOf((*MockTLSRouteEventHandler)(nil).GenericTLSRoute), obj)
}

// UpdateTLSRoute mocks base method.
func (m *MockTLSRouteEventHandler) UpdateTLSRoute(old, new *v1alpha2.TLSRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTLSRoute", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTLSRoute indicates an expected call of UpdateTLSRoute.
func (mr *MockTLSRouteEventHandlerMockRecorder) UpdateTLSRoute(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTLSRoute", reflect.TypeOf((*MockTLSRouteEventHandler)(nil).UpdateTLSRoute), old, new)
}

// MockTLSRouteEventWatcher is a mock of TLSRouteEventWatcher interface.
type MockTLSRouteEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteEventWatcherMockRecorder
}

// MockTLSRouteEventWatcherMockRecorder is the mock recorder for MockTLSRouteEventWatcher.
type MockTLSRouteEventWatcherMockRecorder struct {
	mock *MockTLSRouteEventWatcher
}

// NewMockTLSRouteEventWatcher creates a new mock instance.
func NewMockTLSRouteEventWatcher(ctrl *gomock.Controller) *MockTLSRouteEventWatcher {
	mock := &MockTLSRouteEventWatcher{ctrl: ctrl}
	mock.recorder = &MockTLSRouteEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteEventWatcher) EXPECT() *MockTLSRouteEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockTLSRouteEventWatcher) AddEventHandler(ctx context.Context, h controller.TLSRouteEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockTLSRouteEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockTLSRouteEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockUDPRouteEventHandler is a mock of UDPRouteEventHandler interface.
type MockUDPRouteEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteEventHandlerMockRecorder
}

// MockUDPRouteEventHandlerMockRecorder is the mock recorder for MockUDPRouteEventHandler.
type MockUDPRouteEventHandlerMockRecorder struct {
	mock *MockUDPRouteEventHandler
}

// NewMockUDPRouteEventHandler creates a new mock instance.
func NewMockUDPRouteEventHandler(ctrl *gomock.Controller) *MockUDPRouteEventHandler {
	mock := &MockUDPRouteEventHandler{ctrl: ctrl}
	mock.recorder = &MockUDPRouteEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteEventHandler) EXPECT() *MockUDPRouteEventHandlerMockRecorder {
	return m.recorder
}

// CreateUDPRoute mocks base method.
func (m *MockUDPRouteEventHandler) CreateUDPRoute(obj *v1alpha2.UDPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUDPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUDPRoute indicates an expected call of CreateUDPRoute.
func (mr *MockUDPRouteEventHandlerMockRecorder) CreateUDPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUDPRoute", reflect.TypeOf((*MockUDPRouteEventHandler)(nil).CreateUDPRoute), obj)
}

// DeleteUDPRoute mocks base method.
func (m *MockUDPRouteEventHandler) DeleteUDPRoute(obj *v1alpha2.UDPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUDPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUDPRoute indicates an expected call of DeleteUDPRoute.
func (mr *MockUDPRouteEventHandlerMockRecorder) DeleteUDPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUDPRoute", reflect.TypeOf((*MockUDPRouteEventHandler)(nil).DeleteUDPRoute), obj)
}

// GenericUDPRoute mocks base method.
func (m *MockUDPRouteEventHandler) GenericUDPRoute(obj *v1alpha2.UDPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericUDPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericUDPRoute indicates an expected call of GenericUDPRoute.
func (mr *MockUDPRouteEventHandlerMockRecorder) GenericUDPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericUDPRoute", reflect.TypeOf((*MockUDPRouteEventHandler)(nil).GenericUDPRoute), obj)
}

// UpdateUDPRoute mocks base method.
func (m *MockUDPRouteEventHandler) UpdateUDPRoute(old, new *v1alpha2.UDPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUDPRoute", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUDPRoute indicates an expected call of UpdateUDPRoute.
func (mr *MockUDPRouteEventHandlerMockRecorder) UpdateUDPRoute(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUDPRoute", reflect.TypeOf((*MockUDPRouteEventHandler)(nil).UpdateUDPRoute), old, new)
}

// MockUDPRouteEventWatcher is a mock of UDPRouteEventWatcher interface.
type MockUDPRouteEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteEventWatcherMockRecorder
}

// MockUDPRouteEventWatcherMockRecorder is the mock recorder for MockUDPRouteEventWatcher.
type MockUDPRouteEventWatcherMockRecorder struct {
	mock *MockUDPRouteEventWatcher
}

// NewMockUDPRouteEventWatcher creates a new mock instance.
func NewMockUDPRouteEventWatcher(ctrl *gomock.Controller) *MockUDPRouteEventWatcher {
	mock := &MockUDPRouteEventWatcher{ctrl: ctrl}
	mock.recorder = &MockUDPRouteEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteEventWatcher) EXPECT() *MockUDPRouteEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockUDPRouteEventWatcher) AddEventHandler(ctx context.Context, h controller.UDPRouteEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockUDPRouteEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockUDPRouteEventWatcher)(nil).AddEventHandler), varargs...)
}

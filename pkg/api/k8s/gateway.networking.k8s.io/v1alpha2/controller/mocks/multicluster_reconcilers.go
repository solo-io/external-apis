// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/gateway.networking.k8s.io/v1alpha2/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
	v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// MockMulticlusterReferenceGrantReconciler is a mock of MulticlusterReferenceGrantReconciler interface.
type MockMulticlusterReferenceGrantReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterReferenceGrantReconcilerMockRecorder
}

// MockMulticlusterReferenceGrantReconcilerMockRecorder is the mock recorder for MockMulticlusterReferenceGrantReconciler.
type MockMulticlusterReferenceGrantReconcilerMockRecorder struct {
	mock *MockMulticlusterReferenceGrantReconciler
}

// NewMockMulticlusterReferenceGrantReconciler creates a new mock instance.
func NewMockMulticlusterReferenceGrantReconciler(ctrl *gomock.Controller) *MockMulticlusterReferenceGrantReconciler {
	mock := &MockMulticlusterReferenceGrantReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterReferenceGrantReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterReferenceGrantReconciler) EXPECT() *MockMulticlusterReferenceGrantReconcilerMockRecorder {
	return m.recorder
}

// ReconcileReferenceGrant mocks base method.
func (m *MockMulticlusterReferenceGrantReconciler) ReconcileReferenceGrant(clusterName string, obj *v1alpha2.ReferenceGrant) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileReferenceGrant", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileReferenceGrant indicates an expected call of ReconcileReferenceGrant.
func (mr *MockMulticlusterReferenceGrantReconcilerMockRecorder) ReconcileReferenceGrant(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileReferenceGrant", reflect.TypeOf((*MockMulticlusterReferenceGrantReconciler)(nil).ReconcileReferenceGrant), clusterName, obj)
}

// MockMulticlusterReferenceGrantDeletionReconciler is a mock of MulticlusterReferenceGrantDeletionReconciler interface.
type MockMulticlusterReferenceGrantDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterReferenceGrantDeletionReconcilerMockRecorder
}

// MockMulticlusterReferenceGrantDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterReferenceGrantDeletionReconciler.
type MockMulticlusterReferenceGrantDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterReferenceGrantDeletionReconciler
}

// NewMockMulticlusterReferenceGrantDeletionReconciler creates a new mock instance.
func NewMockMulticlusterReferenceGrantDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterReferenceGrantDeletionReconciler {
	mock := &MockMulticlusterReferenceGrantDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterReferenceGrantDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterReferenceGrantDeletionReconciler) EXPECT() *MockMulticlusterReferenceGrantDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileReferenceGrantDeletion mocks base method.
func (m *MockMulticlusterReferenceGrantDeletionReconciler) ReconcileReferenceGrantDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileReferenceGrantDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileReferenceGrantDeletion indicates an expected call of ReconcileReferenceGrantDeletion.
func (mr *MockMulticlusterReferenceGrantDeletionReconcilerMockRecorder) ReconcileReferenceGrantDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileReferenceGrantDeletion", reflect.TypeOf((*MockMulticlusterReferenceGrantDeletionReconciler)(nil).ReconcileReferenceGrantDeletion), clusterName, req)
}

// MockMulticlusterReferenceGrantReconcileLoop is a mock of MulticlusterReferenceGrantReconcileLoop interface.
type MockMulticlusterReferenceGrantReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterReferenceGrantReconcileLoopMockRecorder
}

// MockMulticlusterReferenceGrantReconcileLoopMockRecorder is the mock recorder for MockMulticlusterReferenceGrantReconcileLoop.
type MockMulticlusterReferenceGrantReconcileLoopMockRecorder struct {
	mock *MockMulticlusterReferenceGrantReconcileLoop
}

// NewMockMulticlusterReferenceGrantReconcileLoop creates a new mock instance.
func NewMockMulticlusterReferenceGrantReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterReferenceGrantReconcileLoop {
	mock := &MockMulticlusterReferenceGrantReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterReferenceGrantReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterReferenceGrantReconcileLoop) EXPECT() *MockMulticlusterReferenceGrantReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterReferenceGrantReconciler mocks base method.
func (m *MockMulticlusterReferenceGrantReconcileLoop) AddMulticlusterReferenceGrantReconciler(ctx context.Context, rec controller.MulticlusterReferenceGrantReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterReferenceGrantReconciler", varargs...)
}

// AddMulticlusterReferenceGrantReconciler indicates an expected call of AddMulticlusterReferenceGrantReconciler.
func (mr *MockMulticlusterReferenceGrantReconcileLoopMockRecorder) AddMulticlusterReferenceGrantReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterReferenceGrantReconciler", reflect.TypeOf((*MockMulticlusterReferenceGrantReconcileLoop)(nil).AddMulticlusterReferenceGrantReconciler), varargs...)
}

// MockMulticlusterGRPCRouteReconciler is a mock of MulticlusterGRPCRouteReconciler interface.
type MockMulticlusterGRPCRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGRPCRouteReconcilerMockRecorder
}

// MockMulticlusterGRPCRouteReconcilerMockRecorder is the mock recorder for MockMulticlusterGRPCRouteReconciler.
type MockMulticlusterGRPCRouteReconcilerMockRecorder struct {
	mock *MockMulticlusterGRPCRouteReconciler
}

// NewMockMulticlusterGRPCRouteReconciler creates a new mock instance.
func NewMockMulticlusterGRPCRouteReconciler(ctrl *gomock.Controller) *MockMulticlusterGRPCRouteReconciler {
	mock := &MockMulticlusterGRPCRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGRPCRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGRPCRouteReconciler) EXPECT() *MockMulticlusterGRPCRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGRPCRoute mocks base method.
func (m *MockMulticlusterGRPCRouteReconciler) ReconcileGRPCRoute(clusterName string, obj *v1alpha2.GRPCRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGRPCRoute", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGRPCRoute indicates an expected call of ReconcileGRPCRoute.
func (mr *MockMulticlusterGRPCRouteReconcilerMockRecorder) ReconcileGRPCRoute(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGRPCRoute", reflect.TypeOf((*MockMulticlusterGRPCRouteReconciler)(nil).ReconcileGRPCRoute), clusterName, obj)
}

// MockMulticlusterGRPCRouteDeletionReconciler is a mock of MulticlusterGRPCRouteDeletionReconciler interface.
type MockMulticlusterGRPCRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGRPCRouteDeletionReconcilerMockRecorder
}

// MockMulticlusterGRPCRouteDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGRPCRouteDeletionReconciler.
type MockMulticlusterGRPCRouteDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGRPCRouteDeletionReconciler
}

// NewMockMulticlusterGRPCRouteDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGRPCRouteDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGRPCRouteDeletionReconciler {
	mock := &MockMulticlusterGRPCRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGRPCRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGRPCRouteDeletionReconciler) EXPECT() *MockMulticlusterGRPCRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGRPCRouteDeletion mocks base method.
func (m *MockMulticlusterGRPCRouteDeletionReconciler) ReconcileGRPCRouteDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGRPCRouteDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGRPCRouteDeletion indicates an expected call of ReconcileGRPCRouteDeletion.
func (mr *MockMulticlusterGRPCRouteDeletionReconcilerMockRecorder) ReconcileGRPCRouteDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGRPCRouteDeletion", reflect.TypeOf((*MockMulticlusterGRPCRouteDeletionReconciler)(nil).ReconcileGRPCRouteDeletion), clusterName, req)
}

// MockMulticlusterGRPCRouteReconcileLoop is a mock of MulticlusterGRPCRouteReconcileLoop interface.
type MockMulticlusterGRPCRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGRPCRouteReconcileLoopMockRecorder
}

// MockMulticlusterGRPCRouteReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGRPCRouteReconcileLoop.
type MockMulticlusterGRPCRouteReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGRPCRouteReconcileLoop
}

// NewMockMulticlusterGRPCRouteReconcileLoop creates a new mock instance.
func NewMockMulticlusterGRPCRouteReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGRPCRouteReconcileLoop {
	mock := &MockMulticlusterGRPCRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGRPCRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGRPCRouteReconcileLoop) EXPECT() *MockMulticlusterGRPCRouteReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGRPCRouteReconciler mocks base method.
func (m *MockMulticlusterGRPCRouteReconcileLoop) AddMulticlusterGRPCRouteReconciler(ctx context.Context, rec controller.MulticlusterGRPCRouteReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGRPCRouteReconciler", varargs...)
}

// AddMulticlusterGRPCRouteReconciler indicates an expected call of AddMulticlusterGRPCRouteReconciler.
func (mr *MockMulticlusterGRPCRouteReconcileLoopMockRecorder) AddMulticlusterGRPCRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGRPCRouteReconciler", reflect.TypeOf((*MockMulticlusterGRPCRouteReconcileLoop)(nil).AddMulticlusterGRPCRouteReconciler), varargs...)
}

// MockMulticlusterTCPRouteReconciler is a mock of MulticlusterTCPRouteReconciler interface.
type MockMulticlusterTCPRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTCPRouteReconcilerMockRecorder
}

// MockMulticlusterTCPRouteReconcilerMockRecorder is the mock recorder for MockMulticlusterTCPRouteReconciler.
type MockMulticlusterTCPRouteReconcilerMockRecorder struct {
	mock *MockMulticlusterTCPRouteReconciler
}

// NewMockMulticlusterTCPRouteReconciler creates a new mock instance.
func NewMockMulticlusterTCPRouteReconciler(ctrl *gomock.Controller) *MockMulticlusterTCPRouteReconciler {
	mock := &MockMulticlusterTCPRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTCPRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTCPRouteReconciler) EXPECT() *MockMulticlusterTCPRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTCPRoute mocks base method.
func (m *MockMulticlusterTCPRouteReconciler) ReconcileTCPRoute(clusterName string, obj *v1alpha2.TCPRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTCPRoute", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTCPRoute indicates an expected call of ReconcileTCPRoute.
func (mr *MockMulticlusterTCPRouteReconcilerMockRecorder) ReconcileTCPRoute(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTCPRoute", reflect.TypeOf((*MockMulticlusterTCPRouteReconciler)(nil).ReconcileTCPRoute), clusterName, obj)
}

// MockMulticlusterTCPRouteDeletionReconciler is a mock of MulticlusterTCPRouteDeletionReconciler interface.
type MockMulticlusterTCPRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTCPRouteDeletionReconcilerMockRecorder
}

// MockMulticlusterTCPRouteDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterTCPRouteDeletionReconciler.
type MockMulticlusterTCPRouteDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterTCPRouteDeletionReconciler
}

// NewMockMulticlusterTCPRouteDeletionReconciler creates a new mock instance.
func NewMockMulticlusterTCPRouteDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterTCPRouteDeletionReconciler {
	mock := &MockMulticlusterTCPRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTCPRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTCPRouteDeletionReconciler) EXPECT() *MockMulticlusterTCPRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTCPRouteDeletion mocks base method.
func (m *MockMulticlusterTCPRouteDeletionReconciler) ReconcileTCPRouteDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTCPRouteDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTCPRouteDeletion indicates an expected call of ReconcileTCPRouteDeletion.
func (mr *MockMulticlusterTCPRouteDeletionReconcilerMockRecorder) ReconcileTCPRouteDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTCPRouteDeletion", reflect.TypeOf((*MockMulticlusterTCPRouteDeletionReconciler)(nil).ReconcileTCPRouteDeletion), clusterName, req)
}

// MockMulticlusterTCPRouteReconcileLoop is a mock of MulticlusterTCPRouteReconcileLoop interface.
type MockMulticlusterTCPRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTCPRouteReconcileLoopMockRecorder
}

// MockMulticlusterTCPRouteReconcileLoopMockRecorder is the mock recorder for MockMulticlusterTCPRouteReconcileLoop.
type MockMulticlusterTCPRouteReconcileLoopMockRecorder struct {
	mock *MockMulticlusterTCPRouteReconcileLoop
}

// NewMockMulticlusterTCPRouteReconcileLoop creates a new mock instance.
func NewMockMulticlusterTCPRouteReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterTCPRouteReconcileLoop {
	mock := &MockMulticlusterTCPRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTCPRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTCPRouteReconcileLoop) EXPECT() *MockMulticlusterTCPRouteReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterTCPRouteReconciler mocks base method.
func (m *MockMulticlusterTCPRouteReconcileLoop) AddMulticlusterTCPRouteReconciler(ctx context.Context, rec controller.MulticlusterTCPRouteReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterTCPRouteReconciler", varargs...)
}

// AddMulticlusterTCPRouteReconciler indicates an expected call of AddMulticlusterTCPRouteReconciler.
func (mr *MockMulticlusterTCPRouteReconcileLoopMockRecorder) AddMulticlusterTCPRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterTCPRouteReconciler", reflect.TypeOf((*MockMulticlusterTCPRouteReconcileLoop)(nil).AddMulticlusterTCPRouteReconciler), varargs...)
}

// MockMulticlusterTLSRouteReconciler is a mock of MulticlusterTLSRouteReconciler interface.
type MockMulticlusterTLSRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTLSRouteReconcilerMockRecorder
}

// MockMulticlusterTLSRouteReconcilerMockRecorder is the mock recorder for MockMulticlusterTLSRouteReconciler.
type MockMulticlusterTLSRouteReconcilerMockRecorder struct {
	mock *MockMulticlusterTLSRouteReconciler
}

// NewMockMulticlusterTLSRouteReconciler creates a new mock instance.
func NewMockMulticlusterTLSRouteReconciler(ctrl *gomock.Controller) *MockMulticlusterTLSRouteReconciler {
	mock := &MockMulticlusterTLSRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTLSRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTLSRouteReconciler) EXPECT() *MockMulticlusterTLSRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTLSRoute mocks base method.
func (m *MockMulticlusterTLSRouteReconciler) ReconcileTLSRoute(clusterName string, obj *v1alpha2.TLSRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTLSRoute", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTLSRoute indicates an expected call of ReconcileTLSRoute.
func (mr *MockMulticlusterTLSRouteReconcilerMockRecorder) ReconcileTLSRoute(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTLSRoute", reflect.TypeOf((*MockMulticlusterTLSRouteReconciler)(nil).ReconcileTLSRoute), clusterName, obj)
}

// MockMulticlusterTLSRouteDeletionReconciler is a mock of MulticlusterTLSRouteDeletionReconciler interface.
type MockMulticlusterTLSRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTLSRouteDeletionReconcilerMockRecorder
}

// MockMulticlusterTLSRouteDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterTLSRouteDeletionReconciler.
type MockMulticlusterTLSRouteDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterTLSRouteDeletionReconciler
}

// NewMockMulticlusterTLSRouteDeletionReconciler creates a new mock instance.
func NewMockMulticlusterTLSRouteDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterTLSRouteDeletionReconciler {
	mock := &MockMulticlusterTLSRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTLSRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTLSRouteDeletionReconciler) EXPECT() *MockMulticlusterTLSRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTLSRouteDeletion mocks base method.
func (m *MockMulticlusterTLSRouteDeletionReconciler) ReconcileTLSRouteDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTLSRouteDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTLSRouteDeletion indicates an expected call of ReconcileTLSRouteDeletion.
func (mr *MockMulticlusterTLSRouteDeletionReconcilerMockRecorder) ReconcileTLSRouteDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTLSRouteDeletion", reflect.TypeOf((*MockMulticlusterTLSRouteDeletionReconciler)(nil).ReconcileTLSRouteDeletion), clusterName, req)
}

// MockMulticlusterTLSRouteReconcileLoop is a mock of MulticlusterTLSRouteReconcileLoop interface.
type MockMulticlusterTLSRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTLSRouteReconcileLoopMockRecorder
}

// MockMulticlusterTLSRouteReconcileLoopMockRecorder is the mock recorder for MockMulticlusterTLSRouteReconcileLoop.
type MockMulticlusterTLSRouteReconcileLoopMockRecorder struct {
	mock *MockMulticlusterTLSRouteReconcileLoop
}

// NewMockMulticlusterTLSRouteReconcileLoop creates a new mock instance.
func NewMockMulticlusterTLSRouteReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterTLSRouteReconcileLoop {
	mock := &MockMulticlusterTLSRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTLSRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTLSRouteReconcileLoop) EXPECT() *MockMulticlusterTLSRouteReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterTLSRouteReconciler mocks base method.
func (m *MockMulticlusterTLSRouteReconcileLoop) AddMulticlusterTLSRouteReconciler(ctx context.Context, rec controller.MulticlusterTLSRouteReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterTLSRouteReconciler", varargs...)
}

// AddMulticlusterTLSRouteReconciler indicates an expected call of AddMulticlusterTLSRouteReconciler.
func (mr *MockMulticlusterTLSRouteReconcileLoopMockRecorder) AddMulticlusterTLSRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterTLSRouteReconciler", reflect.TypeOf((*MockMulticlusterTLSRouteReconcileLoop)(nil).AddMulticlusterTLSRouteReconciler), varargs...)
}

// MockMulticlusterUDPRouteReconciler is a mock of MulticlusterUDPRouteReconciler interface.
type MockMulticlusterUDPRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterUDPRouteReconcilerMockRecorder
}

// MockMulticlusterUDPRouteReconcilerMockRecorder is the mock recorder for MockMulticlusterUDPRouteReconciler.
type MockMulticlusterUDPRouteReconcilerMockRecorder struct {
	mock *MockMulticlusterUDPRouteReconciler
}

// NewMockMulticlusterUDPRouteReconciler creates a new mock instance.
func NewMockMulticlusterUDPRouteReconciler(ctrl *gomock.Controller) *MockMulticlusterUDPRouteReconciler {
	mock := &MockMulticlusterUDPRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterUDPRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterUDPRouteReconciler) EXPECT() *MockMulticlusterUDPRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileUDPRoute mocks base method.
func (m *MockMulticlusterUDPRouteReconciler) ReconcileUDPRoute(clusterName string, obj *v1alpha2.UDPRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileUDPRoute", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileUDPRoute indicates an expected call of ReconcileUDPRoute.
func (mr *MockMulticlusterUDPRouteReconcilerMockRecorder) ReconcileUDPRoute(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileUDPRoute", reflect.TypeOf((*MockMulticlusterUDPRouteReconciler)(nil).ReconcileUDPRoute), clusterName, obj)
}

// MockMulticlusterUDPRouteDeletionReconciler is a mock of MulticlusterUDPRouteDeletionReconciler interface.
type MockMulticlusterUDPRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterUDPRouteDeletionReconcilerMockRecorder
}

// MockMulticlusterUDPRouteDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterUDPRouteDeletionReconciler.
type MockMulticlusterUDPRouteDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterUDPRouteDeletionReconciler
}

// NewMockMulticlusterUDPRouteDeletionReconciler creates a new mock instance.
func NewMockMulticlusterUDPRouteDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterUDPRouteDeletionReconciler {
	mock := &MockMulticlusterUDPRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterUDPRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterUDPRouteDeletionReconciler) EXPECT() *MockMulticlusterUDPRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileUDPRouteDeletion mocks base method.
func (m *MockMulticlusterUDPRouteDeletionReconciler) ReconcileUDPRouteDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileUDPRouteDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileUDPRouteDeletion indicates an expected call of ReconcileUDPRouteDeletion.
func (mr *MockMulticlusterUDPRouteDeletionReconcilerMockRecorder) ReconcileUDPRouteDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileUDPRouteDeletion", reflect.TypeOf((*MockMulticlusterUDPRouteDeletionReconciler)(nil).ReconcileUDPRouteDeletion), clusterName, req)
}

// MockMulticlusterUDPRouteReconcileLoop is a mock of MulticlusterUDPRouteReconcileLoop interface.
type MockMulticlusterUDPRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterUDPRouteReconcileLoopMockRecorder
}

// MockMulticlusterUDPRouteReconcileLoopMockRecorder is the mock recorder for MockMulticlusterUDPRouteReconcileLoop.
type MockMulticlusterUDPRouteReconcileLoopMockRecorder struct {
	mock *MockMulticlusterUDPRouteReconcileLoop
}

// NewMockMulticlusterUDPRouteReconcileLoop creates a new mock instance.
func NewMockMulticlusterUDPRouteReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterUDPRouteReconcileLoop {
	mock := &MockMulticlusterUDPRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterUDPRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterUDPRouteReconcileLoop) EXPECT() *MockMulticlusterUDPRouteReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterUDPRouteReconciler mocks base method.
func (m *MockMulticlusterUDPRouteReconcileLoop) AddMulticlusterUDPRouteReconciler(ctx context.Context, rec controller.MulticlusterUDPRouteReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterUDPRouteReconciler", varargs...)
}

// AddMulticlusterUDPRouteReconciler indicates an expected call of AddMulticlusterUDPRouteReconciler.
func (mr *MockMulticlusterUDPRouteReconcileLoopMockRecorder) AddMulticlusterUDPRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterUDPRouteReconciler", reflect.TypeOf((*MockMulticlusterUDPRouteReconcileLoop)(nil).AddMulticlusterUDPRouteReconciler), varargs...)
}

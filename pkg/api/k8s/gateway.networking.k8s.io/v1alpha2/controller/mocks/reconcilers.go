// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/gateway.networking.k8s.io/v1alpha2/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
	v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// MockReferenceGrantReconciler is a mock of ReferenceGrantReconciler interface.
type MockReferenceGrantReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceGrantReconcilerMockRecorder
}

// MockReferenceGrantReconcilerMockRecorder is the mock recorder for MockReferenceGrantReconciler.
type MockReferenceGrantReconcilerMockRecorder struct {
	mock *MockReferenceGrantReconciler
}

// NewMockReferenceGrantReconciler creates a new mock instance.
func NewMockReferenceGrantReconciler(ctrl *gomock.Controller) *MockReferenceGrantReconciler {
	mock := &MockReferenceGrantReconciler{ctrl: ctrl}
	mock.recorder = &MockReferenceGrantReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceGrantReconciler) EXPECT() *MockReferenceGrantReconcilerMockRecorder {
	return m.recorder
}

// ReconcileReferenceGrant mocks base method.
func (m *MockReferenceGrantReconciler) ReconcileReferenceGrant(obj *v1alpha2.ReferenceGrant) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileReferenceGrant", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileReferenceGrant indicates an expected call of ReconcileReferenceGrant.
func (mr *MockReferenceGrantReconcilerMockRecorder) ReconcileReferenceGrant(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileReferenceGrant", reflect.TypeOf((*MockReferenceGrantReconciler)(nil).ReconcileReferenceGrant), obj)
}

// MockReferenceGrantDeletionReconciler is a mock of ReferenceGrantDeletionReconciler interface.
type MockReferenceGrantDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceGrantDeletionReconcilerMockRecorder
}

// MockReferenceGrantDeletionReconcilerMockRecorder is the mock recorder for MockReferenceGrantDeletionReconciler.
type MockReferenceGrantDeletionReconcilerMockRecorder struct {
	mock *MockReferenceGrantDeletionReconciler
}

// NewMockReferenceGrantDeletionReconciler creates a new mock instance.
func NewMockReferenceGrantDeletionReconciler(ctrl *gomock.Controller) *MockReferenceGrantDeletionReconciler {
	mock := &MockReferenceGrantDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockReferenceGrantDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceGrantDeletionReconciler) EXPECT() *MockReferenceGrantDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileReferenceGrantDeletion mocks base method.
func (m *MockReferenceGrantDeletionReconciler) ReconcileReferenceGrantDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileReferenceGrantDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileReferenceGrantDeletion indicates an expected call of ReconcileReferenceGrantDeletion.
func (mr *MockReferenceGrantDeletionReconcilerMockRecorder) ReconcileReferenceGrantDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileReferenceGrantDeletion", reflect.TypeOf((*MockReferenceGrantDeletionReconciler)(nil).ReconcileReferenceGrantDeletion), req)
}

// MockReferenceGrantFinalizer is a mock of ReferenceGrantFinalizer interface.
type MockReferenceGrantFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceGrantFinalizerMockRecorder
}

// MockReferenceGrantFinalizerMockRecorder is the mock recorder for MockReferenceGrantFinalizer.
type MockReferenceGrantFinalizerMockRecorder struct {
	mock *MockReferenceGrantFinalizer
}

// NewMockReferenceGrantFinalizer creates a new mock instance.
func NewMockReferenceGrantFinalizer(ctrl *gomock.Controller) *MockReferenceGrantFinalizer {
	mock := &MockReferenceGrantFinalizer{ctrl: ctrl}
	mock.recorder = &MockReferenceGrantFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceGrantFinalizer) EXPECT() *MockReferenceGrantFinalizerMockRecorder {
	return m.recorder
}

// FinalizeReferenceGrant mocks base method.
func (m *MockReferenceGrantFinalizer) FinalizeReferenceGrant(obj *v1alpha2.ReferenceGrant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeReferenceGrant", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeReferenceGrant indicates an expected call of FinalizeReferenceGrant.
func (mr *MockReferenceGrantFinalizerMockRecorder) FinalizeReferenceGrant(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeReferenceGrant", reflect.TypeOf((*MockReferenceGrantFinalizer)(nil).FinalizeReferenceGrant), obj)
}

// ReconcileReferenceGrant mocks base method.
func (m *MockReferenceGrantFinalizer) ReconcileReferenceGrant(obj *v1alpha2.ReferenceGrant) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileReferenceGrant", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileReferenceGrant indicates an expected call of ReconcileReferenceGrant.
func (mr *MockReferenceGrantFinalizerMockRecorder) ReconcileReferenceGrant(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileReferenceGrant", reflect.TypeOf((*MockReferenceGrantFinalizer)(nil).ReconcileReferenceGrant), obj)
}

// ReferenceGrantFinalizerName mocks base method.
func (m *MockReferenceGrantFinalizer) ReferenceGrantFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferenceGrantFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReferenceGrantFinalizerName indicates an expected call of ReferenceGrantFinalizerName.
func (mr *MockReferenceGrantFinalizerMockRecorder) ReferenceGrantFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferenceGrantFinalizerName", reflect.TypeOf((*MockReferenceGrantFinalizer)(nil).ReferenceGrantFinalizerName))
}

// MockReferenceGrantReconcileLoop is a mock of ReferenceGrantReconcileLoop interface.
type MockReferenceGrantReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceGrantReconcileLoopMockRecorder
}

// MockReferenceGrantReconcileLoopMockRecorder is the mock recorder for MockReferenceGrantReconcileLoop.
type MockReferenceGrantReconcileLoopMockRecorder struct {
	mock *MockReferenceGrantReconcileLoop
}

// NewMockReferenceGrantReconcileLoop creates a new mock instance.
func NewMockReferenceGrantReconcileLoop(ctrl *gomock.Controller) *MockReferenceGrantReconcileLoop {
	mock := &MockReferenceGrantReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockReferenceGrantReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceGrantReconcileLoop) EXPECT() *MockReferenceGrantReconcileLoopMockRecorder {
	return m.recorder
}

// RunReferenceGrantReconciler mocks base method.
func (m *MockReferenceGrantReconcileLoop) RunReferenceGrantReconciler(ctx context.Context, rec controller.ReferenceGrantReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunReferenceGrantReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunReferenceGrantReconciler indicates an expected call of RunReferenceGrantReconciler.
func (mr *MockReferenceGrantReconcileLoopMockRecorder) RunReferenceGrantReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReferenceGrantReconciler", reflect.TypeOf((*MockReferenceGrantReconcileLoop)(nil).RunReferenceGrantReconciler), varargs...)
}

// MockGRPCRouteReconciler is a mock of GRPCRouteReconciler interface.
type MockGRPCRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteReconcilerMockRecorder
}

// MockGRPCRouteReconcilerMockRecorder is the mock recorder for MockGRPCRouteReconciler.
type MockGRPCRouteReconcilerMockRecorder struct {
	mock *MockGRPCRouteReconciler
}

// NewMockGRPCRouteReconciler creates a new mock instance.
func NewMockGRPCRouteReconciler(ctrl *gomock.Controller) *MockGRPCRouteReconciler {
	mock := &MockGRPCRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteReconciler) EXPECT() *MockGRPCRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGRPCRoute mocks base method.
func (m *MockGRPCRouteReconciler) ReconcileGRPCRoute(obj *v1alpha2.GRPCRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGRPCRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGRPCRoute indicates an expected call of ReconcileGRPCRoute.
func (mr *MockGRPCRouteReconcilerMockRecorder) ReconcileGRPCRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGRPCRoute", reflect.TypeOf((*MockGRPCRouteReconciler)(nil).ReconcileGRPCRoute), obj)
}

// MockGRPCRouteDeletionReconciler is a mock of GRPCRouteDeletionReconciler interface.
type MockGRPCRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteDeletionReconcilerMockRecorder
}

// MockGRPCRouteDeletionReconcilerMockRecorder is the mock recorder for MockGRPCRouteDeletionReconciler.
type MockGRPCRouteDeletionReconcilerMockRecorder struct {
	mock *MockGRPCRouteDeletionReconciler
}

// NewMockGRPCRouteDeletionReconciler creates a new mock instance.
func NewMockGRPCRouteDeletionReconciler(ctrl *gomock.Controller) *MockGRPCRouteDeletionReconciler {
	mock := &MockGRPCRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteDeletionReconciler) EXPECT() *MockGRPCRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGRPCRouteDeletion mocks base method.
func (m *MockGRPCRouteDeletionReconciler) ReconcileGRPCRouteDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGRPCRouteDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGRPCRouteDeletion indicates an expected call of ReconcileGRPCRouteDeletion.
func (mr *MockGRPCRouteDeletionReconcilerMockRecorder) ReconcileGRPCRouteDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGRPCRouteDeletion", reflect.TypeOf((*MockGRPCRouteDeletionReconciler)(nil).ReconcileGRPCRouteDeletion), req)
}

// MockGRPCRouteFinalizer is a mock of GRPCRouteFinalizer interface.
type MockGRPCRouteFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteFinalizerMockRecorder
}

// MockGRPCRouteFinalizerMockRecorder is the mock recorder for MockGRPCRouteFinalizer.
type MockGRPCRouteFinalizerMockRecorder struct {
	mock *MockGRPCRouteFinalizer
}

// NewMockGRPCRouteFinalizer creates a new mock instance.
func NewMockGRPCRouteFinalizer(ctrl *gomock.Controller) *MockGRPCRouteFinalizer {
	mock := &MockGRPCRouteFinalizer{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteFinalizer) EXPECT() *MockGRPCRouteFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGRPCRoute mocks base method.
func (m *MockGRPCRouteFinalizer) FinalizeGRPCRoute(obj *v1alpha2.GRPCRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGRPCRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGRPCRoute indicates an expected call of FinalizeGRPCRoute.
func (mr *MockGRPCRouteFinalizerMockRecorder) FinalizeGRPCRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGRPCRoute", reflect.TypeOf((*MockGRPCRouteFinalizer)(nil).FinalizeGRPCRoute), obj)
}

// GRPCRouteFinalizerName mocks base method.
func (m *MockGRPCRouteFinalizer) GRPCRouteFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCRouteFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GRPCRouteFinalizerName indicates an expected call of GRPCRouteFinalizerName.
func (mr *MockGRPCRouteFinalizerMockRecorder) GRPCRouteFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCRouteFinalizerName", reflect.TypeOf((*MockGRPCRouteFinalizer)(nil).GRPCRouteFinalizerName))
}

// ReconcileGRPCRoute mocks base method.
func (m *MockGRPCRouteFinalizer) ReconcileGRPCRoute(obj *v1alpha2.GRPCRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGRPCRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGRPCRoute indicates an expected call of ReconcileGRPCRoute.
func (mr *MockGRPCRouteFinalizerMockRecorder) ReconcileGRPCRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGRPCRoute", reflect.TypeOf((*MockGRPCRouteFinalizer)(nil).ReconcileGRPCRoute), obj)
}

// MockGRPCRouteReconcileLoop is a mock of GRPCRouteReconcileLoop interface.
type MockGRPCRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCRouteReconcileLoopMockRecorder
}

// MockGRPCRouteReconcileLoopMockRecorder is the mock recorder for MockGRPCRouteReconcileLoop.
type MockGRPCRouteReconcileLoopMockRecorder struct {
	mock *MockGRPCRouteReconcileLoop
}

// NewMockGRPCRouteReconcileLoop creates a new mock instance.
func NewMockGRPCRouteReconcileLoop(ctrl *gomock.Controller) *MockGRPCRouteReconcileLoop {
	mock := &MockGRPCRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGRPCRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCRouteReconcileLoop) EXPECT() *MockGRPCRouteReconcileLoopMockRecorder {
	return m.recorder
}

// RunGRPCRouteReconciler mocks base method.
func (m *MockGRPCRouteReconcileLoop) RunGRPCRouteReconciler(ctx context.Context, rec controller.GRPCRouteReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGRPCRouteReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGRPCRouteReconciler indicates an expected call of RunGRPCRouteReconciler.
func (mr *MockGRPCRouteReconcileLoopMockRecorder) RunGRPCRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGRPCRouteReconciler", reflect.TypeOf((*MockGRPCRouteReconcileLoop)(nil).RunGRPCRouteReconciler), varargs...)
}

// MockTCPRouteReconciler is a mock of TCPRouteReconciler interface.
type MockTCPRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteReconcilerMockRecorder
}

// MockTCPRouteReconcilerMockRecorder is the mock recorder for MockTCPRouteReconciler.
type MockTCPRouteReconcilerMockRecorder struct {
	mock *MockTCPRouteReconciler
}

// NewMockTCPRouteReconciler creates a new mock instance.
func NewMockTCPRouteReconciler(ctrl *gomock.Controller) *MockTCPRouteReconciler {
	mock := &MockTCPRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockTCPRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteReconciler) EXPECT() *MockTCPRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTCPRoute mocks base method.
func (m *MockTCPRouteReconciler) ReconcileTCPRoute(obj *v1alpha2.TCPRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTCPRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTCPRoute indicates an expected call of ReconcileTCPRoute.
func (mr *MockTCPRouteReconcilerMockRecorder) ReconcileTCPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTCPRoute", reflect.TypeOf((*MockTCPRouteReconciler)(nil).ReconcileTCPRoute), obj)
}

// MockTCPRouteDeletionReconciler is a mock of TCPRouteDeletionReconciler interface.
type MockTCPRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteDeletionReconcilerMockRecorder
}

// MockTCPRouteDeletionReconcilerMockRecorder is the mock recorder for MockTCPRouteDeletionReconciler.
type MockTCPRouteDeletionReconcilerMockRecorder struct {
	mock *MockTCPRouteDeletionReconciler
}

// NewMockTCPRouteDeletionReconciler creates a new mock instance.
func NewMockTCPRouteDeletionReconciler(ctrl *gomock.Controller) *MockTCPRouteDeletionReconciler {
	mock := &MockTCPRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockTCPRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteDeletionReconciler) EXPECT() *MockTCPRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTCPRouteDeletion mocks base method.
func (m *MockTCPRouteDeletionReconciler) ReconcileTCPRouteDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTCPRouteDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTCPRouteDeletion indicates an expected call of ReconcileTCPRouteDeletion.
func (mr *MockTCPRouteDeletionReconcilerMockRecorder) ReconcileTCPRouteDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTCPRouteDeletion", reflect.TypeOf((*MockTCPRouteDeletionReconciler)(nil).ReconcileTCPRouteDeletion), req)
}

// MockTCPRouteFinalizer is a mock of TCPRouteFinalizer interface.
type MockTCPRouteFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteFinalizerMockRecorder
}

// MockTCPRouteFinalizerMockRecorder is the mock recorder for MockTCPRouteFinalizer.
type MockTCPRouteFinalizerMockRecorder struct {
	mock *MockTCPRouteFinalizer
}

// NewMockTCPRouteFinalizer creates a new mock instance.
func NewMockTCPRouteFinalizer(ctrl *gomock.Controller) *MockTCPRouteFinalizer {
	mock := &MockTCPRouteFinalizer{ctrl: ctrl}
	mock.recorder = &MockTCPRouteFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteFinalizer) EXPECT() *MockTCPRouteFinalizerMockRecorder {
	return m.recorder
}

// FinalizeTCPRoute mocks base method.
func (m *MockTCPRouteFinalizer) FinalizeTCPRoute(obj *v1alpha2.TCPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeTCPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeTCPRoute indicates an expected call of FinalizeTCPRoute.
func (mr *MockTCPRouteFinalizerMockRecorder) FinalizeTCPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeTCPRoute", reflect.TypeOf((*MockTCPRouteFinalizer)(nil).FinalizeTCPRoute), obj)
}

// ReconcileTCPRoute mocks base method.
func (m *MockTCPRouteFinalizer) ReconcileTCPRoute(obj *v1alpha2.TCPRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTCPRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTCPRoute indicates an expected call of ReconcileTCPRoute.
func (mr *MockTCPRouteFinalizerMockRecorder) ReconcileTCPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTCPRoute", reflect.TypeOf((*MockTCPRouteFinalizer)(nil).ReconcileTCPRoute), obj)
}

// TCPRouteFinalizerName mocks base method.
func (m *MockTCPRouteFinalizer) TCPRouteFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCPRouteFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TCPRouteFinalizerName indicates an expected call of TCPRouteFinalizerName.
func (mr *MockTCPRouteFinalizerMockRecorder) TCPRouteFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCPRouteFinalizerName", reflect.TypeOf((*MockTCPRouteFinalizer)(nil).TCPRouteFinalizerName))
}

// MockTCPRouteReconcileLoop is a mock of TCPRouteReconcileLoop interface.
type MockTCPRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockTCPRouteReconcileLoopMockRecorder
}

// MockTCPRouteReconcileLoopMockRecorder is the mock recorder for MockTCPRouteReconcileLoop.
type MockTCPRouteReconcileLoopMockRecorder struct {
	mock *MockTCPRouteReconcileLoop
}

// NewMockTCPRouteReconcileLoop creates a new mock instance.
func NewMockTCPRouteReconcileLoop(ctrl *gomock.Controller) *MockTCPRouteReconcileLoop {
	mock := &MockTCPRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockTCPRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPRouteReconcileLoop) EXPECT() *MockTCPRouteReconcileLoopMockRecorder {
	return m.recorder
}

// RunTCPRouteReconciler mocks base method.
func (m *MockTCPRouteReconcileLoop) RunTCPRouteReconciler(ctx context.Context, rec controller.TCPRouteReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTCPRouteReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTCPRouteReconciler indicates an expected call of RunTCPRouteReconciler.
func (mr *MockTCPRouteReconcileLoopMockRecorder) RunTCPRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTCPRouteReconciler", reflect.TypeOf((*MockTCPRouteReconcileLoop)(nil).RunTCPRouteReconciler), varargs...)
}

// MockTLSRouteReconciler is a mock of TLSRouteReconciler interface.
type MockTLSRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteReconcilerMockRecorder
}

// MockTLSRouteReconcilerMockRecorder is the mock recorder for MockTLSRouteReconciler.
type MockTLSRouteReconcilerMockRecorder struct {
	mock *MockTLSRouteReconciler
}

// NewMockTLSRouteReconciler creates a new mock instance.
func NewMockTLSRouteReconciler(ctrl *gomock.Controller) *MockTLSRouteReconciler {
	mock := &MockTLSRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockTLSRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteReconciler) EXPECT() *MockTLSRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTLSRoute mocks base method.
func (m *MockTLSRouteReconciler) ReconcileTLSRoute(obj *v1alpha2.TLSRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTLSRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTLSRoute indicates an expected call of ReconcileTLSRoute.
func (mr *MockTLSRouteReconcilerMockRecorder) ReconcileTLSRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTLSRoute", reflect.TypeOf((*MockTLSRouteReconciler)(nil).ReconcileTLSRoute), obj)
}

// MockTLSRouteDeletionReconciler is a mock of TLSRouteDeletionReconciler interface.
type MockTLSRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteDeletionReconcilerMockRecorder
}

// MockTLSRouteDeletionReconcilerMockRecorder is the mock recorder for MockTLSRouteDeletionReconciler.
type MockTLSRouteDeletionReconcilerMockRecorder struct {
	mock *MockTLSRouteDeletionReconciler
}

// NewMockTLSRouteDeletionReconciler creates a new mock instance.
func NewMockTLSRouteDeletionReconciler(ctrl *gomock.Controller) *MockTLSRouteDeletionReconciler {
	mock := &MockTLSRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockTLSRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteDeletionReconciler) EXPECT() *MockTLSRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTLSRouteDeletion mocks base method.
func (m *MockTLSRouteDeletionReconciler) ReconcileTLSRouteDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTLSRouteDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTLSRouteDeletion indicates an expected call of ReconcileTLSRouteDeletion.
func (mr *MockTLSRouteDeletionReconcilerMockRecorder) ReconcileTLSRouteDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTLSRouteDeletion", reflect.TypeOf((*MockTLSRouteDeletionReconciler)(nil).ReconcileTLSRouteDeletion), req)
}

// MockTLSRouteFinalizer is a mock of TLSRouteFinalizer interface.
type MockTLSRouteFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteFinalizerMockRecorder
}

// MockTLSRouteFinalizerMockRecorder is the mock recorder for MockTLSRouteFinalizer.
type MockTLSRouteFinalizerMockRecorder struct {
	mock *MockTLSRouteFinalizer
}

// NewMockTLSRouteFinalizer creates a new mock instance.
func NewMockTLSRouteFinalizer(ctrl *gomock.Controller) *MockTLSRouteFinalizer {
	mock := &MockTLSRouteFinalizer{ctrl: ctrl}
	mock.recorder = &MockTLSRouteFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteFinalizer) EXPECT() *MockTLSRouteFinalizerMockRecorder {
	return m.recorder
}

// FinalizeTLSRoute mocks base method.
func (m *MockTLSRouteFinalizer) FinalizeTLSRoute(obj *v1alpha2.TLSRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeTLSRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeTLSRoute indicates an expected call of FinalizeTLSRoute.
func (mr *MockTLSRouteFinalizerMockRecorder) FinalizeTLSRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeTLSRoute", reflect.TypeOf((*MockTLSRouteFinalizer)(nil).FinalizeTLSRoute), obj)
}

// ReconcileTLSRoute mocks base method.
func (m *MockTLSRouteFinalizer) ReconcileTLSRoute(obj *v1alpha2.TLSRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTLSRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTLSRoute indicates an expected call of ReconcileTLSRoute.
func (mr *MockTLSRouteFinalizerMockRecorder) ReconcileTLSRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTLSRoute", reflect.TypeOf((*MockTLSRouteFinalizer)(nil).ReconcileTLSRoute), obj)
}

// TLSRouteFinalizerName mocks base method.
func (m *MockTLSRouteFinalizer) TLSRouteFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSRouteFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TLSRouteFinalizerName indicates an expected call of TLSRouteFinalizerName.
func (mr *MockTLSRouteFinalizerMockRecorder) TLSRouteFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSRouteFinalizerName", reflect.TypeOf((*MockTLSRouteFinalizer)(nil).TLSRouteFinalizerName))
}

// MockTLSRouteReconcileLoop is a mock of TLSRouteReconcileLoop interface.
type MockTLSRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockTLSRouteReconcileLoopMockRecorder
}

// MockTLSRouteReconcileLoopMockRecorder is the mock recorder for MockTLSRouteReconcileLoop.
type MockTLSRouteReconcileLoopMockRecorder struct {
	mock *MockTLSRouteReconcileLoop
}

// NewMockTLSRouteReconcileLoop creates a new mock instance.
func NewMockTLSRouteReconcileLoop(ctrl *gomock.Controller) *MockTLSRouteReconcileLoop {
	mock := &MockTLSRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockTLSRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTLSRouteReconcileLoop) EXPECT() *MockTLSRouteReconcileLoopMockRecorder {
	return m.recorder
}

// RunTLSRouteReconciler mocks base method.
func (m *MockTLSRouteReconcileLoop) RunTLSRouteReconciler(ctx context.Context, rec controller.TLSRouteReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTLSRouteReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTLSRouteReconciler indicates an expected call of RunTLSRouteReconciler.
func (mr *MockTLSRouteReconcileLoopMockRecorder) RunTLSRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTLSRouteReconciler", reflect.TypeOf((*MockTLSRouteReconcileLoop)(nil).RunTLSRouteReconciler), varargs...)
}

// MockUDPRouteReconciler is a mock of UDPRouteReconciler interface.
type MockUDPRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteReconcilerMockRecorder
}

// MockUDPRouteReconcilerMockRecorder is the mock recorder for MockUDPRouteReconciler.
type MockUDPRouteReconcilerMockRecorder struct {
	mock *MockUDPRouteReconciler
}

// NewMockUDPRouteReconciler creates a new mock instance.
func NewMockUDPRouteReconciler(ctrl *gomock.Controller) *MockUDPRouteReconciler {
	mock := &MockUDPRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockUDPRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteReconciler) EXPECT() *MockUDPRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileUDPRoute mocks base method.
func (m *MockUDPRouteReconciler) ReconcileUDPRoute(obj *v1alpha2.UDPRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileUDPRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileUDPRoute indicates an expected call of ReconcileUDPRoute.
func (mr *MockUDPRouteReconcilerMockRecorder) ReconcileUDPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileUDPRoute", reflect.TypeOf((*MockUDPRouteReconciler)(nil).ReconcileUDPRoute), obj)
}

// MockUDPRouteDeletionReconciler is a mock of UDPRouteDeletionReconciler interface.
type MockUDPRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteDeletionReconcilerMockRecorder
}

// MockUDPRouteDeletionReconcilerMockRecorder is the mock recorder for MockUDPRouteDeletionReconciler.
type MockUDPRouteDeletionReconcilerMockRecorder struct {
	mock *MockUDPRouteDeletionReconciler
}

// NewMockUDPRouteDeletionReconciler creates a new mock instance.
func NewMockUDPRouteDeletionReconciler(ctrl *gomock.Controller) *MockUDPRouteDeletionReconciler {
	mock := &MockUDPRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockUDPRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteDeletionReconciler) EXPECT() *MockUDPRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileUDPRouteDeletion mocks base method.
func (m *MockUDPRouteDeletionReconciler) ReconcileUDPRouteDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileUDPRouteDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileUDPRouteDeletion indicates an expected call of ReconcileUDPRouteDeletion.
func (mr *MockUDPRouteDeletionReconcilerMockRecorder) ReconcileUDPRouteDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileUDPRouteDeletion", reflect.TypeOf((*MockUDPRouteDeletionReconciler)(nil).ReconcileUDPRouteDeletion), req)
}

// MockUDPRouteFinalizer is a mock of UDPRouteFinalizer interface.
type MockUDPRouteFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteFinalizerMockRecorder
}

// MockUDPRouteFinalizerMockRecorder is the mock recorder for MockUDPRouteFinalizer.
type MockUDPRouteFinalizerMockRecorder struct {
	mock *MockUDPRouteFinalizer
}

// NewMockUDPRouteFinalizer creates a new mock instance.
func NewMockUDPRouteFinalizer(ctrl *gomock.Controller) *MockUDPRouteFinalizer {
	mock := &MockUDPRouteFinalizer{ctrl: ctrl}
	mock.recorder = &MockUDPRouteFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteFinalizer) EXPECT() *MockUDPRouteFinalizerMockRecorder {
	return m.recorder
}

// FinalizeUDPRoute mocks base method.
func (m *MockUDPRouteFinalizer) FinalizeUDPRoute(obj *v1alpha2.UDPRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeUDPRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeUDPRoute indicates an expected call of FinalizeUDPRoute.
func (mr *MockUDPRouteFinalizerMockRecorder) FinalizeUDPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeUDPRoute", reflect.TypeOf((*MockUDPRouteFinalizer)(nil).FinalizeUDPRoute), obj)
}

// ReconcileUDPRoute mocks base method.
func (m *MockUDPRouteFinalizer) ReconcileUDPRoute(obj *v1alpha2.UDPRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileUDPRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileUDPRoute indicates an expected call of ReconcileUDPRoute.
func (mr *MockUDPRouteFinalizerMockRecorder) ReconcileUDPRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileUDPRoute", reflect.TypeOf((*MockUDPRouteFinalizer)(nil).ReconcileUDPRoute), obj)
}

// UDPRouteFinalizerName mocks base method.
func (m *MockUDPRouteFinalizer) UDPRouteFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UDPRouteFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// UDPRouteFinalizerName indicates an expected call of UDPRouteFinalizerName.
func (mr *MockUDPRouteFinalizerMockRecorder) UDPRouteFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UDPRouteFinalizerName", reflect.TypeOf((*MockUDPRouteFinalizer)(nil).UDPRouteFinalizerName))
}

// MockUDPRouteReconcileLoop is a mock of UDPRouteReconcileLoop interface.
type MockUDPRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockUDPRouteReconcileLoopMockRecorder
}

// MockUDPRouteReconcileLoopMockRecorder is the mock recorder for MockUDPRouteReconcileLoop.
type MockUDPRouteReconcileLoopMockRecorder struct {
	mock *MockUDPRouteReconcileLoop
}

// NewMockUDPRouteReconcileLoop creates a new mock instance.
func NewMockUDPRouteReconcileLoop(ctrl *gomock.Controller) *MockUDPRouteReconcileLoop {
	mock := &MockUDPRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockUDPRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUDPRouteReconcileLoop) EXPECT() *MockUDPRouteReconcileLoopMockRecorder {
	return m.recorder
}

// RunUDPRouteReconciler mocks base method.
func (m *MockUDPRouteReconcileLoop) RunUDPRouteReconciler(ctx context.Context, rec controller.UDPRouteReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunUDPRouteReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunUDPRouteReconciler indicates an expected call of RunUDPRouteReconciler.
func (mr *MockUDPRouteReconcileLoopMockRecorder) RunUDPRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunUDPRouteReconciler", reflect.TypeOf((*MockUDPRouteReconcileLoop)(nil).RunUDPRouteReconciler), varargs...)
}

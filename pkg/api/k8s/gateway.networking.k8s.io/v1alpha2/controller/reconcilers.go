// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	gateway_networking_k8s_io_v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the ReferenceGrant Resource.
// implemented by the user
type ReferenceGrantReconciler interface {
	ReconcileReferenceGrant(obj *gateway_networking_k8s_io_v1alpha2.ReferenceGrant) (reconcile.Result, error)
}

// Reconcile deletion events for the ReferenceGrant Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type ReferenceGrantDeletionReconciler interface {
	ReconcileReferenceGrantDeletion(req reconcile.Request) error
}

type ReferenceGrantReconcilerFuncs struct {
	OnReconcileReferenceGrant         func(obj *gateway_networking_k8s_io_v1alpha2.ReferenceGrant) (reconcile.Result, error)
	OnReconcileReferenceGrantDeletion func(req reconcile.Request) error
}

func (f *ReferenceGrantReconcilerFuncs) ReconcileReferenceGrant(obj *gateway_networking_k8s_io_v1alpha2.ReferenceGrant) (reconcile.Result, error) {
	if f.OnReconcileReferenceGrant == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileReferenceGrant(obj)
}

func (f *ReferenceGrantReconcilerFuncs) ReconcileReferenceGrantDeletion(req reconcile.Request) error {
	if f.OnReconcileReferenceGrantDeletion == nil {
		return nil
	}
	return f.OnReconcileReferenceGrantDeletion(req)
}

// Reconcile and finalize the ReferenceGrant Resource
// implemented by the user
type ReferenceGrantFinalizer interface {
	ReferenceGrantReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	ReferenceGrantFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeReferenceGrant(obj *gateway_networking_k8s_io_v1alpha2.ReferenceGrant) error
}

type ReferenceGrantReconcileLoop interface {
	RunReferenceGrantReconciler(ctx context.Context, rec ReferenceGrantReconciler, predicates ...predicate.Predicate) error
}

type referenceGrantReconcileLoop struct {
	loop reconcile.Loop
}

func NewReferenceGrantReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) ReferenceGrantReconcileLoop {
	return &referenceGrantReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &gateway_networking_k8s_io_v1alpha2.ReferenceGrant{}, options),
	}
}

func (c *referenceGrantReconcileLoop) RunReferenceGrantReconciler(ctx context.Context, reconciler ReferenceGrantReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericReferenceGrantReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(ReferenceGrantFinalizer); ok {
		reconcilerWrapper = genericReferenceGrantFinalizer{
			genericReferenceGrantReconciler: genericReconciler,
			finalizingReconciler:            finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericReferenceGrantHandler implements a generic reconcile.Reconciler
type genericReferenceGrantReconciler struct {
	reconciler ReferenceGrantReconciler
}

func (r genericReferenceGrantReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ReferenceGrant handler received event for %T", object)
	}
	return r.reconciler.ReconcileReferenceGrant(obj)
}

func (r genericReferenceGrantReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(ReferenceGrantDeletionReconciler); ok {
		return deletionReconciler.ReconcileReferenceGrantDeletion(request)
	}
	return nil
}

// genericReferenceGrantFinalizer implements a generic reconcile.FinalizingReconciler
type genericReferenceGrantFinalizer struct {
	genericReferenceGrantReconciler
	finalizingReconciler ReferenceGrantFinalizer
}

func (r genericReferenceGrantFinalizer) FinalizerName() string {
	return r.finalizingReconciler.ReferenceGrantFinalizerName()
}

func (r genericReferenceGrantFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.ReferenceGrant)
	if !ok {
		return errors.Errorf("internal error: ReferenceGrant handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeReferenceGrant(obj)
}

// Reconcile Upsert events for the GRPCRoute Resource.
// implemented by the user
type GRPCRouteReconciler interface {
	ReconcileGRPCRoute(obj *gateway_networking_k8s_io_v1alpha2.GRPCRoute) (reconcile.Result, error)
}

// Reconcile deletion events for the GRPCRoute Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type GRPCRouteDeletionReconciler interface {
	ReconcileGRPCRouteDeletion(req reconcile.Request) error
}

type GRPCRouteReconcilerFuncs struct {
	OnReconcileGRPCRoute         func(obj *gateway_networking_k8s_io_v1alpha2.GRPCRoute) (reconcile.Result, error)
	OnReconcileGRPCRouteDeletion func(req reconcile.Request) error
}

func (f *GRPCRouteReconcilerFuncs) ReconcileGRPCRoute(obj *gateway_networking_k8s_io_v1alpha2.GRPCRoute) (reconcile.Result, error) {
	if f.OnReconcileGRPCRoute == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileGRPCRoute(obj)
}

func (f *GRPCRouteReconcilerFuncs) ReconcileGRPCRouteDeletion(req reconcile.Request) error {
	if f.OnReconcileGRPCRouteDeletion == nil {
		return nil
	}
	return f.OnReconcileGRPCRouteDeletion(req)
}

// Reconcile and finalize the GRPCRoute Resource
// implemented by the user
type GRPCRouteFinalizer interface {
	GRPCRouteReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	GRPCRouteFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeGRPCRoute(obj *gateway_networking_k8s_io_v1alpha2.GRPCRoute) error
}

type GRPCRouteReconcileLoop interface {
	RunGRPCRouteReconciler(ctx context.Context, rec GRPCRouteReconciler, predicates ...predicate.Predicate) error
}

type gRPCRouteReconcileLoop struct {
	loop reconcile.Loop
}

func NewGRPCRouteReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) GRPCRouteReconcileLoop {
	return &gRPCRouteReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &gateway_networking_k8s_io_v1alpha2.GRPCRoute{}, options),
	}
}

func (c *gRPCRouteReconcileLoop) RunGRPCRouteReconciler(ctx context.Context, reconciler GRPCRouteReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericGRPCRouteReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(GRPCRouteFinalizer); ok {
		reconcilerWrapper = genericGRPCRouteFinalizer{
			genericGRPCRouteReconciler: genericReconciler,
			finalizingReconciler:       finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericGRPCRouteHandler implements a generic reconcile.Reconciler
type genericGRPCRouteReconciler struct {
	reconciler GRPCRouteReconciler
}

func (r genericGRPCRouteReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.GRPCRoute)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: GRPCRoute handler received event for %T", object)
	}
	return r.reconciler.ReconcileGRPCRoute(obj)
}

func (r genericGRPCRouteReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(GRPCRouteDeletionReconciler); ok {
		return deletionReconciler.ReconcileGRPCRouteDeletion(request)
	}
	return nil
}

// genericGRPCRouteFinalizer implements a generic reconcile.FinalizingReconciler
type genericGRPCRouteFinalizer struct {
	genericGRPCRouteReconciler
	finalizingReconciler GRPCRouteFinalizer
}

func (r genericGRPCRouteFinalizer) FinalizerName() string {
	return r.finalizingReconciler.GRPCRouteFinalizerName()
}

func (r genericGRPCRouteFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.GRPCRoute)
	if !ok {
		return errors.Errorf("internal error: GRPCRoute handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeGRPCRoute(obj)
}

// Reconcile Upsert events for the TCPRoute Resource.
// implemented by the user
type TCPRouteReconciler interface {
	ReconcileTCPRoute(obj *gateway_networking_k8s_io_v1alpha2.TCPRoute) (reconcile.Result, error)
}

// Reconcile deletion events for the TCPRoute Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type TCPRouteDeletionReconciler interface {
	ReconcileTCPRouteDeletion(req reconcile.Request) error
}

type TCPRouteReconcilerFuncs struct {
	OnReconcileTCPRoute         func(obj *gateway_networking_k8s_io_v1alpha2.TCPRoute) (reconcile.Result, error)
	OnReconcileTCPRouteDeletion func(req reconcile.Request) error
}

func (f *TCPRouteReconcilerFuncs) ReconcileTCPRoute(obj *gateway_networking_k8s_io_v1alpha2.TCPRoute) (reconcile.Result, error) {
	if f.OnReconcileTCPRoute == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileTCPRoute(obj)
}

func (f *TCPRouteReconcilerFuncs) ReconcileTCPRouteDeletion(req reconcile.Request) error {
	if f.OnReconcileTCPRouteDeletion == nil {
		return nil
	}
	return f.OnReconcileTCPRouteDeletion(req)
}

// Reconcile and finalize the TCPRoute Resource
// implemented by the user
type TCPRouteFinalizer interface {
	TCPRouteReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	TCPRouteFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeTCPRoute(obj *gateway_networking_k8s_io_v1alpha2.TCPRoute) error
}

type TCPRouteReconcileLoop interface {
	RunTCPRouteReconciler(ctx context.Context, rec TCPRouteReconciler, predicates ...predicate.Predicate) error
}

type tCPRouteReconcileLoop struct {
	loop reconcile.Loop
}

func NewTCPRouteReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) TCPRouteReconcileLoop {
	return &tCPRouteReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &gateway_networking_k8s_io_v1alpha2.TCPRoute{}, options),
	}
}

func (c *tCPRouteReconcileLoop) RunTCPRouteReconciler(ctx context.Context, reconciler TCPRouteReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericTCPRouteReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(TCPRouteFinalizer); ok {
		reconcilerWrapper = genericTCPRouteFinalizer{
			genericTCPRouteReconciler: genericReconciler,
			finalizingReconciler:      finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericTCPRouteHandler implements a generic reconcile.Reconciler
type genericTCPRouteReconciler struct {
	reconciler TCPRouteReconciler
}

func (r genericTCPRouteReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.TCPRoute)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: TCPRoute handler received event for %T", object)
	}
	return r.reconciler.ReconcileTCPRoute(obj)
}

func (r genericTCPRouteReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(TCPRouteDeletionReconciler); ok {
		return deletionReconciler.ReconcileTCPRouteDeletion(request)
	}
	return nil
}

// genericTCPRouteFinalizer implements a generic reconcile.FinalizingReconciler
type genericTCPRouteFinalizer struct {
	genericTCPRouteReconciler
	finalizingReconciler TCPRouteFinalizer
}

func (r genericTCPRouteFinalizer) FinalizerName() string {
	return r.finalizingReconciler.TCPRouteFinalizerName()
}

func (r genericTCPRouteFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.TCPRoute)
	if !ok {
		return errors.Errorf("internal error: TCPRoute handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeTCPRoute(obj)
}

// Reconcile Upsert events for the TLSRoute Resource.
// implemented by the user
type TLSRouteReconciler interface {
	ReconcileTLSRoute(obj *gateway_networking_k8s_io_v1alpha2.TLSRoute) (reconcile.Result, error)
}

// Reconcile deletion events for the TLSRoute Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type TLSRouteDeletionReconciler interface {
	ReconcileTLSRouteDeletion(req reconcile.Request) error
}

type TLSRouteReconcilerFuncs struct {
	OnReconcileTLSRoute         func(obj *gateway_networking_k8s_io_v1alpha2.TLSRoute) (reconcile.Result, error)
	OnReconcileTLSRouteDeletion func(req reconcile.Request) error
}

func (f *TLSRouteReconcilerFuncs) ReconcileTLSRoute(obj *gateway_networking_k8s_io_v1alpha2.TLSRoute) (reconcile.Result, error) {
	if f.OnReconcileTLSRoute == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileTLSRoute(obj)
}

func (f *TLSRouteReconcilerFuncs) ReconcileTLSRouteDeletion(req reconcile.Request) error {
	if f.OnReconcileTLSRouteDeletion == nil {
		return nil
	}
	return f.OnReconcileTLSRouteDeletion(req)
}

// Reconcile and finalize the TLSRoute Resource
// implemented by the user
type TLSRouteFinalizer interface {
	TLSRouteReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	TLSRouteFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeTLSRoute(obj *gateway_networking_k8s_io_v1alpha2.TLSRoute) error
}

type TLSRouteReconcileLoop interface {
	RunTLSRouteReconciler(ctx context.Context, rec TLSRouteReconciler, predicates ...predicate.Predicate) error
}

type tLSRouteReconcileLoop struct {
	loop reconcile.Loop
}

func NewTLSRouteReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) TLSRouteReconcileLoop {
	return &tLSRouteReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &gateway_networking_k8s_io_v1alpha2.TLSRoute{}, options),
	}
}

func (c *tLSRouteReconcileLoop) RunTLSRouteReconciler(ctx context.Context, reconciler TLSRouteReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericTLSRouteReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(TLSRouteFinalizer); ok {
		reconcilerWrapper = genericTLSRouteFinalizer{
			genericTLSRouteReconciler: genericReconciler,
			finalizingReconciler:      finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericTLSRouteHandler implements a generic reconcile.Reconciler
type genericTLSRouteReconciler struct {
	reconciler TLSRouteReconciler
}

func (r genericTLSRouteReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.TLSRoute)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: TLSRoute handler received event for %T", object)
	}
	return r.reconciler.ReconcileTLSRoute(obj)
}

func (r genericTLSRouteReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(TLSRouteDeletionReconciler); ok {
		return deletionReconciler.ReconcileTLSRouteDeletion(request)
	}
	return nil
}

// genericTLSRouteFinalizer implements a generic reconcile.FinalizingReconciler
type genericTLSRouteFinalizer struct {
	genericTLSRouteReconciler
	finalizingReconciler TLSRouteFinalizer
}

func (r genericTLSRouteFinalizer) FinalizerName() string {
	return r.finalizingReconciler.TLSRouteFinalizerName()
}

func (r genericTLSRouteFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.TLSRoute)
	if !ok {
		return errors.Errorf("internal error: TLSRoute handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeTLSRoute(obj)
}

// Reconcile Upsert events for the UDPRoute Resource.
// implemented by the user
type UDPRouteReconciler interface {
	ReconcileUDPRoute(obj *gateway_networking_k8s_io_v1alpha2.UDPRoute) (reconcile.Result, error)
}

// Reconcile deletion events for the UDPRoute Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type UDPRouteDeletionReconciler interface {
	ReconcileUDPRouteDeletion(req reconcile.Request) error
}

type UDPRouteReconcilerFuncs struct {
	OnReconcileUDPRoute         func(obj *gateway_networking_k8s_io_v1alpha2.UDPRoute) (reconcile.Result, error)
	OnReconcileUDPRouteDeletion func(req reconcile.Request) error
}

func (f *UDPRouteReconcilerFuncs) ReconcileUDPRoute(obj *gateway_networking_k8s_io_v1alpha2.UDPRoute) (reconcile.Result, error) {
	if f.OnReconcileUDPRoute == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileUDPRoute(obj)
}

func (f *UDPRouteReconcilerFuncs) ReconcileUDPRouteDeletion(req reconcile.Request) error {
	if f.OnReconcileUDPRouteDeletion == nil {
		return nil
	}
	return f.OnReconcileUDPRouteDeletion(req)
}

// Reconcile and finalize the UDPRoute Resource
// implemented by the user
type UDPRouteFinalizer interface {
	UDPRouteReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	UDPRouteFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeUDPRoute(obj *gateway_networking_k8s_io_v1alpha2.UDPRoute) error
}

type UDPRouteReconcileLoop interface {
	RunUDPRouteReconciler(ctx context.Context, rec UDPRouteReconciler, predicates ...predicate.Predicate) error
}

type uDPRouteReconcileLoop struct {
	loop reconcile.Loop
}

func NewUDPRouteReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) UDPRouteReconcileLoop {
	return &uDPRouteReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &gateway_networking_k8s_io_v1alpha2.UDPRoute{}, options),
	}
}

func (c *uDPRouteReconcileLoop) RunUDPRouteReconciler(ctx context.Context, reconciler UDPRouteReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericUDPRouteReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(UDPRouteFinalizer); ok {
		reconcilerWrapper = genericUDPRouteFinalizer{
			genericUDPRouteReconciler: genericReconciler,
			finalizingReconciler:      finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericUDPRouteHandler implements a generic reconcile.Reconciler
type genericUDPRouteReconciler struct {
	reconciler UDPRouteReconciler
}

func (r genericUDPRouteReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.UDPRoute)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: UDPRoute handler received event for %T", object)
	}
	return r.reconciler.ReconcileUDPRoute(obj)
}

func (r genericUDPRouteReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(UDPRouteDeletionReconciler); ok {
		return deletionReconciler.ReconcileUDPRouteDeletion(request)
	}
	return nil
}

// genericUDPRouteFinalizer implements a generic reconcile.FinalizingReconciler
type genericUDPRouteFinalizer struct {
	genericUDPRouteReconciler
	finalizingReconciler UDPRouteFinalizer
}

func (r genericUDPRouteFinalizer) FinalizerName() string {
	return r.finalizingReconciler.UDPRouteFinalizerName()
}

func (r genericUDPRouteFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*gateway_networking_k8s_io_v1alpha2.UDPRoute)
	if !ok {
		return errors.Errorf("internal error: UDPRoute handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeUDPRoute(obj)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/admissionregistration.k8s.io/v1/controller"
	v1 "k8s.io/api/admissionregistration/v1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockValidatingWebhookConfigurationEventHandler is a mock of ValidatingWebhookConfigurationEventHandler interface.
type MockValidatingWebhookConfigurationEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockValidatingWebhookConfigurationEventHandlerMockRecorder
}

// MockValidatingWebhookConfigurationEventHandlerMockRecorder is the mock recorder for MockValidatingWebhookConfigurationEventHandler.
type MockValidatingWebhookConfigurationEventHandlerMockRecorder struct {
	mock *MockValidatingWebhookConfigurationEventHandler
}

// NewMockValidatingWebhookConfigurationEventHandler creates a new mock instance.
func NewMockValidatingWebhookConfigurationEventHandler(ctrl *gomock.Controller) *MockValidatingWebhookConfigurationEventHandler {
	mock := &MockValidatingWebhookConfigurationEventHandler{ctrl: ctrl}
	mock.recorder = &MockValidatingWebhookConfigurationEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatingWebhookConfigurationEventHandler) EXPECT() *MockValidatingWebhookConfigurationEventHandlerMockRecorder {
	return m.recorder
}

// CreateValidatingWebhookConfiguration mocks base method.
func (m *MockValidatingWebhookConfigurationEventHandler) CreateValidatingWebhookConfiguration(obj *v1.ValidatingWebhookConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValidatingWebhookConfiguration", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateValidatingWebhookConfiguration indicates an expected call of CreateValidatingWebhookConfiguration.
func (mr *MockValidatingWebhookConfigurationEventHandlerMockRecorder) CreateValidatingWebhookConfiguration(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValidatingWebhookConfiguration", reflect.TypeOf((*MockValidatingWebhookConfigurationEventHandler)(nil).CreateValidatingWebhookConfiguration), obj)
}

// DeleteValidatingWebhookConfiguration mocks base method.
func (m *MockValidatingWebhookConfigurationEventHandler) DeleteValidatingWebhookConfiguration(obj *v1.ValidatingWebhookConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValidatingWebhookConfiguration", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteValidatingWebhookConfiguration indicates an expected call of DeleteValidatingWebhookConfiguration.
func (mr *MockValidatingWebhookConfigurationEventHandlerMockRecorder) DeleteValidatingWebhookConfiguration(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValidatingWebhookConfiguration", reflect.TypeOf((*MockValidatingWebhookConfigurationEventHandler)(nil).DeleteValidatingWebhookConfiguration), obj)
}

// GenericValidatingWebhookConfiguration mocks base method.
func (m *MockValidatingWebhookConfigurationEventHandler) GenericValidatingWebhookConfiguration(obj *v1.ValidatingWebhookConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericValidatingWebhookConfiguration", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericValidatingWebhookConfiguration indicates an expected call of GenericValidatingWebhookConfiguration.
func (mr *MockValidatingWebhookConfigurationEventHandlerMockRecorder) GenericValidatingWebhookConfiguration(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericValidatingWebhookConfiguration", reflect.TypeOf((*MockValidatingWebhookConfigurationEventHandler)(nil).GenericValidatingWebhookConfiguration), obj)
}

// UpdateValidatingWebhookConfiguration mocks base method.
func (m *MockValidatingWebhookConfigurationEventHandler) UpdateValidatingWebhookConfiguration(old, new *v1.ValidatingWebhookConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValidatingWebhookConfiguration", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValidatingWebhookConfiguration indicates an expected call of UpdateValidatingWebhookConfiguration.
func (mr *MockValidatingWebhookConfigurationEventHandlerMockRecorder) UpdateValidatingWebhookConfiguration(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidatingWebhookConfiguration", reflect.TypeOf((*MockValidatingWebhookConfigurationEventHandler)(nil).UpdateValidatingWebhookConfiguration), old, new)
}

// MockValidatingWebhookConfigurationEventWatcher is a mock of ValidatingWebhookConfigurationEventWatcher interface.
type MockValidatingWebhookConfigurationEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockValidatingWebhookConfigurationEventWatcherMockRecorder
}

// MockValidatingWebhookConfigurationEventWatcherMockRecorder is the mock recorder for MockValidatingWebhookConfigurationEventWatcher.
type MockValidatingWebhookConfigurationEventWatcherMockRecorder struct {
	mock *MockValidatingWebhookConfigurationEventWatcher
}

// NewMockValidatingWebhookConfigurationEventWatcher creates a new mock instance.
func NewMockValidatingWebhookConfigurationEventWatcher(ctrl *gomock.Controller) *MockValidatingWebhookConfigurationEventWatcher {
	mock := &MockValidatingWebhookConfigurationEventWatcher{ctrl: ctrl}
	mock.recorder = &MockValidatingWebhookConfigurationEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatingWebhookConfigurationEventWatcher) EXPECT() *MockValidatingWebhookConfigurationEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockValidatingWebhookConfigurationEventWatcher) AddEventHandler(ctx context.Context, h controller.ValidatingWebhookConfigurationEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockValidatingWebhookConfigurationEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockValidatingWebhookConfigurationEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockMutatingWebhookConfigurationEventHandler is a mock of MutatingWebhookConfigurationEventHandler interface.
type MockMutatingWebhookConfigurationEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMutatingWebhookConfigurationEventHandlerMockRecorder
}

// MockMutatingWebhookConfigurationEventHandlerMockRecorder is the mock recorder for MockMutatingWebhookConfigurationEventHandler.
type MockMutatingWebhookConfigurationEventHandlerMockRecorder struct {
	mock *MockMutatingWebhookConfigurationEventHandler
}

// NewMockMutatingWebhookConfigurationEventHandler creates a new mock instance.
func NewMockMutatingWebhookConfigurationEventHandler(ctrl *gomock.Controller) *MockMutatingWebhookConfigurationEventHandler {
	mock := &MockMutatingWebhookConfigurationEventHandler{ctrl: ctrl}
	mock.recorder = &MockMutatingWebhookConfigurationEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutatingWebhookConfigurationEventHandler) EXPECT() *MockMutatingWebhookConfigurationEventHandlerMockRecorder {
	return m.recorder
}

// CreateMutatingWebhookConfiguration mocks base method.
func (m *MockMutatingWebhookConfigurationEventHandler) CreateMutatingWebhookConfiguration(obj *v1.MutatingWebhookConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMutatingWebhookConfiguration", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMutatingWebhookConfiguration indicates an expected call of CreateMutatingWebhookConfiguration.
func (mr *MockMutatingWebhookConfigurationEventHandlerMockRecorder) CreateMutatingWebhookConfiguration(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMutatingWebhookConfiguration", reflect.TypeOf((*MockMutatingWebhookConfigurationEventHandler)(nil).CreateMutatingWebhookConfiguration), obj)
}

// DeleteMutatingWebhookConfiguration mocks base method.
func (m *MockMutatingWebhookConfigurationEventHandler) DeleteMutatingWebhookConfiguration(obj *v1.MutatingWebhookConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMutatingWebhookConfiguration", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMutatingWebhookConfiguration indicates an expected call of DeleteMutatingWebhookConfiguration.
func (mr *MockMutatingWebhookConfigurationEventHandlerMockRecorder) DeleteMutatingWebhookConfiguration(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMutatingWebhookConfiguration", reflect.TypeOf((*MockMutatingWebhookConfigurationEventHandler)(nil).DeleteMutatingWebhookConfiguration), obj)
}

// GenericMutatingWebhookConfiguration mocks base method.
func (m *MockMutatingWebhookConfigurationEventHandler) GenericMutatingWebhookConfiguration(obj *v1.MutatingWebhookConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericMutatingWebhookConfiguration", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericMutatingWebhookConfiguration indicates an expected call of GenericMutatingWebhookConfiguration.
func (mr *MockMutatingWebhookConfigurationEventHandlerMockRecorder) GenericMutatingWebhookConfiguration(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericMutatingWebhookConfiguration", reflect.TypeOf((*MockMutatingWebhookConfigurationEventHandler)(nil).GenericMutatingWebhookConfiguration), obj)
}

// UpdateMutatingWebhookConfiguration mocks base method.
func (m *MockMutatingWebhookConfigurationEventHandler) UpdateMutatingWebhookConfiguration(old, new *v1.MutatingWebhookConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMutatingWebhookConfiguration", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMutatingWebhookConfiguration indicates an expected call of UpdateMutatingWebhookConfiguration.
func (mr *MockMutatingWebhookConfigurationEventHandlerMockRecorder) UpdateMutatingWebhookConfiguration(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMutatingWebhookConfiguration", reflect.TypeOf((*MockMutatingWebhookConfigurationEventHandler)(nil).UpdateMutatingWebhookConfiguration), old, new)
}

// MockMutatingWebhookConfigurationEventWatcher is a mock of MutatingWebhookConfigurationEventWatcher interface.
type MockMutatingWebhookConfigurationEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMutatingWebhookConfigurationEventWatcherMockRecorder
}

// MockMutatingWebhookConfigurationEventWatcherMockRecorder is the mock recorder for MockMutatingWebhookConfigurationEventWatcher.
type MockMutatingWebhookConfigurationEventWatcherMockRecorder struct {
	mock *MockMutatingWebhookConfigurationEventWatcher
}

// NewMockMutatingWebhookConfigurationEventWatcher creates a new mock instance.
func NewMockMutatingWebhookConfigurationEventWatcher(ctrl *gomock.Controller) *MockMutatingWebhookConfigurationEventWatcher {
	mock := &MockMutatingWebhookConfigurationEventWatcher{ctrl: ctrl}
	mock.recorder = &MockMutatingWebhookConfigurationEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutatingWebhookConfigurationEventWatcher) EXPECT() *MockMutatingWebhookConfigurationEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockMutatingWebhookConfigurationEventWatcher) AddEventHandler(ctx context.Context, h controller.MutatingWebhookConfigurationEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockMutatingWebhookConfigurationEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockMutatingWebhookConfigurationEventWatcher)(nil).AddEventHandler), varargs...)
}

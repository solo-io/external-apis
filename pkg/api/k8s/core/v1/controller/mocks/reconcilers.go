// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1 "k8s.io/api/core/v1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockSecretReconciler is a mock of SecretReconciler interface
type MockSecretReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockSecretReconcilerMockRecorder
}

// MockSecretReconcilerMockRecorder is the mock recorder for MockSecretReconciler
type MockSecretReconcilerMockRecorder struct {
	mock *MockSecretReconciler
}

// NewMockSecretReconciler creates a new mock instance
func NewMockSecretReconciler(ctrl *gomock.Controller) *MockSecretReconciler {
	mock := &MockSecretReconciler{ctrl: ctrl}
	mock.recorder = &MockSecretReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretReconciler) EXPECT() *MockSecretReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSecret mocks base method
func (m *MockSecretReconciler) ReconcileSecret(obj *v1.Secret) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSecret", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSecret indicates an expected call of ReconcileSecret
func (mr *MockSecretReconcilerMockRecorder) ReconcileSecret(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSecret", reflect.TypeOf((*MockSecretReconciler)(nil).ReconcileSecret), obj)
}

// MockSecretDeletionReconciler is a mock of SecretDeletionReconciler interface
type MockSecretDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockSecretDeletionReconcilerMockRecorder
}

// MockSecretDeletionReconcilerMockRecorder is the mock recorder for MockSecretDeletionReconciler
type MockSecretDeletionReconcilerMockRecorder struct {
	mock *MockSecretDeletionReconciler
}

// NewMockSecretDeletionReconciler creates a new mock instance
func NewMockSecretDeletionReconciler(ctrl *gomock.Controller) *MockSecretDeletionReconciler {
	mock := &MockSecretDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockSecretDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretDeletionReconciler) EXPECT() *MockSecretDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSecretDeletion mocks base method
func (m *MockSecretDeletionReconciler) ReconcileSecretDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSecretDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileSecretDeletion indicates an expected call of ReconcileSecretDeletion
func (mr *MockSecretDeletionReconcilerMockRecorder) ReconcileSecretDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSecretDeletion", reflect.TypeOf((*MockSecretDeletionReconciler)(nil).ReconcileSecretDeletion), req)
}

// MockSecretFinalizer is a mock of SecretFinalizer interface
type MockSecretFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockSecretFinalizerMockRecorder
}

// MockSecretFinalizerMockRecorder is the mock recorder for MockSecretFinalizer
type MockSecretFinalizerMockRecorder struct {
	mock *MockSecretFinalizer
}

// NewMockSecretFinalizer creates a new mock instance
func NewMockSecretFinalizer(ctrl *gomock.Controller) *MockSecretFinalizer {
	mock := &MockSecretFinalizer{ctrl: ctrl}
	mock.recorder = &MockSecretFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretFinalizer) EXPECT() *MockSecretFinalizerMockRecorder {
	return m.recorder
}

// ReconcileSecret mocks base method
func (m *MockSecretFinalizer) ReconcileSecret(obj *v1.Secret) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSecret", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSecret indicates an expected call of ReconcileSecret
func (mr *MockSecretFinalizerMockRecorder) ReconcileSecret(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSecret", reflect.TypeOf((*MockSecretFinalizer)(nil).ReconcileSecret), obj)
}

// SecretFinalizerName mocks base method
func (m *MockSecretFinalizer) SecretFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecretFinalizerName indicates an expected call of SecretFinalizerName
func (mr *MockSecretFinalizerMockRecorder) SecretFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretFinalizerName", reflect.TypeOf((*MockSecretFinalizer)(nil).SecretFinalizerName))
}

// FinalizeSecret mocks base method
func (m *MockSecretFinalizer) FinalizeSecret(obj *v1.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeSecret", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeSecret indicates an expected call of FinalizeSecret
func (mr *MockSecretFinalizerMockRecorder) FinalizeSecret(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeSecret", reflect.TypeOf((*MockSecretFinalizer)(nil).FinalizeSecret), obj)
}

// MockSecretReconcileLoop is a mock of SecretReconcileLoop interface
type MockSecretReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockSecretReconcileLoopMockRecorder
}

// MockSecretReconcileLoopMockRecorder is the mock recorder for MockSecretReconcileLoop
type MockSecretReconcileLoopMockRecorder struct {
	mock *MockSecretReconcileLoop
}

// NewMockSecretReconcileLoop creates a new mock instance
func NewMockSecretReconcileLoop(ctrl *gomock.Controller) *MockSecretReconcileLoop {
	mock := &MockSecretReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockSecretReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretReconcileLoop) EXPECT() *MockSecretReconcileLoopMockRecorder {
	return m.recorder
}

// RunSecretReconciler mocks base method
func (m *MockSecretReconcileLoop) RunSecretReconciler(ctx context.Context, rec controller.SecretReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunSecretReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSecretReconciler indicates an expected call of RunSecretReconciler
func (mr *MockSecretReconcileLoopMockRecorder) RunSecretReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSecretReconciler", reflect.TypeOf((*MockSecretReconcileLoop)(nil).RunSecretReconciler), varargs...)
}

// MockServiceAccountReconciler is a mock of ServiceAccountReconciler interface
type MockServiceAccountReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountReconcilerMockRecorder
}

// MockServiceAccountReconcilerMockRecorder is the mock recorder for MockServiceAccountReconciler
type MockServiceAccountReconcilerMockRecorder struct {
	mock *MockServiceAccountReconciler
}

// NewMockServiceAccountReconciler creates a new mock instance
func NewMockServiceAccountReconciler(ctrl *gomock.Controller) *MockServiceAccountReconciler {
	mock := &MockServiceAccountReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceAccountReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceAccountReconciler) EXPECT() *MockServiceAccountReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceAccount mocks base method
func (m *MockServiceAccountReconciler) ReconcileServiceAccount(obj *v1.ServiceAccount) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceAccount", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileServiceAccount indicates an expected call of ReconcileServiceAccount
func (mr *MockServiceAccountReconcilerMockRecorder) ReconcileServiceAccount(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceAccount", reflect.TypeOf((*MockServiceAccountReconciler)(nil).ReconcileServiceAccount), obj)
}

// MockServiceAccountDeletionReconciler is a mock of ServiceAccountDeletionReconciler interface
type MockServiceAccountDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountDeletionReconcilerMockRecorder
}

// MockServiceAccountDeletionReconcilerMockRecorder is the mock recorder for MockServiceAccountDeletionReconciler
type MockServiceAccountDeletionReconcilerMockRecorder struct {
	mock *MockServiceAccountDeletionReconciler
}

// NewMockServiceAccountDeletionReconciler creates a new mock instance
func NewMockServiceAccountDeletionReconciler(ctrl *gomock.Controller) *MockServiceAccountDeletionReconciler {
	mock := &MockServiceAccountDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceAccountDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceAccountDeletionReconciler) EXPECT() *MockServiceAccountDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceAccountDeletion mocks base method
func (m *MockServiceAccountDeletionReconciler) ReconcileServiceAccountDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceAccountDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileServiceAccountDeletion indicates an expected call of ReconcileServiceAccountDeletion
func (mr *MockServiceAccountDeletionReconcilerMockRecorder) ReconcileServiceAccountDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceAccountDeletion", reflect.TypeOf((*MockServiceAccountDeletionReconciler)(nil).ReconcileServiceAccountDeletion), req)
}

// MockServiceAccountFinalizer is a mock of ServiceAccountFinalizer interface
type MockServiceAccountFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountFinalizerMockRecorder
}

// MockServiceAccountFinalizerMockRecorder is the mock recorder for MockServiceAccountFinalizer
type MockServiceAccountFinalizerMockRecorder struct {
	mock *MockServiceAccountFinalizer
}

// NewMockServiceAccountFinalizer creates a new mock instance
func NewMockServiceAccountFinalizer(ctrl *gomock.Controller) *MockServiceAccountFinalizer {
	mock := &MockServiceAccountFinalizer{ctrl: ctrl}
	mock.recorder = &MockServiceAccountFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceAccountFinalizer) EXPECT() *MockServiceAccountFinalizerMockRecorder {
	return m.recorder
}

// ReconcileServiceAccount mocks base method
func (m *MockServiceAccountFinalizer) ReconcileServiceAccount(obj *v1.ServiceAccount) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceAccount", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileServiceAccount indicates an expected call of ReconcileServiceAccount
func (mr *MockServiceAccountFinalizerMockRecorder) ReconcileServiceAccount(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceAccount", reflect.TypeOf((*MockServiceAccountFinalizer)(nil).ReconcileServiceAccount), obj)
}

// ServiceAccountFinalizerName mocks base method
func (m *MockServiceAccountFinalizer) ServiceAccountFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccountFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceAccountFinalizerName indicates an expected call of ServiceAccountFinalizerName
func (mr *MockServiceAccountFinalizerMockRecorder) ServiceAccountFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccountFinalizerName", reflect.TypeOf((*MockServiceAccountFinalizer)(nil).ServiceAccountFinalizerName))
}

// FinalizeServiceAccount mocks base method
func (m *MockServiceAccountFinalizer) FinalizeServiceAccount(obj *v1.ServiceAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeServiceAccount", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeServiceAccount indicates an expected call of FinalizeServiceAccount
func (mr *MockServiceAccountFinalizerMockRecorder) FinalizeServiceAccount(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeServiceAccount", reflect.TypeOf((*MockServiceAccountFinalizer)(nil).FinalizeServiceAccount), obj)
}

// MockServiceAccountReconcileLoop is a mock of ServiceAccountReconcileLoop interface
type MockServiceAccountReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountReconcileLoopMockRecorder
}

// MockServiceAccountReconcileLoopMockRecorder is the mock recorder for MockServiceAccountReconcileLoop
type MockServiceAccountReconcileLoopMockRecorder struct {
	mock *MockServiceAccountReconcileLoop
}

// NewMockServiceAccountReconcileLoop creates a new mock instance
func NewMockServiceAccountReconcileLoop(ctrl *gomock.Controller) *MockServiceAccountReconcileLoop {
	mock := &MockServiceAccountReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockServiceAccountReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceAccountReconcileLoop) EXPECT() *MockServiceAccountReconcileLoopMockRecorder {
	return m.recorder
}

// RunServiceAccountReconciler mocks base method
func (m *MockServiceAccountReconcileLoop) RunServiceAccountReconciler(ctx context.Context, rec controller.ServiceAccountReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunServiceAccountReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunServiceAccountReconciler indicates an expected call of RunServiceAccountReconciler
func (mr *MockServiceAccountReconcileLoopMockRecorder) RunServiceAccountReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunServiceAccountReconciler", reflect.TypeOf((*MockServiceAccountReconcileLoop)(nil).RunServiceAccountReconciler), varargs...)
}

// MockConfigMapReconciler is a mock of ConfigMapReconciler interface
type MockConfigMapReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapReconcilerMockRecorder
}

// MockConfigMapReconcilerMockRecorder is the mock recorder for MockConfigMapReconciler
type MockConfigMapReconcilerMockRecorder struct {
	mock *MockConfigMapReconciler
}

// NewMockConfigMapReconciler creates a new mock instance
func NewMockConfigMapReconciler(ctrl *gomock.Controller) *MockConfigMapReconciler {
	mock := &MockConfigMapReconciler{ctrl: ctrl}
	mock.recorder = &MockConfigMapReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigMapReconciler) EXPECT() *MockConfigMapReconcilerMockRecorder {
	return m.recorder
}

// ReconcileConfigMap mocks base method
func (m *MockConfigMapReconciler) ReconcileConfigMap(obj *v1.ConfigMap) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileConfigMap", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileConfigMap indicates an expected call of ReconcileConfigMap
func (mr *MockConfigMapReconcilerMockRecorder) ReconcileConfigMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileConfigMap", reflect.TypeOf((*MockConfigMapReconciler)(nil).ReconcileConfigMap), obj)
}

// MockConfigMapDeletionReconciler is a mock of ConfigMapDeletionReconciler interface
type MockConfigMapDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapDeletionReconcilerMockRecorder
}

// MockConfigMapDeletionReconcilerMockRecorder is the mock recorder for MockConfigMapDeletionReconciler
type MockConfigMapDeletionReconcilerMockRecorder struct {
	mock *MockConfigMapDeletionReconciler
}

// NewMockConfigMapDeletionReconciler creates a new mock instance
func NewMockConfigMapDeletionReconciler(ctrl *gomock.Controller) *MockConfigMapDeletionReconciler {
	mock := &MockConfigMapDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockConfigMapDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigMapDeletionReconciler) EXPECT() *MockConfigMapDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileConfigMapDeletion mocks base method
func (m *MockConfigMapDeletionReconciler) ReconcileConfigMapDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileConfigMapDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileConfigMapDeletion indicates an expected call of ReconcileConfigMapDeletion
func (mr *MockConfigMapDeletionReconcilerMockRecorder) ReconcileConfigMapDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileConfigMapDeletion", reflect.TypeOf((*MockConfigMapDeletionReconciler)(nil).ReconcileConfigMapDeletion), req)
}

// MockConfigMapFinalizer is a mock of ConfigMapFinalizer interface
type MockConfigMapFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapFinalizerMockRecorder
}

// MockConfigMapFinalizerMockRecorder is the mock recorder for MockConfigMapFinalizer
type MockConfigMapFinalizerMockRecorder struct {
	mock *MockConfigMapFinalizer
}

// NewMockConfigMapFinalizer creates a new mock instance
func NewMockConfigMapFinalizer(ctrl *gomock.Controller) *MockConfigMapFinalizer {
	mock := &MockConfigMapFinalizer{ctrl: ctrl}
	mock.recorder = &MockConfigMapFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigMapFinalizer) EXPECT() *MockConfigMapFinalizerMockRecorder {
	return m.recorder
}

// ReconcileConfigMap mocks base method
func (m *MockConfigMapFinalizer) ReconcileConfigMap(obj *v1.ConfigMap) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileConfigMap", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileConfigMap indicates an expected call of ReconcileConfigMap
func (mr *MockConfigMapFinalizerMockRecorder) ReconcileConfigMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileConfigMap", reflect.TypeOf((*MockConfigMapFinalizer)(nil).ReconcileConfigMap), obj)
}

// ConfigMapFinalizerName mocks base method
func (m *MockConfigMapFinalizer) ConfigMapFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMapFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigMapFinalizerName indicates an expected call of ConfigMapFinalizerName
func (mr *MockConfigMapFinalizerMockRecorder) ConfigMapFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMapFinalizerName", reflect.TypeOf((*MockConfigMapFinalizer)(nil).ConfigMapFinalizerName))
}

// FinalizeConfigMap mocks base method
func (m *MockConfigMapFinalizer) FinalizeConfigMap(obj *v1.ConfigMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeConfigMap", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeConfigMap indicates an expected call of FinalizeConfigMap
func (mr *MockConfigMapFinalizerMockRecorder) FinalizeConfigMap(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeConfigMap", reflect.TypeOf((*MockConfigMapFinalizer)(nil).FinalizeConfigMap), obj)
}

// MockConfigMapReconcileLoop is a mock of ConfigMapReconcileLoop interface
type MockConfigMapReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapReconcileLoopMockRecorder
}

// MockConfigMapReconcileLoopMockRecorder is the mock recorder for MockConfigMapReconcileLoop
type MockConfigMapReconcileLoopMockRecorder struct {
	mock *MockConfigMapReconcileLoop
}

// NewMockConfigMapReconcileLoop creates a new mock instance
func NewMockConfigMapReconcileLoop(ctrl *gomock.Controller) *MockConfigMapReconcileLoop {
	mock := &MockConfigMapReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockConfigMapReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigMapReconcileLoop) EXPECT() *MockConfigMapReconcileLoopMockRecorder {
	return m.recorder
}

// RunConfigMapReconciler mocks base method
func (m *MockConfigMapReconcileLoop) RunConfigMapReconciler(ctx context.Context, rec controller.ConfigMapReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunConfigMapReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunConfigMapReconciler indicates an expected call of RunConfigMapReconciler
func (mr *MockConfigMapReconcileLoopMockRecorder) RunConfigMapReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunConfigMapReconciler", reflect.TypeOf((*MockConfigMapReconcileLoop)(nil).RunConfigMapReconciler), varargs...)
}

// MockServiceReconciler is a mock of ServiceReconciler interface
type MockServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceReconcilerMockRecorder
}

// MockServiceReconcilerMockRecorder is the mock recorder for MockServiceReconciler
type MockServiceReconcilerMockRecorder struct {
	mock *MockServiceReconciler
}

// NewMockServiceReconciler creates a new mock instance
func NewMockServiceReconciler(ctrl *gomock.Controller) *MockServiceReconciler {
	mock := &MockServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceReconciler) EXPECT() *MockServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileService mocks base method
func (m *MockServiceReconciler) ReconcileService(obj *v1.Service) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileService indicates an expected call of ReconcileService
func (mr *MockServiceReconcilerMockRecorder) ReconcileService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileService", reflect.TypeOf((*MockServiceReconciler)(nil).ReconcileService), obj)
}

// MockServiceDeletionReconciler is a mock of ServiceDeletionReconciler interface
type MockServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDeletionReconcilerMockRecorder
}

// MockServiceDeletionReconcilerMockRecorder is the mock recorder for MockServiceDeletionReconciler
type MockServiceDeletionReconcilerMockRecorder struct {
	mock *MockServiceDeletionReconciler
}

// NewMockServiceDeletionReconciler creates a new mock instance
func NewMockServiceDeletionReconciler(ctrl *gomock.Controller) *MockServiceDeletionReconciler {
	mock := &MockServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceDeletionReconciler) EXPECT() *MockServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceDeletion mocks base method
func (m *MockServiceDeletionReconciler) ReconcileServiceDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileServiceDeletion indicates an expected call of ReconcileServiceDeletion
func (mr *MockServiceDeletionReconcilerMockRecorder) ReconcileServiceDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceDeletion", reflect.TypeOf((*MockServiceDeletionReconciler)(nil).ReconcileServiceDeletion), req)
}

// MockServiceFinalizer is a mock of ServiceFinalizer interface
type MockServiceFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceFinalizerMockRecorder
}

// MockServiceFinalizerMockRecorder is the mock recorder for MockServiceFinalizer
type MockServiceFinalizerMockRecorder struct {
	mock *MockServiceFinalizer
}

// NewMockServiceFinalizer creates a new mock instance
func NewMockServiceFinalizer(ctrl *gomock.Controller) *MockServiceFinalizer {
	mock := &MockServiceFinalizer{ctrl: ctrl}
	mock.recorder = &MockServiceFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceFinalizer) EXPECT() *MockServiceFinalizerMockRecorder {
	return m.recorder
}

// ReconcileService mocks base method
func (m *MockServiceFinalizer) ReconcileService(obj *v1.Service) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileService indicates an expected call of ReconcileService
func (mr *MockServiceFinalizerMockRecorder) ReconcileService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileService", reflect.TypeOf((*MockServiceFinalizer)(nil).ReconcileService), obj)
}

// ServiceFinalizerName mocks base method
func (m *MockServiceFinalizer) ServiceFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceFinalizerName indicates an expected call of ServiceFinalizerName
func (mr *MockServiceFinalizerMockRecorder) ServiceFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceFinalizerName", reflect.TypeOf((*MockServiceFinalizer)(nil).ServiceFinalizerName))
}

// FinalizeService mocks base method
func (m *MockServiceFinalizer) FinalizeService(obj *v1.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeService", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeService indicates an expected call of FinalizeService
func (mr *MockServiceFinalizerMockRecorder) FinalizeService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeService", reflect.TypeOf((*MockServiceFinalizer)(nil).FinalizeService), obj)
}

// MockServiceReconcileLoop is a mock of ServiceReconcileLoop interface
type MockServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockServiceReconcileLoopMockRecorder
}

// MockServiceReconcileLoopMockRecorder is the mock recorder for MockServiceReconcileLoop
type MockServiceReconcileLoopMockRecorder struct {
	mock *MockServiceReconcileLoop
}

// NewMockServiceReconcileLoop creates a new mock instance
func NewMockServiceReconcileLoop(ctrl *gomock.Controller) *MockServiceReconcileLoop {
	mock := &MockServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceReconcileLoop) EXPECT() *MockServiceReconcileLoopMockRecorder {
	return m.recorder
}

// RunServiceReconciler mocks base method
func (m *MockServiceReconcileLoop) RunServiceReconciler(ctx context.Context, rec controller.ServiceReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunServiceReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunServiceReconciler indicates an expected call of RunServiceReconciler
func (mr *MockServiceReconcileLoopMockRecorder) RunServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunServiceReconciler", reflect.TypeOf((*MockServiceReconcileLoop)(nil).RunServiceReconciler), varargs...)
}

// MockPodReconciler is a mock of PodReconciler interface
type MockPodReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPodReconcilerMockRecorder
}

// MockPodReconcilerMockRecorder is the mock recorder for MockPodReconciler
type MockPodReconcilerMockRecorder struct {
	mock *MockPodReconciler
}

// NewMockPodReconciler creates a new mock instance
func NewMockPodReconciler(ctrl *gomock.Controller) *MockPodReconciler {
	mock := &MockPodReconciler{ctrl: ctrl}
	mock.recorder = &MockPodReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodReconciler) EXPECT() *MockPodReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePod mocks base method
func (m *MockPodReconciler) ReconcilePod(obj *v1.Pod) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePod", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePod indicates an expected call of ReconcilePod
func (mr *MockPodReconcilerMockRecorder) ReconcilePod(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePod", reflect.TypeOf((*MockPodReconciler)(nil).ReconcilePod), obj)
}

// MockPodDeletionReconciler is a mock of PodDeletionReconciler interface
type MockPodDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockPodDeletionReconcilerMockRecorder
}

// MockPodDeletionReconcilerMockRecorder is the mock recorder for MockPodDeletionReconciler
type MockPodDeletionReconcilerMockRecorder struct {
	mock *MockPodDeletionReconciler
}

// NewMockPodDeletionReconciler creates a new mock instance
func NewMockPodDeletionReconciler(ctrl *gomock.Controller) *MockPodDeletionReconciler {
	mock := &MockPodDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockPodDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodDeletionReconciler) EXPECT() *MockPodDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcilePodDeletion mocks base method
func (m *MockPodDeletionReconciler) ReconcilePodDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePodDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcilePodDeletion indicates an expected call of ReconcilePodDeletion
func (mr *MockPodDeletionReconcilerMockRecorder) ReconcilePodDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePodDeletion", reflect.TypeOf((*MockPodDeletionReconciler)(nil).ReconcilePodDeletion), req)
}

// MockPodFinalizer is a mock of PodFinalizer interface
type MockPodFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockPodFinalizerMockRecorder
}

// MockPodFinalizerMockRecorder is the mock recorder for MockPodFinalizer
type MockPodFinalizerMockRecorder struct {
	mock *MockPodFinalizer
}

// NewMockPodFinalizer creates a new mock instance
func NewMockPodFinalizer(ctrl *gomock.Controller) *MockPodFinalizer {
	mock := &MockPodFinalizer{ctrl: ctrl}
	mock.recorder = &MockPodFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodFinalizer) EXPECT() *MockPodFinalizerMockRecorder {
	return m.recorder
}

// ReconcilePod mocks base method
func (m *MockPodFinalizer) ReconcilePod(obj *v1.Pod) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcilePod", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcilePod indicates an expected call of ReconcilePod
func (mr *MockPodFinalizerMockRecorder) ReconcilePod(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcilePod", reflect.TypeOf((*MockPodFinalizer)(nil).ReconcilePod), obj)
}

// PodFinalizerName mocks base method
func (m *MockPodFinalizer) PodFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PodFinalizerName indicates an expected call of PodFinalizerName
func (mr *MockPodFinalizerMockRecorder) PodFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodFinalizerName", reflect.TypeOf((*MockPodFinalizer)(nil).PodFinalizerName))
}

// FinalizePod mocks base method
func (m *MockPodFinalizer) FinalizePod(obj *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizePod", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizePod indicates an expected call of FinalizePod
func (mr *MockPodFinalizerMockRecorder) FinalizePod(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizePod", reflect.TypeOf((*MockPodFinalizer)(nil).FinalizePod), obj)
}

// MockPodReconcileLoop is a mock of PodReconcileLoop interface
type MockPodReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockPodReconcileLoopMockRecorder
}

// MockPodReconcileLoopMockRecorder is the mock recorder for MockPodReconcileLoop
type MockPodReconcileLoopMockRecorder struct {
	mock *MockPodReconcileLoop
}

// NewMockPodReconcileLoop creates a new mock instance
func NewMockPodReconcileLoop(ctrl *gomock.Controller) *MockPodReconcileLoop {
	mock := &MockPodReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockPodReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodReconcileLoop) EXPECT() *MockPodReconcileLoopMockRecorder {
	return m.recorder
}

// RunPodReconciler mocks base method
func (m *MockPodReconcileLoop) RunPodReconciler(ctx context.Context, rec controller.PodReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunPodReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPodReconciler indicates an expected call of RunPodReconciler
func (mr *MockPodReconcileLoopMockRecorder) RunPodReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPodReconciler", reflect.TypeOf((*MockPodReconcileLoop)(nil).RunPodReconciler), varargs...)
}

// MockEndpointsReconciler is a mock of EndpointsReconciler interface
type MockEndpointsReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsReconcilerMockRecorder
}

// MockEndpointsReconcilerMockRecorder is the mock recorder for MockEndpointsReconciler
type MockEndpointsReconcilerMockRecorder struct {
	mock *MockEndpointsReconciler
}

// NewMockEndpointsReconciler creates a new mock instance
func NewMockEndpointsReconciler(ctrl *gomock.Controller) *MockEndpointsReconciler {
	mock := &MockEndpointsReconciler{ctrl: ctrl}
	mock.recorder = &MockEndpointsReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEndpointsReconciler) EXPECT() *MockEndpointsReconcilerMockRecorder {
	return m.recorder
}

// ReconcileEndpoints mocks base method
func (m *MockEndpointsReconciler) ReconcileEndpoints(obj *v1.Endpoints) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileEndpoints", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileEndpoints indicates an expected call of ReconcileEndpoints
func (mr *MockEndpointsReconcilerMockRecorder) ReconcileEndpoints(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileEndpoints", reflect.TypeOf((*MockEndpointsReconciler)(nil).ReconcileEndpoints), obj)
}

// MockEndpointsDeletionReconciler is a mock of EndpointsDeletionReconciler interface
type MockEndpointsDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsDeletionReconcilerMockRecorder
}

// MockEndpointsDeletionReconcilerMockRecorder is the mock recorder for MockEndpointsDeletionReconciler
type MockEndpointsDeletionReconcilerMockRecorder struct {
	mock *MockEndpointsDeletionReconciler
}

// NewMockEndpointsDeletionReconciler creates a new mock instance
func NewMockEndpointsDeletionReconciler(ctrl *gomock.Controller) *MockEndpointsDeletionReconciler {
	mock := &MockEndpointsDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockEndpointsDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEndpointsDeletionReconciler) EXPECT() *MockEndpointsDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileEndpointsDeletion mocks base method
func (m *MockEndpointsDeletionReconciler) ReconcileEndpointsDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileEndpointsDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileEndpointsDeletion indicates an expected call of ReconcileEndpointsDeletion
func (mr *MockEndpointsDeletionReconcilerMockRecorder) ReconcileEndpointsDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileEndpointsDeletion", reflect.TypeOf((*MockEndpointsDeletionReconciler)(nil).ReconcileEndpointsDeletion), req)
}

// MockEndpointsFinalizer is a mock of EndpointsFinalizer interface
type MockEndpointsFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsFinalizerMockRecorder
}

// MockEndpointsFinalizerMockRecorder is the mock recorder for MockEndpointsFinalizer
type MockEndpointsFinalizerMockRecorder struct {
	mock *MockEndpointsFinalizer
}

// NewMockEndpointsFinalizer creates a new mock instance
func NewMockEndpointsFinalizer(ctrl *gomock.Controller) *MockEndpointsFinalizer {
	mock := &MockEndpointsFinalizer{ctrl: ctrl}
	mock.recorder = &MockEndpointsFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEndpointsFinalizer) EXPECT() *MockEndpointsFinalizerMockRecorder {
	return m.recorder
}

// ReconcileEndpoints mocks base method
func (m *MockEndpointsFinalizer) ReconcileEndpoints(obj *v1.Endpoints) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileEndpoints", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileEndpoints indicates an expected call of ReconcileEndpoints
func (mr *MockEndpointsFinalizerMockRecorder) ReconcileEndpoints(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileEndpoints", reflect.TypeOf((*MockEndpointsFinalizer)(nil).ReconcileEndpoints), obj)
}

// EndpointsFinalizerName mocks base method
func (m *MockEndpointsFinalizer) EndpointsFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointsFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// EndpointsFinalizerName indicates an expected call of EndpointsFinalizerName
func (mr *MockEndpointsFinalizerMockRecorder) EndpointsFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointsFinalizerName", reflect.TypeOf((*MockEndpointsFinalizer)(nil).EndpointsFinalizerName))
}

// FinalizeEndpoints mocks base method
func (m *MockEndpointsFinalizer) FinalizeEndpoints(obj *v1.Endpoints) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeEndpoints", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeEndpoints indicates an expected call of FinalizeEndpoints
func (mr *MockEndpointsFinalizerMockRecorder) FinalizeEndpoints(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeEndpoints", reflect.TypeOf((*MockEndpointsFinalizer)(nil).FinalizeEndpoints), obj)
}

// MockEndpointsReconcileLoop is a mock of EndpointsReconcileLoop interface
type MockEndpointsReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointsReconcileLoopMockRecorder
}

// MockEndpointsReconcileLoopMockRecorder is the mock recorder for MockEndpointsReconcileLoop
type MockEndpointsReconcileLoopMockRecorder struct {
	mock *MockEndpointsReconcileLoop
}

// NewMockEndpointsReconcileLoop creates a new mock instance
func NewMockEndpointsReconcileLoop(ctrl *gomock.Controller) *MockEndpointsReconcileLoop {
	mock := &MockEndpointsReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockEndpointsReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEndpointsReconcileLoop) EXPECT() *MockEndpointsReconcileLoopMockRecorder {
	return m.recorder
}

// RunEndpointsReconciler mocks base method
func (m *MockEndpointsReconcileLoop) RunEndpointsReconciler(ctx context.Context, rec controller.EndpointsReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunEndpointsReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunEndpointsReconciler indicates an expected call of RunEndpointsReconciler
func (mr *MockEndpointsReconcileLoopMockRecorder) RunEndpointsReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunEndpointsReconciler", reflect.TypeOf((*MockEndpointsReconcileLoop)(nil).RunEndpointsReconciler), varargs...)
}

// MockNamespaceReconciler is a mock of NamespaceReconciler interface
type MockNamespaceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceReconcilerMockRecorder
}

// MockNamespaceReconcilerMockRecorder is the mock recorder for MockNamespaceReconciler
type MockNamespaceReconcilerMockRecorder struct {
	mock *MockNamespaceReconciler
}

// NewMockNamespaceReconciler creates a new mock instance
func NewMockNamespaceReconciler(ctrl *gomock.Controller) *MockNamespaceReconciler {
	mock := &MockNamespaceReconciler{ctrl: ctrl}
	mock.recorder = &MockNamespaceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceReconciler) EXPECT() *MockNamespaceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileNamespace mocks base method
func (m *MockNamespaceReconciler) ReconcileNamespace(obj *v1.Namespace) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileNamespace", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileNamespace indicates an expected call of ReconcileNamespace
func (mr *MockNamespaceReconcilerMockRecorder) ReconcileNamespace(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileNamespace", reflect.TypeOf((*MockNamespaceReconciler)(nil).ReconcileNamespace), obj)
}

// MockNamespaceDeletionReconciler is a mock of NamespaceDeletionReconciler interface
type MockNamespaceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceDeletionReconcilerMockRecorder
}

// MockNamespaceDeletionReconcilerMockRecorder is the mock recorder for MockNamespaceDeletionReconciler
type MockNamespaceDeletionReconcilerMockRecorder struct {
	mock *MockNamespaceDeletionReconciler
}

// NewMockNamespaceDeletionReconciler creates a new mock instance
func NewMockNamespaceDeletionReconciler(ctrl *gomock.Controller) *MockNamespaceDeletionReconciler {
	mock := &MockNamespaceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockNamespaceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceDeletionReconciler) EXPECT() *MockNamespaceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileNamespaceDeletion mocks base method
func (m *MockNamespaceDeletionReconciler) ReconcileNamespaceDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileNamespaceDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileNamespaceDeletion indicates an expected call of ReconcileNamespaceDeletion
func (mr *MockNamespaceDeletionReconcilerMockRecorder) ReconcileNamespaceDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileNamespaceDeletion", reflect.TypeOf((*MockNamespaceDeletionReconciler)(nil).ReconcileNamespaceDeletion), req)
}

// MockNamespaceFinalizer is a mock of NamespaceFinalizer interface
type MockNamespaceFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceFinalizerMockRecorder
}

// MockNamespaceFinalizerMockRecorder is the mock recorder for MockNamespaceFinalizer
type MockNamespaceFinalizerMockRecorder struct {
	mock *MockNamespaceFinalizer
}

// NewMockNamespaceFinalizer creates a new mock instance
func NewMockNamespaceFinalizer(ctrl *gomock.Controller) *MockNamespaceFinalizer {
	mock := &MockNamespaceFinalizer{ctrl: ctrl}
	mock.recorder = &MockNamespaceFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceFinalizer) EXPECT() *MockNamespaceFinalizerMockRecorder {
	return m.recorder
}

// ReconcileNamespace mocks base method
func (m *MockNamespaceFinalizer) ReconcileNamespace(obj *v1.Namespace) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileNamespace", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileNamespace indicates an expected call of ReconcileNamespace
func (mr *MockNamespaceFinalizerMockRecorder) ReconcileNamespace(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileNamespace", reflect.TypeOf((*MockNamespaceFinalizer)(nil).ReconcileNamespace), obj)
}

// NamespaceFinalizerName mocks base method
func (m *MockNamespaceFinalizer) NamespaceFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceFinalizerName indicates an expected call of NamespaceFinalizerName
func (mr *MockNamespaceFinalizerMockRecorder) NamespaceFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceFinalizerName", reflect.TypeOf((*MockNamespaceFinalizer)(nil).NamespaceFinalizerName))
}

// FinalizeNamespace mocks base method
func (m *MockNamespaceFinalizer) FinalizeNamespace(obj *v1.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeNamespace", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeNamespace indicates an expected call of FinalizeNamespace
func (mr *MockNamespaceFinalizerMockRecorder) FinalizeNamespace(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeNamespace", reflect.TypeOf((*MockNamespaceFinalizer)(nil).FinalizeNamespace), obj)
}

// MockNamespaceReconcileLoop is a mock of NamespaceReconcileLoop interface
type MockNamespaceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceReconcileLoopMockRecorder
}

// MockNamespaceReconcileLoopMockRecorder is the mock recorder for MockNamespaceReconcileLoop
type MockNamespaceReconcileLoopMockRecorder struct {
	mock *MockNamespaceReconcileLoop
}

// NewMockNamespaceReconcileLoop creates a new mock instance
func NewMockNamespaceReconcileLoop(ctrl *gomock.Controller) *MockNamespaceReconcileLoop {
	mock := &MockNamespaceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockNamespaceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceReconcileLoop) EXPECT() *MockNamespaceReconcileLoopMockRecorder {
	return m.recorder
}

// RunNamespaceReconciler mocks base method
func (m *MockNamespaceReconcileLoop) RunNamespaceReconciler(ctx context.Context, rec controller.NamespaceReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunNamespaceReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunNamespaceReconciler indicates an expected call of RunNamespaceReconciler
func (mr *MockNamespaceReconcileLoopMockRecorder) RunNamespaceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunNamespaceReconciler", reflect.TypeOf((*MockNamespaceReconcileLoop)(nil).RunNamespaceReconciler), varargs...)
}

// MockNodeReconciler is a mock of NodeReconciler interface
type MockNodeReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockNodeReconcilerMockRecorder
}

// MockNodeReconcilerMockRecorder is the mock recorder for MockNodeReconciler
type MockNodeReconcilerMockRecorder struct {
	mock *MockNodeReconciler
}

// NewMockNodeReconciler creates a new mock instance
func NewMockNodeReconciler(ctrl *gomock.Controller) *MockNodeReconciler {
	mock := &MockNodeReconciler{ctrl: ctrl}
	mock.recorder = &MockNodeReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeReconciler) EXPECT() *MockNodeReconcilerMockRecorder {
	return m.recorder
}

// ReconcileNode mocks base method
func (m *MockNodeReconciler) ReconcileNode(obj *v1.Node) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileNode", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileNode indicates an expected call of ReconcileNode
func (mr *MockNodeReconcilerMockRecorder) ReconcileNode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileNode", reflect.TypeOf((*MockNodeReconciler)(nil).ReconcileNode), obj)
}

// MockNodeDeletionReconciler is a mock of NodeDeletionReconciler interface
type MockNodeDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockNodeDeletionReconcilerMockRecorder
}

// MockNodeDeletionReconcilerMockRecorder is the mock recorder for MockNodeDeletionReconciler
type MockNodeDeletionReconcilerMockRecorder struct {
	mock *MockNodeDeletionReconciler
}

// NewMockNodeDeletionReconciler creates a new mock instance
func NewMockNodeDeletionReconciler(ctrl *gomock.Controller) *MockNodeDeletionReconciler {
	mock := &MockNodeDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockNodeDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeDeletionReconciler) EXPECT() *MockNodeDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileNodeDeletion mocks base method
func (m *MockNodeDeletionReconciler) ReconcileNodeDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileNodeDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileNodeDeletion indicates an expected call of ReconcileNodeDeletion
func (mr *MockNodeDeletionReconcilerMockRecorder) ReconcileNodeDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileNodeDeletion", reflect.TypeOf((*MockNodeDeletionReconciler)(nil).ReconcileNodeDeletion), req)
}

// MockNodeFinalizer is a mock of NodeFinalizer interface
type MockNodeFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeFinalizerMockRecorder
}

// MockNodeFinalizerMockRecorder is the mock recorder for MockNodeFinalizer
type MockNodeFinalizerMockRecorder struct {
	mock *MockNodeFinalizer
}

// NewMockNodeFinalizer creates a new mock instance
func NewMockNodeFinalizer(ctrl *gomock.Controller) *MockNodeFinalizer {
	mock := &MockNodeFinalizer{ctrl: ctrl}
	mock.recorder = &MockNodeFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeFinalizer) EXPECT() *MockNodeFinalizerMockRecorder {
	return m.recorder
}

// ReconcileNode mocks base method
func (m *MockNodeFinalizer) ReconcileNode(obj *v1.Node) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileNode", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileNode indicates an expected call of ReconcileNode
func (mr *MockNodeFinalizerMockRecorder) ReconcileNode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileNode", reflect.TypeOf((*MockNodeFinalizer)(nil).ReconcileNode), obj)
}

// NodeFinalizerName mocks base method
func (m *MockNodeFinalizer) NodeFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeFinalizerName indicates an expected call of NodeFinalizerName
func (mr *MockNodeFinalizerMockRecorder) NodeFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeFinalizerName", reflect.TypeOf((*MockNodeFinalizer)(nil).NodeFinalizerName))
}

// FinalizeNode mocks base method
func (m *MockNodeFinalizer) FinalizeNode(obj *v1.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeNode", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeNode indicates an expected call of FinalizeNode
func (mr *MockNodeFinalizerMockRecorder) FinalizeNode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeNode", reflect.TypeOf((*MockNodeFinalizer)(nil).FinalizeNode), obj)
}

// MockNodeReconcileLoop is a mock of NodeReconcileLoop interface
type MockNodeReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockNodeReconcileLoopMockRecorder
}

// MockNodeReconcileLoopMockRecorder is the mock recorder for MockNodeReconcileLoop
type MockNodeReconcileLoopMockRecorder struct {
	mock *MockNodeReconcileLoop
}

// NewMockNodeReconcileLoop creates a new mock instance
func NewMockNodeReconcileLoop(ctrl *gomock.Controller) *MockNodeReconcileLoop {
	mock := &MockNodeReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockNodeReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeReconcileLoop) EXPECT() *MockNodeReconcileLoopMockRecorder {
	return m.recorder
}

// RunNodeReconciler mocks base method
func (m *MockNodeReconcileLoop) RunNodeReconciler(ctx context.Context, rec controller.NodeReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunNodeReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunNodeReconciler indicates an expected call of RunNodeReconciler
func (mr *MockNodeReconcileLoopMockRecorder) RunNodeReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunNodeReconciler", reflect.TypeOf((*MockNodeReconcileLoop)(nil).RunNodeReconciler), varargs...)
}

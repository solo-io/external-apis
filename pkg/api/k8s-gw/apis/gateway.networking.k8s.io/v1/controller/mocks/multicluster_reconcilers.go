// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/k8s-gw/apis/gateway.networking.k8s.io/v1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
	v1 "sigs.k8s.io/gateway-api/apis/v1"
)

// MockMulticlusterGatewayClassReconciler is a mock of MulticlusterGatewayClassReconciler interface.
type MockMulticlusterGatewayClassReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayClassReconcilerMockRecorder
}

// MockMulticlusterGatewayClassReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayClassReconciler.
type MockMulticlusterGatewayClassReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayClassReconciler
}

// NewMockMulticlusterGatewayClassReconciler creates a new mock instance.
func NewMockMulticlusterGatewayClassReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayClassReconciler {
	mock := &MockMulticlusterGatewayClassReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayClassReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayClassReconciler) EXPECT() *MockMulticlusterGatewayClassReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayClass mocks base method.
func (m *MockMulticlusterGatewayClassReconciler) ReconcileGatewayClass(clusterName string, obj *v1.GatewayClass) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayClass", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGatewayClass indicates an expected call of ReconcileGatewayClass.
func (mr *MockMulticlusterGatewayClassReconcilerMockRecorder) ReconcileGatewayClass(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayClass", reflect.TypeOf((*MockMulticlusterGatewayClassReconciler)(nil).ReconcileGatewayClass), clusterName, obj)
}

// MockMulticlusterGatewayClassDeletionReconciler is a mock of MulticlusterGatewayClassDeletionReconciler interface.
type MockMulticlusterGatewayClassDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayClassDeletionReconcilerMockRecorder
}

// MockMulticlusterGatewayClassDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayClassDeletionReconciler.
type MockMulticlusterGatewayClassDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayClassDeletionReconciler
}

// NewMockMulticlusterGatewayClassDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGatewayClassDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayClassDeletionReconciler {
	mock := &MockMulticlusterGatewayClassDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayClassDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayClassDeletionReconciler) EXPECT() *MockMulticlusterGatewayClassDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayClassDeletion mocks base method.
func (m *MockMulticlusterGatewayClassDeletionReconciler) ReconcileGatewayClassDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayClassDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGatewayClassDeletion indicates an expected call of ReconcileGatewayClassDeletion.
func (mr *MockMulticlusterGatewayClassDeletionReconcilerMockRecorder) ReconcileGatewayClassDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayClassDeletion", reflect.TypeOf((*MockMulticlusterGatewayClassDeletionReconciler)(nil).ReconcileGatewayClassDeletion), clusterName, req)
}

// MockMulticlusterGatewayClassReconcileLoop is a mock of MulticlusterGatewayClassReconcileLoop interface.
type MockMulticlusterGatewayClassReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayClassReconcileLoopMockRecorder
}

// MockMulticlusterGatewayClassReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGatewayClassReconcileLoop.
type MockMulticlusterGatewayClassReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGatewayClassReconcileLoop
}

// NewMockMulticlusterGatewayClassReconcileLoop creates a new mock instance.
func NewMockMulticlusterGatewayClassReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGatewayClassReconcileLoop {
	mock := &MockMulticlusterGatewayClassReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayClassReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayClassReconcileLoop) EXPECT() *MockMulticlusterGatewayClassReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGatewayClassReconciler mocks base method.
func (m *MockMulticlusterGatewayClassReconcileLoop) AddMulticlusterGatewayClassReconciler(ctx context.Context, rec controller.MulticlusterGatewayClassReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGatewayClassReconciler", varargs...)
}

// AddMulticlusterGatewayClassReconciler indicates an expected call of AddMulticlusterGatewayClassReconciler.
func (mr *MockMulticlusterGatewayClassReconcileLoopMockRecorder) AddMulticlusterGatewayClassReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGatewayClassReconciler", reflect.TypeOf((*MockMulticlusterGatewayClassReconcileLoop)(nil).AddMulticlusterGatewayClassReconciler), varargs...)
}

// MockMulticlusterGatewayReconciler is a mock of MulticlusterGatewayReconciler interface.
type MockMulticlusterGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayReconcilerMockRecorder
}

// MockMulticlusterGatewayReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayReconciler.
type MockMulticlusterGatewayReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayReconciler
}

// NewMockMulticlusterGatewayReconciler creates a new mock instance.
func NewMockMulticlusterGatewayReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayReconciler {
	mock := &MockMulticlusterGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayReconciler) EXPECT() *MockMulticlusterGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGateway mocks base method.
func (m *MockMulticlusterGatewayReconciler) ReconcileGateway(clusterName string, obj *v1.Gateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGateway", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGateway indicates an expected call of ReconcileGateway.
func (mr *MockMulticlusterGatewayReconcilerMockRecorder) ReconcileGateway(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGateway", reflect.TypeOf((*MockMulticlusterGatewayReconciler)(nil).ReconcileGateway), clusterName, obj)
}

// MockMulticlusterGatewayDeletionReconciler is a mock of MulticlusterGatewayDeletionReconciler interface.
type MockMulticlusterGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayDeletionReconcilerMockRecorder
}

// MockMulticlusterGatewayDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayDeletionReconciler.
type MockMulticlusterGatewayDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayDeletionReconciler
}

// NewMockMulticlusterGatewayDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGatewayDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayDeletionReconciler {
	mock := &MockMulticlusterGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayDeletionReconciler) EXPECT() *MockMulticlusterGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayDeletion mocks base method.
func (m *MockMulticlusterGatewayDeletionReconciler) ReconcileGatewayDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGatewayDeletion indicates an expected call of ReconcileGatewayDeletion.
func (mr *MockMulticlusterGatewayDeletionReconcilerMockRecorder) ReconcileGatewayDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayDeletion", reflect.TypeOf((*MockMulticlusterGatewayDeletionReconciler)(nil).ReconcileGatewayDeletion), clusterName, req)
}

// MockMulticlusterGatewayReconcileLoop is a mock of MulticlusterGatewayReconcileLoop interface.
type MockMulticlusterGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayReconcileLoopMockRecorder
}

// MockMulticlusterGatewayReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGatewayReconcileLoop.
type MockMulticlusterGatewayReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGatewayReconcileLoop
}

// NewMockMulticlusterGatewayReconcileLoop creates a new mock instance.
func NewMockMulticlusterGatewayReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGatewayReconcileLoop {
	mock := &MockMulticlusterGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayReconcileLoop) EXPECT() *MockMulticlusterGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGatewayReconciler mocks base method.
func (m *MockMulticlusterGatewayReconcileLoop) AddMulticlusterGatewayReconciler(ctx context.Context, rec controller.MulticlusterGatewayReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGatewayReconciler", varargs...)
}

// AddMulticlusterGatewayReconciler indicates an expected call of AddMulticlusterGatewayReconciler.
func (mr *MockMulticlusterGatewayReconcileLoopMockRecorder) AddMulticlusterGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGatewayReconciler", reflect.TypeOf((*MockMulticlusterGatewayReconcileLoop)(nil).AddMulticlusterGatewayReconciler), varargs...)
}

// MockMulticlusterHTTPRouteReconciler is a mock of MulticlusterHTTPRouteReconciler interface.
type MockMulticlusterHTTPRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPRouteReconcilerMockRecorder
}

// MockMulticlusterHTTPRouteReconcilerMockRecorder is the mock recorder for MockMulticlusterHTTPRouteReconciler.
type MockMulticlusterHTTPRouteReconcilerMockRecorder struct {
	mock *MockMulticlusterHTTPRouteReconciler
}

// NewMockMulticlusterHTTPRouteReconciler creates a new mock instance.
func NewMockMulticlusterHTTPRouteReconciler(ctrl *gomock.Controller) *MockMulticlusterHTTPRouteReconciler {
	mock := &MockMulticlusterHTTPRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHTTPRouteReconciler) EXPECT() *MockMulticlusterHTTPRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHTTPRoute mocks base method.
func (m *MockMulticlusterHTTPRouteReconciler) ReconcileHTTPRoute(clusterName string, obj *v1.HTTPRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHTTPRoute", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileHTTPRoute indicates an expected call of ReconcileHTTPRoute.
func (mr *MockMulticlusterHTTPRouteReconcilerMockRecorder) ReconcileHTTPRoute(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHTTPRoute", reflect.TypeOf((*MockMulticlusterHTTPRouteReconciler)(nil).ReconcileHTTPRoute), clusterName, obj)
}

// MockMulticlusterHTTPRouteDeletionReconciler is a mock of MulticlusterHTTPRouteDeletionReconciler interface.
type MockMulticlusterHTTPRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPRouteDeletionReconcilerMockRecorder
}

// MockMulticlusterHTTPRouteDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterHTTPRouteDeletionReconciler.
type MockMulticlusterHTTPRouteDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterHTTPRouteDeletionReconciler
}

// NewMockMulticlusterHTTPRouteDeletionReconciler creates a new mock instance.
func NewMockMulticlusterHTTPRouteDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterHTTPRouteDeletionReconciler {
	mock := &MockMulticlusterHTTPRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHTTPRouteDeletionReconciler) EXPECT() *MockMulticlusterHTTPRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHTTPRouteDeletion mocks base method.
func (m *MockMulticlusterHTTPRouteDeletionReconciler) ReconcileHTTPRouteDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHTTPRouteDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileHTTPRouteDeletion indicates an expected call of ReconcileHTTPRouteDeletion.
func (mr *MockMulticlusterHTTPRouteDeletionReconcilerMockRecorder) ReconcileHTTPRouteDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHTTPRouteDeletion", reflect.TypeOf((*MockMulticlusterHTTPRouteDeletionReconciler)(nil).ReconcileHTTPRouteDeletion), clusterName, req)
}

// MockMulticlusterHTTPRouteReconcileLoop is a mock of MulticlusterHTTPRouteReconcileLoop interface.
type MockMulticlusterHTTPRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPRouteReconcileLoopMockRecorder
}

// MockMulticlusterHTTPRouteReconcileLoopMockRecorder is the mock recorder for MockMulticlusterHTTPRouteReconcileLoop.
type MockMulticlusterHTTPRouteReconcileLoopMockRecorder struct {
	mock *MockMulticlusterHTTPRouteReconcileLoop
}

// NewMockMulticlusterHTTPRouteReconcileLoop creates a new mock instance.
func NewMockMulticlusterHTTPRouteReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterHTTPRouteReconcileLoop {
	mock := &MockMulticlusterHTTPRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterHTTPRouteReconcileLoop) EXPECT() *MockMulticlusterHTTPRouteReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterHTTPRouteReconciler mocks base method.
func (m *MockMulticlusterHTTPRouteReconcileLoop) AddMulticlusterHTTPRouteReconciler(ctx context.Context, rec controller.MulticlusterHTTPRouteReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterHTTPRouteReconciler", varargs...)
}

// AddMulticlusterHTTPRouteReconciler indicates an expected call of AddMulticlusterHTTPRouteReconciler.
func (mr *MockMulticlusterHTTPRouteReconcileLoopMockRecorder) AddMulticlusterHTTPRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterHTTPRouteReconciler", reflect.TypeOf((*MockMulticlusterHTTPRouteReconcileLoop)(nil).AddMulticlusterHTTPRouteReconciler), varargs...)
}

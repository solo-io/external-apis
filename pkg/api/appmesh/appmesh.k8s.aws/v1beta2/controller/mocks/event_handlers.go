// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	v1beta2 "github.com/aws/aws-app-mesh-controller-for-k8s/apis/appmesh/v1beta2"
	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMeshEventHandler is a mock of MeshEventHandler interface
type MockMeshEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshEventHandlerMockRecorder
}

// MockMeshEventHandlerMockRecorder is the mock recorder for MockMeshEventHandler
type MockMeshEventHandlerMockRecorder struct {
	mock *MockMeshEventHandler
}

// NewMockMeshEventHandler creates a new mock instance
func NewMockMeshEventHandler(ctrl *gomock.Controller) *MockMeshEventHandler {
	mock := &MockMeshEventHandler{ctrl: ctrl}
	mock.recorder = &MockMeshEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshEventHandler) EXPECT() *MockMeshEventHandlerMockRecorder {
	return m.recorder
}

// CreateMesh mocks base method
func (m *MockMeshEventHandler) CreateMesh(obj *v1beta2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMesh", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMesh indicates an expected call of CreateMesh
func (mr *MockMeshEventHandlerMockRecorder) CreateMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMesh", reflect.TypeOf((*MockMeshEventHandler)(nil).CreateMesh), obj)
}

// UpdateMesh mocks base method
func (m *MockMeshEventHandler) UpdateMesh(old, new *v1beta2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMesh", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMesh indicates an expected call of UpdateMesh
func (mr *MockMeshEventHandlerMockRecorder) UpdateMesh(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMesh", reflect.TypeOf((*MockMeshEventHandler)(nil).UpdateMesh), old, new)
}

// DeleteMesh mocks base method
func (m *MockMeshEventHandler) DeleteMesh(obj *v1beta2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMesh", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMesh indicates an expected call of DeleteMesh
func (mr *MockMeshEventHandlerMockRecorder) DeleteMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMesh", reflect.TypeOf((*MockMeshEventHandler)(nil).DeleteMesh), obj)
}

// GenericMesh mocks base method
func (m *MockMeshEventHandler) GenericMesh(obj *v1beta2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericMesh", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericMesh indicates an expected call of GenericMesh
func (mr *MockMeshEventHandlerMockRecorder) GenericMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericMesh", reflect.TypeOf((*MockMeshEventHandler)(nil).GenericMesh), obj)
}

// MockMeshEventWatcher is a mock of MeshEventWatcher interface
type MockMeshEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMeshEventWatcherMockRecorder
}

// MockMeshEventWatcherMockRecorder is the mock recorder for MockMeshEventWatcher
type MockMeshEventWatcherMockRecorder struct {
	mock *MockMeshEventWatcher
}

// NewMockMeshEventWatcher creates a new mock instance
func NewMockMeshEventWatcher(ctrl *gomock.Controller) *MockMeshEventWatcher {
	mock := &MockMeshEventWatcher{ctrl: ctrl}
	mock.recorder = &MockMeshEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshEventWatcher) EXPECT() *MockMeshEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockMeshEventWatcher) AddEventHandler(ctx context.Context, h controller.MeshEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockMeshEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockMeshEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockVirtualServiceEventHandler is a mock of VirtualServiceEventHandler interface
type MockVirtualServiceEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceEventHandlerMockRecorder
}

// MockVirtualServiceEventHandlerMockRecorder is the mock recorder for MockVirtualServiceEventHandler
type MockVirtualServiceEventHandlerMockRecorder struct {
	mock *MockVirtualServiceEventHandler
}

// NewMockVirtualServiceEventHandler creates a new mock instance
func NewMockVirtualServiceEventHandler(ctrl *gomock.Controller) *MockVirtualServiceEventHandler {
	mock := &MockVirtualServiceEventHandler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceEventHandler) EXPECT() *MockVirtualServiceEventHandlerMockRecorder {
	return m.recorder
}

// CreateVirtualService mocks base method
func (m *MockVirtualServiceEventHandler) CreateVirtualService(obj *v1beta2.VirtualService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualService", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualService indicates an expected call of CreateVirtualService
func (mr *MockVirtualServiceEventHandlerMockRecorder) CreateVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualService", reflect.TypeOf((*MockVirtualServiceEventHandler)(nil).CreateVirtualService), obj)
}

// UpdateVirtualService mocks base method
func (m *MockVirtualServiceEventHandler) UpdateVirtualService(old, new *v1beta2.VirtualService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualService", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualService indicates an expected call of UpdateVirtualService
func (mr *MockVirtualServiceEventHandlerMockRecorder) UpdateVirtualService(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualService", reflect.TypeOf((*MockVirtualServiceEventHandler)(nil).UpdateVirtualService), old, new)
}

// DeleteVirtualService mocks base method
func (m *MockVirtualServiceEventHandler) DeleteVirtualService(obj *v1beta2.VirtualService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualService", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualService indicates an expected call of DeleteVirtualService
func (mr *MockVirtualServiceEventHandlerMockRecorder) DeleteVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualService", reflect.TypeOf((*MockVirtualServiceEventHandler)(nil).DeleteVirtualService), obj)
}

// GenericVirtualService mocks base method
func (m *MockVirtualServiceEventHandler) GenericVirtualService(obj *v1beta2.VirtualService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericVirtualService", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericVirtualService indicates an expected call of GenericVirtualService
func (mr *MockVirtualServiceEventHandlerMockRecorder) GenericVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericVirtualService", reflect.TypeOf((*MockVirtualServiceEventHandler)(nil).GenericVirtualService), obj)
}

// MockVirtualServiceEventWatcher is a mock of VirtualServiceEventWatcher interface
type MockVirtualServiceEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceEventWatcherMockRecorder
}

// MockVirtualServiceEventWatcherMockRecorder is the mock recorder for MockVirtualServiceEventWatcher
type MockVirtualServiceEventWatcherMockRecorder struct {
	mock *MockVirtualServiceEventWatcher
}

// NewMockVirtualServiceEventWatcher creates a new mock instance
func NewMockVirtualServiceEventWatcher(ctrl *gomock.Controller) *MockVirtualServiceEventWatcher {
	mock := &MockVirtualServiceEventWatcher{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceEventWatcher) EXPECT() *MockVirtualServiceEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockVirtualServiceEventWatcher) AddEventHandler(ctx context.Context, h controller.VirtualServiceEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockVirtualServiceEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockVirtualServiceEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockVirtualNodeEventHandler is a mock of VirtualNodeEventHandler interface
type MockVirtualNodeEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNodeEventHandlerMockRecorder
}

// MockVirtualNodeEventHandlerMockRecorder is the mock recorder for MockVirtualNodeEventHandler
type MockVirtualNodeEventHandlerMockRecorder struct {
	mock *MockVirtualNodeEventHandler
}

// NewMockVirtualNodeEventHandler creates a new mock instance
func NewMockVirtualNodeEventHandler(ctrl *gomock.Controller) *MockVirtualNodeEventHandler {
	mock := &MockVirtualNodeEventHandler{ctrl: ctrl}
	mock.recorder = &MockVirtualNodeEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNodeEventHandler) EXPECT() *MockVirtualNodeEventHandlerMockRecorder {
	return m.recorder
}

// CreateVirtualNode mocks base method
func (m *MockVirtualNodeEventHandler) CreateVirtualNode(obj *v1beta2.VirtualNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualNode", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualNode indicates an expected call of CreateVirtualNode
func (mr *MockVirtualNodeEventHandlerMockRecorder) CreateVirtualNode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualNode", reflect.TypeOf((*MockVirtualNodeEventHandler)(nil).CreateVirtualNode), obj)
}

// UpdateVirtualNode mocks base method
func (m *MockVirtualNodeEventHandler) UpdateVirtualNode(old, new *v1beta2.VirtualNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualNode", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualNode indicates an expected call of UpdateVirtualNode
func (mr *MockVirtualNodeEventHandlerMockRecorder) UpdateVirtualNode(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualNode", reflect.TypeOf((*MockVirtualNodeEventHandler)(nil).UpdateVirtualNode), old, new)
}

// DeleteVirtualNode mocks base method
func (m *MockVirtualNodeEventHandler) DeleteVirtualNode(obj *v1beta2.VirtualNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualNode", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualNode indicates an expected call of DeleteVirtualNode
func (mr *MockVirtualNodeEventHandlerMockRecorder) DeleteVirtualNode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualNode", reflect.TypeOf((*MockVirtualNodeEventHandler)(nil).DeleteVirtualNode), obj)
}

// GenericVirtualNode mocks base method
func (m *MockVirtualNodeEventHandler) GenericVirtualNode(obj *v1beta2.VirtualNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericVirtualNode", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericVirtualNode indicates an expected call of GenericVirtualNode
func (mr *MockVirtualNodeEventHandlerMockRecorder) GenericVirtualNode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericVirtualNode", reflect.TypeOf((*MockVirtualNodeEventHandler)(nil).GenericVirtualNode), obj)
}

// MockVirtualNodeEventWatcher is a mock of VirtualNodeEventWatcher interface
type MockVirtualNodeEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNodeEventWatcherMockRecorder
}

// MockVirtualNodeEventWatcherMockRecorder is the mock recorder for MockVirtualNodeEventWatcher
type MockVirtualNodeEventWatcherMockRecorder struct {
	mock *MockVirtualNodeEventWatcher
}

// NewMockVirtualNodeEventWatcher creates a new mock instance
func NewMockVirtualNodeEventWatcher(ctrl *gomock.Controller) *MockVirtualNodeEventWatcher {
	mock := &MockVirtualNodeEventWatcher{ctrl: ctrl}
	mock.recorder = &MockVirtualNodeEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNodeEventWatcher) EXPECT() *MockVirtualNodeEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockVirtualNodeEventWatcher) AddEventHandler(ctx context.Context, h controller.VirtualNodeEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockVirtualNodeEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockVirtualNodeEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockVirtualRouterEventHandler is a mock of VirtualRouterEventHandler interface
type MockVirtualRouterEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualRouterEventHandlerMockRecorder
}

// MockVirtualRouterEventHandlerMockRecorder is the mock recorder for MockVirtualRouterEventHandler
type MockVirtualRouterEventHandlerMockRecorder struct {
	mock *MockVirtualRouterEventHandler
}

// NewMockVirtualRouterEventHandler creates a new mock instance
func NewMockVirtualRouterEventHandler(ctrl *gomock.Controller) *MockVirtualRouterEventHandler {
	mock := &MockVirtualRouterEventHandler{ctrl: ctrl}
	mock.recorder = &MockVirtualRouterEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualRouterEventHandler) EXPECT() *MockVirtualRouterEventHandlerMockRecorder {
	return m.recorder
}

// CreateVirtualRouter mocks base method
func (m *MockVirtualRouterEventHandler) CreateVirtualRouter(obj *v1beta2.VirtualRouter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualRouter", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualRouter indicates an expected call of CreateVirtualRouter
func (mr *MockVirtualRouterEventHandlerMockRecorder) CreateVirtualRouter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualRouter", reflect.TypeOf((*MockVirtualRouterEventHandler)(nil).CreateVirtualRouter), obj)
}

// UpdateVirtualRouter mocks base method
func (m *MockVirtualRouterEventHandler) UpdateVirtualRouter(old, new *v1beta2.VirtualRouter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualRouter", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualRouter indicates an expected call of UpdateVirtualRouter
func (mr *MockVirtualRouterEventHandlerMockRecorder) UpdateVirtualRouter(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualRouter", reflect.TypeOf((*MockVirtualRouterEventHandler)(nil).UpdateVirtualRouter), old, new)
}

// DeleteVirtualRouter mocks base method
func (m *MockVirtualRouterEventHandler) DeleteVirtualRouter(obj *v1beta2.VirtualRouter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualRouter", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualRouter indicates an expected call of DeleteVirtualRouter
func (mr *MockVirtualRouterEventHandlerMockRecorder) DeleteVirtualRouter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualRouter", reflect.TypeOf((*MockVirtualRouterEventHandler)(nil).DeleteVirtualRouter), obj)
}

// GenericVirtualRouter mocks base method
func (m *MockVirtualRouterEventHandler) GenericVirtualRouter(obj *v1beta2.VirtualRouter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericVirtualRouter", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericVirtualRouter indicates an expected call of GenericVirtualRouter
func (mr *MockVirtualRouterEventHandlerMockRecorder) GenericVirtualRouter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericVirtualRouter", reflect.TypeOf((*MockVirtualRouterEventHandler)(nil).GenericVirtualRouter), obj)
}

// MockVirtualRouterEventWatcher is a mock of VirtualRouterEventWatcher interface
type MockVirtualRouterEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualRouterEventWatcherMockRecorder
}

// MockVirtualRouterEventWatcherMockRecorder is the mock recorder for MockVirtualRouterEventWatcher
type MockVirtualRouterEventWatcherMockRecorder struct {
	mock *MockVirtualRouterEventWatcher
}

// NewMockVirtualRouterEventWatcher creates a new mock instance
func NewMockVirtualRouterEventWatcher(ctrl *gomock.Controller) *MockVirtualRouterEventWatcher {
	mock := &MockVirtualRouterEventWatcher{ctrl: ctrl}
	mock.recorder = &MockVirtualRouterEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualRouterEventWatcher) EXPECT() *MockVirtualRouterEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockVirtualRouterEventWatcher) AddEventHandler(ctx context.Context, h controller.VirtualRouterEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockVirtualRouterEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockVirtualRouterEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockVirtualGatewayEventHandler is a mock of VirtualGatewayEventHandler interface
type MockVirtualGatewayEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayEventHandlerMockRecorder
}

// MockVirtualGatewayEventHandlerMockRecorder is the mock recorder for MockVirtualGatewayEventHandler
type MockVirtualGatewayEventHandlerMockRecorder struct {
	mock *MockVirtualGatewayEventHandler
}

// NewMockVirtualGatewayEventHandler creates a new mock instance
func NewMockVirtualGatewayEventHandler(ctrl *gomock.Controller) *MockVirtualGatewayEventHandler {
	mock := &MockVirtualGatewayEventHandler{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualGatewayEventHandler) EXPECT() *MockVirtualGatewayEventHandlerMockRecorder {
	return m.recorder
}

// CreateVirtualGateway mocks base method
func (m *MockVirtualGatewayEventHandler) CreateVirtualGateway(obj *v1beta2.VirtualGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualGateway indicates an expected call of CreateVirtualGateway
func (mr *MockVirtualGatewayEventHandlerMockRecorder) CreateVirtualGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualGateway", reflect.TypeOf((*MockVirtualGatewayEventHandler)(nil).CreateVirtualGateway), obj)
}

// UpdateVirtualGateway mocks base method
func (m *MockVirtualGatewayEventHandler) UpdateVirtualGateway(old, new *v1beta2.VirtualGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualGateway", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualGateway indicates an expected call of UpdateVirtualGateway
func (mr *MockVirtualGatewayEventHandlerMockRecorder) UpdateVirtualGateway(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualGateway", reflect.TypeOf((*MockVirtualGatewayEventHandler)(nil).UpdateVirtualGateway), old, new)
}

// DeleteVirtualGateway mocks base method
func (m *MockVirtualGatewayEventHandler) DeleteVirtualGateway(obj *v1beta2.VirtualGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualGateway indicates an expected call of DeleteVirtualGateway
func (mr *MockVirtualGatewayEventHandlerMockRecorder) DeleteVirtualGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualGateway", reflect.TypeOf((*MockVirtualGatewayEventHandler)(nil).DeleteVirtualGateway), obj)
}

// GenericVirtualGateway mocks base method
func (m *MockVirtualGatewayEventHandler) GenericVirtualGateway(obj *v1beta2.VirtualGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericVirtualGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericVirtualGateway indicates an expected call of GenericVirtualGateway
func (mr *MockVirtualGatewayEventHandlerMockRecorder) GenericVirtualGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericVirtualGateway", reflect.TypeOf((*MockVirtualGatewayEventHandler)(nil).GenericVirtualGateway), obj)
}

// MockVirtualGatewayEventWatcher is a mock of VirtualGatewayEventWatcher interface
type MockVirtualGatewayEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayEventWatcherMockRecorder
}

// MockVirtualGatewayEventWatcherMockRecorder is the mock recorder for MockVirtualGatewayEventWatcher
type MockVirtualGatewayEventWatcherMockRecorder struct {
	mock *MockVirtualGatewayEventWatcher
}

// NewMockVirtualGatewayEventWatcher creates a new mock instance
func NewMockVirtualGatewayEventWatcher(ctrl *gomock.Controller) *MockVirtualGatewayEventWatcher {
	mock := &MockVirtualGatewayEventWatcher{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualGatewayEventWatcher) EXPECT() *MockVirtualGatewayEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockVirtualGatewayEventWatcher) AddEventHandler(ctx context.Context, h controller.VirtualGatewayEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockVirtualGatewayEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockVirtualGatewayEventWatcher)(nil).AddEventHandler), varargs...)
}

// MockGatewayRouteEventHandler is a mock of GatewayRouteEventHandler interface
type MockGatewayRouteEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayRouteEventHandlerMockRecorder
}

// MockGatewayRouteEventHandlerMockRecorder is the mock recorder for MockGatewayRouteEventHandler
type MockGatewayRouteEventHandlerMockRecorder struct {
	mock *MockGatewayRouteEventHandler
}

// NewMockGatewayRouteEventHandler creates a new mock instance
func NewMockGatewayRouteEventHandler(ctrl *gomock.Controller) *MockGatewayRouteEventHandler {
	mock := &MockGatewayRouteEventHandler{ctrl: ctrl}
	mock.recorder = &MockGatewayRouteEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayRouteEventHandler) EXPECT() *MockGatewayRouteEventHandlerMockRecorder {
	return m.recorder
}

// CreateGatewayRoute mocks base method
func (m *MockGatewayRouteEventHandler) CreateGatewayRoute(obj *v1beta2.GatewayRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGatewayRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatewayRoute indicates an expected call of CreateGatewayRoute
func (mr *MockGatewayRouteEventHandlerMockRecorder) CreateGatewayRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayRoute", reflect.TypeOf((*MockGatewayRouteEventHandler)(nil).CreateGatewayRoute), obj)
}

// UpdateGatewayRoute mocks base method
func (m *MockGatewayRouteEventHandler) UpdateGatewayRoute(old, new *v1beta2.GatewayRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGatewayRoute", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGatewayRoute indicates an expected call of UpdateGatewayRoute
func (mr *MockGatewayRouteEventHandlerMockRecorder) UpdateGatewayRoute(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayRoute", reflect.TypeOf((*MockGatewayRouteEventHandler)(nil).UpdateGatewayRoute), old, new)
}

// DeleteGatewayRoute mocks base method
func (m *MockGatewayRouteEventHandler) DeleteGatewayRoute(obj *v1beta2.GatewayRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGatewayRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGatewayRoute indicates an expected call of DeleteGatewayRoute
func (mr *MockGatewayRouteEventHandlerMockRecorder) DeleteGatewayRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayRoute", reflect.TypeOf((*MockGatewayRouteEventHandler)(nil).DeleteGatewayRoute), obj)
}

// GenericGatewayRoute mocks base method
func (m *MockGatewayRouteEventHandler) GenericGatewayRoute(obj *v1beta2.GatewayRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericGatewayRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericGatewayRoute indicates an expected call of GenericGatewayRoute
func (mr *MockGatewayRouteEventHandlerMockRecorder) GenericGatewayRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericGatewayRoute", reflect.TypeOf((*MockGatewayRouteEventHandler)(nil).GenericGatewayRoute), obj)
}

// MockGatewayRouteEventWatcher is a mock of GatewayRouteEventWatcher interface
type MockGatewayRouteEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayRouteEventWatcherMockRecorder
}

// MockGatewayRouteEventWatcherMockRecorder is the mock recorder for MockGatewayRouteEventWatcher
type MockGatewayRouteEventWatcherMockRecorder struct {
	mock *MockGatewayRouteEventWatcher
}

// NewMockGatewayRouteEventWatcher creates a new mock instance
func NewMockGatewayRouteEventWatcher(ctrl *gomock.Controller) *MockGatewayRouteEventWatcher {
	mock := &MockGatewayRouteEventWatcher{ctrl: ctrl}
	mock.recorder = &MockGatewayRouteEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayRouteEventWatcher) EXPECT() *MockGatewayRouteEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockGatewayRouteEventWatcher) AddEventHandler(ctx context.Context, h controller.GatewayRouteEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockGatewayRouteEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockGatewayRouteEventWatcher)(nil).AddEventHandler), varargs...)
}

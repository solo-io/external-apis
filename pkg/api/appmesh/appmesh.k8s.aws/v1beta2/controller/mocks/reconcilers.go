// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	v1beta2 "github.com/aws/aws-app-mesh-controller-for-k8s/apis/appmesh/v1beta2"
	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/appmesh/appmesh.k8s.aws/v1beta2/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMeshReconciler is a mock of MeshReconciler interface
type MockMeshReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReconcilerMockRecorder
}

// MockMeshReconcilerMockRecorder is the mock recorder for MockMeshReconciler
type MockMeshReconcilerMockRecorder struct {
	mock *MockMeshReconciler
}

// NewMockMeshReconciler creates a new mock instance
func NewMockMeshReconciler(ctrl *gomock.Controller) *MockMeshReconciler {
	mock := &MockMeshReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshReconciler) EXPECT() *MockMeshReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMesh mocks base method
func (m *MockMeshReconciler) ReconcileMesh(obj *v1beta2.Mesh) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMesh", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMesh indicates an expected call of ReconcileMesh
func (mr *MockMeshReconcilerMockRecorder) ReconcileMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMesh", reflect.TypeOf((*MockMeshReconciler)(nil).ReconcileMesh), obj)
}

// MockMeshDeletionReconciler is a mock of MeshDeletionReconciler interface
type MockMeshDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMeshDeletionReconcilerMockRecorder
}

// MockMeshDeletionReconcilerMockRecorder is the mock recorder for MockMeshDeletionReconciler
type MockMeshDeletionReconcilerMockRecorder struct {
	mock *MockMeshDeletionReconciler
}

// NewMockMeshDeletionReconciler creates a new mock instance
func NewMockMeshDeletionReconciler(ctrl *gomock.Controller) *MockMeshDeletionReconciler {
	mock := &MockMeshDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMeshDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshDeletionReconciler) EXPECT() *MockMeshDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileMeshDeletion mocks base method
func (m *MockMeshDeletionReconciler) ReconcileMeshDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMeshDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileMeshDeletion indicates an expected call of ReconcileMeshDeletion
func (mr *MockMeshDeletionReconcilerMockRecorder) ReconcileMeshDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMeshDeletion", reflect.TypeOf((*MockMeshDeletionReconciler)(nil).ReconcileMeshDeletion), req)
}

// MockMeshFinalizer is a mock of MeshFinalizer interface
type MockMeshFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockMeshFinalizerMockRecorder
}

// MockMeshFinalizerMockRecorder is the mock recorder for MockMeshFinalizer
type MockMeshFinalizerMockRecorder struct {
	mock *MockMeshFinalizer
}

// NewMockMeshFinalizer creates a new mock instance
func NewMockMeshFinalizer(ctrl *gomock.Controller) *MockMeshFinalizer {
	mock := &MockMeshFinalizer{ctrl: ctrl}
	mock.recorder = &MockMeshFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshFinalizer) EXPECT() *MockMeshFinalizerMockRecorder {
	return m.recorder
}

// ReconcileMesh mocks base method
func (m *MockMeshFinalizer) ReconcileMesh(obj *v1beta2.Mesh) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileMesh", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileMesh indicates an expected call of ReconcileMesh
func (mr *MockMeshFinalizerMockRecorder) ReconcileMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileMesh", reflect.TypeOf((*MockMeshFinalizer)(nil).ReconcileMesh), obj)
}

// MeshFinalizerName mocks base method
func (m *MockMeshFinalizer) MeshFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeshFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MeshFinalizerName indicates an expected call of MeshFinalizerName
func (mr *MockMeshFinalizerMockRecorder) MeshFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeshFinalizerName", reflect.TypeOf((*MockMeshFinalizer)(nil).MeshFinalizerName))
}

// FinalizeMesh mocks base method
func (m *MockMeshFinalizer) FinalizeMesh(obj *v1beta2.Mesh) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeMesh", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeMesh indicates an expected call of FinalizeMesh
func (mr *MockMeshFinalizerMockRecorder) FinalizeMesh(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeMesh", reflect.TypeOf((*MockMeshFinalizer)(nil).FinalizeMesh), obj)
}

// MockMeshReconcileLoop is a mock of MeshReconcileLoop interface
type MockMeshReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMeshReconcileLoopMockRecorder
}

// MockMeshReconcileLoopMockRecorder is the mock recorder for MockMeshReconcileLoop
type MockMeshReconcileLoopMockRecorder struct {
	mock *MockMeshReconcileLoop
}

// NewMockMeshReconcileLoop creates a new mock instance
func NewMockMeshReconcileLoop(ctrl *gomock.Controller) *MockMeshReconcileLoop {
	mock := &MockMeshReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMeshReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeshReconcileLoop) EXPECT() *MockMeshReconcileLoopMockRecorder {
	return m.recorder
}

// RunMeshReconciler mocks base method
func (m *MockMeshReconcileLoop) RunMeshReconciler(ctx context.Context, rec controller.MeshReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunMeshReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMeshReconciler indicates an expected call of RunMeshReconciler
func (mr *MockMeshReconcileLoopMockRecorder) RunMeshReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMeshReconciler", reflect.TypeOf((*MockMeshReconcileLoop)(nil).RunMeshReconciler), varargs...)
}

// MockVirtualServiceReconciler is a mock of VirtualServiceReconciler interface
type MockVirtualServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceReconcilerMockRecorder
}

// MockVirtualServiceReconcilerMockRecorder is the mock recorder for MockVirtualServiceReconciler
type MockVirtualServiceReconcilerMockRecorder struct {
	mock *MockVirtualServiceReconciler
}

// NewMockVirtualServiceReconciler creates a new mock instance
func NewMockVirtualServiceReconciler(ctrl *gomock.Controller) *MockVirtualServiceReconciler {
	mock := &MockVirtualServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceReconciler) EXPECT() *MockVirtualServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualService mocks base method
func (m *MockVirtualServiceReconciler) ReconcileVirtualService(obj *v1beta2.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService
func (mr *MockVirtualServiceReconcilerMockRecorder) ReconcileVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MockVirtualServiceReconciler)(nil).ReconcileVirtualService), obj)
}

// MockVirtualServiceDeletionReconciler is a mock of VirtualServiceDeletionReconciler interface
type MockVirtualServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceDeletionReconcilerMockRecorder
}

// MockVirtualServiceDeletionReconcilerMockRecorder is the mock recorder for MockVirtualServiceDeletionReconciler
type MockVirtualServiceDeletionReconcilerMockRecorder struct {
	mock *MockVirtualServiceDeletionReconciler
}

// NewMockVirtualServiceDeletionReconciler creates a new mock instance
func NewMockVirtualServiceDeletionReconciler(ctrl *gomock.Controller) *MockVirtualServiceDeletionReconciler {
	mock := &MockVirtualServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceDeletionReconciler) EXPECT() *MockVirtualServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualServiceDeletion mocks base method
func (m *MockVirtualServiceDeletionReconciler) ReconcileVirtualServiceDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualServiceDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualServiceDeletion indicates an expected call of ReconcileVirtualServiceDeletion
func (mr *MockVirtualServiceDeletionReconcilerMockRecorder) ReconcileVirtualServiceDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualServiceDeletion", reflect.TypeOf((*MockVirtualServiceDeletionReconciler)(nil).ReconcileVirtualServiceDeletion), req)
}

// MockVirtualServiceFinalizer is a mock of VirtualServiceFinalizer interface
type MockVirtualServiceFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceFinalizerMockRecorder
}

// MockVirtualServiceFinalizerMockRecorder is the mock recorder for MockVirtualServiceFinalizer
type MockVirtualServiceFinalizerMockRecorder struct {
	mock *MockVirtualServiceFinalizer
}

// NewMockVirtualServiceFinalizer creates a new mock instance
func NewMockVirtualServiceFinalizer(ctrl *gomock.Controller) *MockVirtualServiceFinalizer {
	mock := &MockVirtualServiceFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceFinalizer) EXPECT() *MockVirtualServiceFinalizerMockRecorder {
	return m.recorder
}

// ReconcileVirtualService mocks base method
func (m *MockVirtualServiceFinalizer) ReconcileVirtualService(obj *v1beta2.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService
func (mr *MockVirtualServiceFinalizerMockRecorder) ReconcileVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MockVirtualServiceFinalizer)(nil).ReconcileVirtualService), obj)
}

// VirtualServiceFinalizerName mocks base method
func (m *MockVirtualServiceFinalizer) VirtualServiceFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServiceFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualServiceFinalizerName indicates an expected call of VirtualServiceFinalizerName
func (mr *MockVirtualServiceFinalizerMockRecorder) VirtualServiceFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServiceFinalizerName", reflect.TypeOf((*MockVirtualServiceFinalizer)(nil).VirtualServiceFinalizerName))
}

// FinalizeVirtualService mocks base method
func (m *MockVirtualServiceFinalizer) FinalizeVirtualService(obj *v1beta2.VirtualService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualService", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualService indicates an expected call of FinalizeVirtualService
func (mr *MockVirtualServiceFinalizerMockRecorder) FinalizeVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualService", reflect.TypeOf((*MockVirtualServiceFinalizer)(nil).FinalizeVirtualService), obj)
}

// MockVirtualServiceReconcileLoop is a mock of VirtualServiceReconcileLoop interface
type MockVirtualServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceReconcileLoopMockRecorder
}

// MockVirtualServiceReconcileLoopMockRecorder is the mock recorder for MockVirtualServiceReconcileLoop
type MockVirtualServiceReconcileLoopMockRecorder struct {
	mock *MockVirtualServiceReconcileLoop
}

// NewMockVirtualServiceReconcileLoop creates a new mock instance
func NewMockVirtualServiceReconcileLoop(ctrl *gomock.Controller) *MockVirtualServiceReconcileLoop {
	mock := &MockVirtualServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualServiceReconcileLoop) EXPECT() *MockVirtualServiceReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualServiceReconciler mocks base method
func (m *MockVirtualServiceReconcileLoop) RunVirtualServiceReconciler(ctx context.Context, rec controller.VirtualServiceReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualServiceReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualServiceReconciler indicates an expected call of RunVirtualServiceReconciler
func (mr *MockVirtualServiceReconcileLoopMockRecorder) RunVirtualServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualServiceReconciler", reflect.TypeOf((*MockVirtualServiceReconcileLoop)(nil).RunVirtualServiceReconciler), varargs...)
}

// MockVirtualNodeReconciler is a mock of VirtualNodeReconciler interface
type MockVirtualNodeReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNodeReconcilerMockRecorder
}

// MockVirtualNodeReconcilerMockRecorder is the mock recorder for MockVirtualNodeReconciler
type MockVirtualNodeReconcilerMockRecorder struct {
	mock *MockVirtualNodeReconciler
}

// NewMockVirtualNodeReconciler creates a new mock instance
func NewMockVirtualNodeReconciler(ctrl *gomock.Controller) *MockVirtualNodeReconciler {
	mock := &MockVirtualNodeReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualNodeReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNodeReconciler) EXPECT() *MockVirtualNodeReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualNode mocks base method
func (m *MockVirtualNodeReconciler) ReconcileVirtualNode(obj *v1beta2.VirtualNode) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualNode", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualNode indicates an expected call of ReconcileVirtualNode
func (mr *MockVirtualNodeReconcilerMockRecorder) ReconcileVirtualNode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualNode", reflect.TypeOf((*MockVirtualNodeReconciler)(nil).ReconcileVirtualNode), obj)
}

// MockVirtualNodeDeletionReconciler is a mock of VirtualNodeDeletionReconciler interface
type MockVirtualNodeDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNodeDeletionReconcilerMockRecorder
}

// MockVirtualNodeDeletionReconcilerMockRecorder is the mock recorder for MockVirtualNodeDeletionReconciler
type MockVirtualNodeDeletionReconcilerMockRecorder struct {
	mock *MockVirtualNodeDeletionReconciler
}

// NewMockVirtualNodeDeletionReconciler creates a new mock instance
func NewMockVirtualNodeDeletionReconciler(ctrl *gomock.Controller) *MockVirtualNodeDeletionReconciler {
	mock := &MockVirtualNodeDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualNodeDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNodeDeletionReconciler) EXPECT() *MockVirtualNodeDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualNodeDeletion mocks base method
func (m *MockVirtualNodeDeletionReconciler) ReconcileVirtualNodeDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualNodeDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualNodeDeletion indicates an expected call of ReconcileVirtualNodeDeletion
func (mr *MockVirtualNodeDeletionReconcilerMockRecorder) ReconcileVirtualNodeDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualNodeDeletion", reflect.TypeOf((*MockVirtualNodeDeletionReconciler)(nil).ReconcileVirtualNodeDeletion), req)
}

// MockVirtualNodeFinalizer is a mock of VirtualNodeFinalizer interface
type MockVirtualNodeFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNodeFinalizerMockRecorder
}

// MockVirtualNodeFinalizerMockRecorder is the mock recorder for MockVirtualNodeFinalizer
type MockVirtualNodeFinalizerMockRecorder struct {
	mock *MockVirtualNodeFinalizer
}

// NewMockVirtualNodeFinalizer creates a new mock instance
func NewMockVirtualNodeFinalizer(ctrl *gomock.Controller) *MockVirtualNodeFinalizer {
	mock := &MockVirtualNodeFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualNodeFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNodeFinalizer) EXPECT() *MockVirtualNodeFinalizerMockRecorder {
	return m.recorder
}

// ReconcileVirtualNode mocks base method
func (m *MockVirtualNodeFinalizer) ReconcileVirtualNode(obj *v1beta2.VirtualNode) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualNode", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualNode indicates an expected call of ReconcileVirtualNode
func (mr *MockVirtualNodeFinalizerMockRecorder) ReconcileVirtualNode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualNode", reflect.TypeOf((*MockVirtualNodeFinalizer)(nil).ReconcileVirtualNode), obj)
}

// VirtualNodeFinalizerName mocks base method
func (m *MockVirtualNodeFinalizer) VirtualNodeFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualNodeFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualNodeFinalizerName indicates an expected call of VirtualNodeFinalizerName
func (mr *MockVirtualNodeFinalizerMockRecorder) VirtualNodeFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualNodeFinalizerName", reflect.TypeOf((*MockVirtualNodeFinalizer)(nil).VirtualNodeFinalizerName))
}

// FinalizeVirtualNode mocks base method
func (m *MockVirtualNodeFinalizer) FinalizeVirtualNode(obj *v1beta2.VirtualNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualNode", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualNode indicates an expected call of FinalizeVirtualNode
func (mr *MockVirtualNodeFinalizerMockRecorder) FinalizeVirtualNode(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualNode", reflect.TypeOf((*MockVirtualNodeFinalizer)(nil).FinalizeVirtualNode), obj)
}

// MockVirtualNodeReconcileLoop is a mock of VirtualNodeReconcileLoop interface
type MockVirtualNodeReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNodeReconcileLoopMockRecorder
}

// MockVirtualNodeReconcileLoopMockRecorder is the mock recorder for MockVirtualNodeReconcileLoop
type MockVirtualNodeReconcileLoopMockRecorder struct {
	mock *MockVirtualNodeReconcileLoop
}

// NewMockVirtualNodeReconcileLoop creates a new mock instance
func NewMockVirtualNodeReconcileLoop(ctrl *gomock.Controller) *MockVirtualNodeReconcileLoop {
	mock := &MockVirtualNodeReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualNodeReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNodeReconcileLoop) EXPECT() *MockVirtualNodeReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualNodeReconciler mocks base method
func (m *MockVirtualNodeReconcileLoop) RunVirtualNodeReconciler(ctx context.Context, rec controller.VirtualNodeReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualNodeReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualNodeReconciler indicates an expected call of RunVirtualNodeReconciler
func (mr *MockVirtualNodeReconcileLoopMockRecorder) RunVirtualNodeReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualNodeReconciler", reflect.TypeOf((*MockVirtualNodeReconcileLoop)(nil).RunVirtualNodeReconciler), varargs...)
}

// MockVirtualRouterReconciler is a mock of VirtualRouterReconciler interface
type MockVirtualRouterReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualRouterReconcilerMockRecorder
}

// MockVirtualRouterReconcilerMockRecorder is the mock recorder for MockVirtualRouterReconciler
type MockVirtualRouterReconcilerMockRecorder struct {
	mock *MockVirtualRouterReconciler
}

// NewMockVirtualRouterReconciler creates a new mock instance
func NewMockVirtualRouterReconciler(ctrl *gomock.Controller) *MockVirtualRouterReconciler {
	mock := &MockVirtualRouterReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualRouterReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualRouterReconciler) EXPECT() *MockVirtualRouterReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualRouter mocks base method
func (m *MockVirtualRouterReconciler) ReconcileVirtualRouter(obj *v1beta2.VirtualRouter) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualRouter", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualRouter indicates an expected call of ReconcileVirtualRouter
func (mr *MockVirtualRouterReconcilerMockRecorder) ReconcileVirtualRouter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualRouter", reflect.TypeOf((*MockVirtualRouterReconciler)(nil).ReconcileVirtualRouter), obj)
}

// MockVirtualRouterDeletionReconciler is a mock of VirtualRouterDeletionReconciler interface
type MockVirtualRouterDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualRouterDeletionReconcilerMockRecorder
}

// MockVirtualRouterDeletionReconcilerMockRecorder is the mock recorder for MockVirtualRouterDeletionReconciler
type MockVirtualRouterDeletionReconcilerMockRecorder struct {
	mock *MockVirtualRouterDeletionReconciler
}

// NewMockVirtualRouterDeletionReconciler creates a new mock instance
func NewMockVirtualRouterDeletionReconciler(ctrl *gomock.Controller) *MockVirtualRouterDeletionReconciler {
	mock := &MockVirtualRouterDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualRouterDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualRouterDeletionReconciler) EXPECT() *MockVirtualRouterDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualRouterDeletion mocks base method
func (m *MockVirtualRouterDeletionReconciler) ReconcileVirtualRouterDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualRouterDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualRouterDeletion indicates an expected call of ReconcileVirtualRouterDeletion
func (mr *MockVirtualRouterDeletionReconcilerMockRecorder) ReconcileVirtualRouterDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualRouterDeletion", reflect.TypeOf((*MockVirtualRouterDeletionReconciler)(nil).ReconcileVirtualRouterDeletion), req)
}

// MockVirtualRouterFinalizer is a mock of VirtualRouterFinalizer interface
type MockVirtualRouterFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualRouterFinalizerMockRecorder
}

// MockVirtualRouterFinalizerMockRecorder is the mock recorder for MockVirtualRouterFinalizer
type MockVirtualRouterFinalizerMockRecorder struct {
	mock *MockVirtualRouterFinalizer
}

// NewMockVirtualRouterFinalizer creates a new mock instance
func NewMockVirtualRouterFinalizer(ctrl *gomock.Controller) *MockVirtualRouterFinalizer {
	mock := &MockVirtualRouterFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualRouterFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualRouterFinalizer) EXPECT() *MockVirtualRouterFinalizerMockRecorder {
	return m.recorder
}

// ReconcileVirtualRouter mocks base method
func (m *MockVirtualRouterFinalizer) ReconcileVirtualRouter(obj *v1beta2.VirtualRouter) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualRouter", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualRouter indicates an expected call of ReconcileVirtualRouter
func (mr *MockVirtualRouterFinalizerMockRecorder) ReconcileVirtualRouter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualRouter", reflect.TypeOf((*MockVirtualRouterFinalizer)(nil).ReconcileVirtualRouter), obj)
}

// VirtualRouterFinalizerName mocks base method
func (m *MockVirtualRouterFinalizer) VirtualRouterFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualRouterFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualRouterFinalizerName indicates an expected call of VirtualRouterFinalizerName
func (mr *MockVirtualRouterFinalizerMockRecorder) VirtualRouterFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualRouterFinalizerName", reflect.TypeOf((*MockVirtualRouterFinalizer)(nil).VirtualRouterFinalizerName))
}

// FinalizeVirtualRouter mocks base method
func (m *MockVirtualRouterFinalizer) FinalizeVirtualRouter(obj *v1beta2.VirtualRouter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualRouter", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualRouter indicates an expected call of FinalizeVirtualRouter
func (mr *MockVirtualRouterFinalizerMockRecorder) FinalizeVirtualRouter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualRouter", reflect.TypeOf((*MockVirtualRouterFinalizer)(nil).FinalizeVirtualRouter), obj)
}

// MockVirtualRouterReconcileLoop is a mock of VirtualRouterReconcileLoop interface
type MockVirtualRouterReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualRouterReconcileLoopMockRecorder
}

// MockVirtualRouterReconcileLoopMockRecorder is the mock recorder for MockVirtualRouterReconcileLoop
type MockVirtualRouterReconcileLoopMockRecorder struct {
	mock *MockVirtualRouterReconcileLoop
}

// NewMockVirtualRouterReconcileLoop creates a new mock instance
func NewMockVirtualRouterReconcileLoop(ctrl *gomock.Controller) *MockVirtualRouterReconcileLoop {
	mock := &MockVirtualRouterReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualRouterReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualRouterReconcileLoop) EXPECT() *MockVirtualRouterReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualRouterReconciler mocks base method
func (m *MockVirtualRouterReconcileLoop) RunVirtualRouterReconciler(ctx context.Context, rec controller.VirtualRouterReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualRouterReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualRouterReconciler indicates an expected call of RunVirtualRouterReconciler
func (mr *MockVirtualRouterReconcileLoopMockRecorder) RunVirtualRouterReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualRouterReconciler", reflect.TypeOf((*MockVirtualRouterReconcileLoop)(nil).RunVirtualRouterReconciler), varargs...)
}

// MockVirtualGatewayReconciler is a mock of VirtualGatewayReconciler interface
type MockVirtualGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayReconcilerMockRecorder
}

// MockVirtualGatewayReconcilerMockRecorder is the mock recorder for MockVirtualGatewayReconciler
type MockVirtualGatewayReconcilerMockRecorder struct {
	mock *MockVirtualGatewayReconciler
}

// NewMockVirtualGatewayReconciler creates a new mock instance
func NewMockVirtualGatewayReconciler(ctrl *gomock.Controller) *MockVirtualGatewayReconciler {
	mock := &MockVirtualGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualGatewayReconciler) EXPECT() *MockVirtualGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualGateway mocks base method
func (m *MockVirtualGatewayReconciler) ReconcileVirtualGateway(obj *v1beta2.VirtualGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualGateway indicates an expected call of ReconcileVirtualGateway
func (mr *MockVirtualGatewayReconcilerMockRecorder) ReconcileVirtualGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualGateway", reflect.TypeOf((*MockVirtualGatewayReconciler)(nil).ReconcileVirtualGateway), obj)
}

// MockVirtualGatewayDeletionReconciler is a mock of VirtualGatewayDeletionReconciler interface
type MockVirtualGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayDeletionReconcilerMockRecorder
}

// MockVirtualGatewayDeletionReconcilerMockRecorder is the mock recorder for MockVirtualGatewayDeletionReconciler
type MockVirtualGatewayDeletionReconcilerMockRecorder struct {
	mock *MockVirtualGatewayDeletionReconciler
}

// NewMockVirtualGatewayDeletionReconciler creates a new mock instance
func NewMockVirtualGatewayDeletionReconciler(ctrl *gomock.Controller) *MockVirtualGatewayDeletionReconciler {
	mock := &MockVirtualGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualGatewayDeletionReconciler) EXPECT() *MockVirtualGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualGatewayDeletion mocks base method
func (m *MockVirtualGatewayDeletionReconciler) ReconcileVirtualGatewayDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualGatewayDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualGatewayDeletion indicates an expected call of ReconcileVirtualGatewayDeletion
func (mr *MockVirtualGatewayDeletionReconcilerMockRecorder) ReconcileVirtualGatewayDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualGatewayDeletion", reflect.TypeOf((*MockVirtualGatewayDeletionReconciler)(nil).ReconcileVirtualGatewayDeletion), req)
}

// MockVirtualGatewayFinalizer is a mock of VirtualGatewayFinalizer interface
type MockVirtualGatewayFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayFinalizerMockRecorder
}

// MockVirtualGatewayFinalizerMockRecorder is the mock recorder for MockVirtualGatewayFinalizer
type MockVirtualGatewayFinalizerMockRecorder struct {
	mock *MockVirtualGatewayFinalizer
}

// NewMockVirtualGatewayFinalizer creates a new mock instance
func NewMockVirtualGatewayFinalizer(ctrl *gomock.Controller) *MockVirtualGatewayFinalizer {
	mock := &MockVirtualGatewayFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualGatewayFinalizer) EXPECT() *MockVirtualGatewayFinalizerMockRecorder {
	return m.recorder
}

// ReconcileVirtualGateway mocks base method
func (m *MockVirtualGatewayFinalizer) ReconcileVirtualGateway(obj *v1beta2.VirtualGateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualGateway indicates an expected call of ReconcileVirtualGateway
func (mr *MockVirtualGatewayFinalizerMockRecorder) ReconcileVirtualGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualGateway", reflect.TypeOf((*MockVirtualGatewayFinalizer)(nil).ReconcileVirtualGateway), obj)
}

// VirtualGatewayFinalizerName mocks base method
func (m *MockVirtualGatewayFinalizer) VirtualGatewayFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualGatewayFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualGatewayFinalizerName indicates an expected call of VirtualGatewayFinalizerName
func (mr *MockVirtualGatewayFinalizerMockRecorder) VirtualGatewayFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualGatewayFinalizerName", reflect.TypeOf((*MockVirtualGatewayFinalizer)(nil).VirtualGatewayFinalizerName))
}

// FinalizeVirtualGateway mocks base method
func (m *MockVirtualGatewayFinalizer) FinalizeVirtualGateway(obj *v1beta2.VirtualGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualGateway indicates an expected call of FinalizeVirtualGateway
func (mr *MockVirtualGatewayFinalizerMockRecorder) FinalizeVirtualGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualGateway", reflect.TypeOf((*MockVirtualGatewayFinalizer)(nil).FinalizeVirtualGateway), obj)
}

// MockVirtualGatewayReconcileLoop is a mock of VirtualGatewayReconcileLoop interface
type MockVirtualGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGatewayReconcileLoopMockRecorder
}

// MockVirtualGatewayReconcileLoopMockRecorder is the mock recorder for MockVirtualGatewayReconcileLoop
type MockVirtualGatewayReconcileLoopMockRecorder struct {
	mock *MockVirtualGatewayReconcileLoop
}

// NewMockVirtualGatewayReconcileLoop creates a new mock instance
func NewMockVirtualGatewayReconcileLoop(ctrl *gomock.Controller) *MockVirtualGatewayReconcileLoop {
	mock := &MockVirtualGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualGatewayReconcileLoop) EXPECT() *MockVirtualGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualGatewayReconciler mocks base method
func (m *MockVirtualGatewayReconcileLoop) RunVirtualGatewayReconciler(ctx context.Context, rec controller.VirtualGatewayReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualGatewayReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualGatewayReconciler indicates an expected call of RunVirtualGatewayReconciler
func (mr *MockVirtualGatewayReconcileLoopMockRecorder) RunVirtualGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualGatewayReconciler", reflect.TypeOf((*MockVirtualGatewayReconcileLoop)(nil).RunVirtualGatewayReconciler), varargs...)
}

// MockGatewayRouteReconciler is a mock of GatewayRouteReconciler interface
type MockGatewayRouteReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayRouteReconcilerMockRecorder
}

// MockGatewayRouteReconcilerMockRecorder is the mock recorder for MockGatewayRouteReconciler
type MockGatewayRouteReconcilerMockRecorder struct {
	mock *MockGatewayRouteReconciler
}

// NewMockGatewayRouteReconciler creates a new mock instance
func NewMockGatewayRouteReconciler(ctrl *gomock.Controller) *MockGatewayRouteReconciler {
	mock := &MockGatewayRouteReconciler{ctrl: ctrl}
	mock.recorder = &MockGatewayRouteReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayRouteReconciler) EXPECT() *MockGatewayRouteReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayRoute mocks base method
func (m *MockGatewayRouteReconciler) ReconcileGatewayRoute(obj *v1beta2.GatewayRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGatewayRoute indicates an expected call of ReconcileGatewayRoute
func (mr *MockGatewayRouteReconcilerMockRecorder) ReconcileGatewayRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayRoute", reflect.TypeOf((*MockGatewayRouteReconciler)(nil).ReconcileGatewayRoute), obj)
}

// MockGatewayRouteDeletionReconciler is a mock of GatewayRouteDeletionReconciler interface
type MockGatewayRouteDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayRouteDeletionReconcilerMockRecorder
}

// MockGatewayRouteDeletionReconcilerMockRecorder is the mock recorder for MockGatewayRouteDeletionReconciler
type MockGatewayRouteDeletionReconcilerMockRecorder struct {
	mock *MockGatewayRouteDeletionReconciler
}

// NewMockGatewayRouteDeletionReconciler creates a new mock instance
func NewMockGatewayRouteDeletionReconciler(ctrl *gomock.Controller) *MockGatewayRouteDeletionReconciler {
	mock := &MockGatewayRouteDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGatewayRouteDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayRouteDeletionReconciler) EXPECT() *MockGatewayRouteDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayRouteDeletion mocks base method
func (m *MockGatewayRouteDeletionReconciler) ReconcileGatewayRouteDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayRouteDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGatewayRouteDeletion indicates an expected call of ReconcileGatewayRouteDeletion
func (mr *MockGatewayRouteDeletionReconcilerMockRecorder) ReconcileGatewayRouteDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayRouteDeletion", reflect.TypeOf((*MockGatewayRouteDeletionReconciler)(nil).ReconcileGatewayRouteDeletion), req)
}

// MockGatewayRouteFinalizer is a mock of GatewayRouteFinalizer interface
type MockGatewayRouteFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayRouteFinalizerMockRecorder
}

// MockGatewayRouteFinalizerMockRecorder is the mock recorder for MockGatewayRouteFinalizer
type MockGatewayRouteFinalizerMockRecorder struct {
	mock *MockGatewayRouteFinalizer
}

// NewMockGatewayRouteFinalizer creates a new mock instance
func NewMockGatewayRouteFinalizer(ctrl *gomock.Controller) *MockGatewayRouteFinalizer {
	mock := &MockGatewayRouteFinalizer{ctrl: ctrl}
	mock.recorder = &MockGatewayRouteFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayRouteFinalizer) EXPECT() *MockGatewayRouteFinalizerMockRecorder {
	return m.recorder
}

// ReconcileGatewayRoute mocks base method
func (m *MockGatewayRouteFinalizer) ReconcileGatewayRoute(obj *v1beta2.GatewayRoute) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayRoute", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGatewayRoute indicates an expected call of ReconcileGatewayRoute
func (mr *MockGatewayRouteFinalizerMockRecorder) ReconcileGatewayRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayRoute", reflect.TypeOf((*MockGatewayRouteFinalizer)(nil).ReconcileGatewayRoute), obj)
}

// GatewayRouteFinalizerName mocks base method
func (m *MockGatewayRouteFinalizer) GatewayRouteFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayRouteFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GatewayRouteFinalizerName indicates an expected call of GatewayRouteFinalizerName
func (mr *MockGatewayRouteFinalizerMockRecorder) GatewayRouteFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayRouteFinalizerName", reflect.TypeOf((*MockGatewayRouteFinalizer)(nil).GatewayRouteFinalizerName))
}

// FinalizeGatewayRoute mocks base method
func (m *MockGatewayRouteFinalizer) FinalizeGatewayRoute(obj *v1beta2.GatewayRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGatewayRoute", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGatewayRoute indicates an expected call of FinalizeGatewayRoute
func (mr *MockGatewayRouteFinalizerMockRecorder) FinalizeGatewayRoute(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGatewayRoute", reflect.TypeOf((*MockGatewayRouteFinalizer)(nil).FinalizeGatewayRoute), obj)
}

// MockGatewayRouteReconcileLoop is a mock of GatewayRouteReconcileLoop interface
type MockGatewayRouteReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayRouteReconcileLoopMockRecorder
}

// MockGatewayRouteReconcileLoopMockRecorder is the mock recorder for MockGatewayRouteReconcileLoop
type MockGatewayRouteReconcileLoopMockRecorder struct {
	mock *MockGatewayRouteReconcileLoop
}

// NewMockGatewayRouteReconcileLoop creates a new mock instance
func NewMockGatewayRouteReconcileLoop(ctrl *gomock.Controller) *MockGatewayRouteReconcileLoop {
	mock := &MockGatewayRouteReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGatewayRouteReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGatewayRouteReconcileLoop) EXPECT() *MockGatewayRouteReconcileLoopMockRecorder {
	return m.recorder
}

// RunGatewayRouteReconciler mocks base method
func (m *MockGatewayRouteReconcileLoop) RunGatewayRouteReconciler(ctx context.Context, rec controller.GatewayRouteReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGatewayRouteReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGatewayRouteReconciler indicates an expected call of RunGatewayRouteReconciler
func (mr *MockGatewayRouteReconcileLoopMockRecorder) RunGatewayRouteReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGatewayRouteReconciler", reflect.TypeOf((*MockGatewayRouteReconcileLoop)(nil).RunGatewayRouteReconciler), varargs...)
}

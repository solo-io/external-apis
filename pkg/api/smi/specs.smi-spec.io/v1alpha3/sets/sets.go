// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha3sets

import (
	specs_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type HttpRouteGroupSet interface {
	Keys() sets.String
	List() []*specs_smi_spec_io_v1alpha3.HttpRouteGroup
	Map() map[string]*specs_smi_spec_io_v1alpha3.HttpRouteGroup
	Insert(httpRouteGroup ...*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	Equal(httpRouteGroupSet HttpRouteGroupSet) bool
	Has(httpRouteGroup *specs_smi_spec_io_v1alpha3.HttpRouteGroup) bool
	Delete(httpRouteGroup *specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	Union(set HttpRouteGroupSet) HttpRouteGroupSet
	Difference(set HttpRouteGroupSet) HttpRouteGroupSet
	Intersection(set HttpRouteGroupSet) HttpRouteGroupSet
	Find(id ezkube.ResourceId) (*specs_smi_spec_io_v1alpha3.HttpRouteGroup, error)
	Length() int
}

func makeGenericHttpRouteGroupSet(httpRouteGroupList []*specs_smi_spec_io_v1alpha3.HttpRouteGroup) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range httpRouteGroupList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type httpRouteGroupSet struct {
	set sksets.ResourceSet
}

func NewHttpRouteGroupSet(httpRouteGroupList ...*specs_smi_spec_io_v1alpha3.HttpRouteGroup) HttpRouteGroupSet {
	return &httpRouteGroupSet{set: makeGenericHttpRouteGroupSet(httpRouteGroupList)}
}

func NewHttpRouteGroupSetFromList(httpRouteGroupList *specs_smi_spec_io_v1alpha3.HttpRouteGroupList) HttpRouteGroupSet {
	list := make([]*specs_smi_spec_io_v1alpha3.HttpRouteGroup, 0, len(httpRouteGroupList.Items))
	for idx := range httpRouteGroupList.Items {
		list = append(list, &httpRouteGroupList.Items[idx])
	}
	return &httpRouteGroupSet{set: makeGenericHttpRouteGroupSet(list)}
}

func (s *httpRouteGroupSet) Keys() sets.String {
	return s.set.Keys()
}

func (s *httpRouteGroupSet) List() []*specs_smi_spec_io_v1alpha3.HttpRouteGroup {
	var httpRouteGroupList []*specs_smi_spec_io_v1alpha3.HttpRouteGroup
	for _, obj := range s.set.List() {
		httpRouteGroupList = append(httpRouteGroupList, obj.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup))
	}
	return httpRouteGroupList
}

func (s *httpRouteGroupSet) Map() map[string]*specs_smi_spec_io_v1alpha3.HttpRouteGroup {
	newMap := map[string]*specs_smi_spec_io_v1alpha3.HttpRouteGroup{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	}
	return newMap
}

func (s *httpRouteGroupSet) Insert(
	httpRouteGroupList ...*specs_smi_spec_io_v1alpha3.HttpRouteGroup,
) {
	for _, obj := range httpRouteGroupList {
		s.set.Insert(obj)
	}
}

func (s *httpRouteGroupSet) Has(httpRouteGroup *specs_smi_spec_io_v1alpha3.HttpRouteGroup) bool {
	return s.set.Has(httpRouteGroup)
}

func (s *httpRouteGroupSet) Equal(
	httpRouteGroupSet HttpRouteGroupSet,
) bool {
	return s.set.Equal(makeGenericHttpRouteGroupSet(httpRouteGroupSet.List()))
}

func (s *httpRouteGroupSet) Delete(HttpRouteGroup *specs_smi_spec_io_v1alpha3.HttpRouteGroup) {
	s.set.Delete(HttpRouteGroup)
}

func (s *httpRouteGroupSet) Union(set HttpRouteGroupSet) HttpRouteGroupSet {
	return NewHttpRouteGroupSet(append(s.List(), set.List()...)...)
}

func (s *httpRouteGroupSet) Difference(set HttpRouteGroupSet) HttpRouteGroupSet {
	newSet := s.set.Difference(makeGenericHttpRouteGroupSet(set.List()))
	return &httpRouteGroupSet{set: newSet}
}

func (s *httpRouteGroupSet) Intersection(set HttpRouteGroupSet) HttpRouteGroupSet {
	newSet := s.set.Intersection(makeGenericHttpRouteGroupSet(set.List()))
	var httpRouteGroupList []*specs_smi_spec_io_v1alpha3.HttpRouteGroup
	for _, obj := range newSet.List() {
		httpRouteGroupList = append(httpRouteGroupList, obj.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup))
	}
	return NewHttpRouteGroupSet(httpRouteGroupList...)
}

func (s *httpRouteGroupSet) Find(id ezkube.ResourceId) (*specs_smi_spec_io_v1alpha3.HttpRouteGroup, error) {
	obj, err := s.set.Find(&specs_smi_spec_io_v1alpha3.HttpRouteGroup{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup), nil
}

func (s *httpRouteGroupSet) Length() int {
	return s.set.Length()
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha3sets

import (
	specs_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type HTTPRouteGroupSet interface {
	Keys() sets.String
	List() []*specs_smi_spec_io_v1alpha3.HTTPRouteGroup
	Map() map[string]*specs_smi_spec_io_v1alpha3.HTTPRouteGroup
	Insert(hTTPRouteGroup ...*specs_smi_spec_io_v1alpha3.HTTPRouteGroup)
	Equal(hTTPRouteGroupSet HTTPRouteGroupSet) bool
	Has(hTTPRouteGroup *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) bool
	Delete(hTTPRouteGroup *specs_smi_spec_io_v1alpha3.HTTPRouteGroup)
	Union(set HTTPRouteGroupSet) HTTPRouteGroupSet
	Difference(set HTTPRouteGroupSet) HTTPRouteGroupSet
	Intersection(set HTTPRouteGroupSet) HTTPRouteGroupSet
	Find(id ezkube.ResourceId) (*specs_smi_spec_io_v1alpha3.HTTPRouteGroup, error)
	Length() int
}

func makeGenericHTTPRouteGroupSet(hTTPRouteGroupList []*specs_smi_spec_io_v1alpha3.HTTPRouteGroup) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range hTTPRouteGroupList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type hTTPRouteGroupSet struct {
	set sksets.ResourceSet
}

func NewHTTPRouteGroupSet(hTTPRouteGroupList ...*specs_smi_spec_io_v1alpha3.HTTPRouteGroup) HTTPRouteGroupSet {
	return &hTTPRouteGroupSet{set: makeGenericHTTPRouteGroupSet(hTTPRouteGroupList)}
}

func NewHTTPRouteGroupSetFromList(hTTPRouteGroupList *specs_smi_spec_io_v1alpha3.HTTPRouteGroupList) HTTPRouteGroupSet {
	list := make([]*specs_smi_spec_io_v1alpha3.HTTPRouteGroup, 0, len(hTTPRouteGroupList.Items))
	for idx := range hTTPRouteGroupList.Items {
		list = append(list, &hTTPRouteGroupList.Items[idx])
	}
	return &hTTPRouteGroupSet{set: makeGenericHTTPRouteGroupSet(list)}
}

func (s *hTTPRouteGroupSet) Keys() sets.String {
	return s.set.Keys()
}

func (s *hTTPRouteGroupSet) List() []*specs_smi_spec_io_v1alpha3.HTTPRouteGroup {
	var hTTPRouteGroupList []*specs_smi_spec_io_v1alpha3.HTTPRouteGroup
	for _, obj := range s.set.List() {
		hTTPRouteGroupList = append(hTTPRouteGroupList, obj.(*specs_smi_spec_io_v1alpha3.HTTPRouteGroup))
	}
	return hTTPRouteGroupList
}

func (s *hTTPRouteGroupSet) Map() map[string]*specs_smi_spec_io_v1alpha3.HTTPRouteGroup {
	newMap := map[string]*specs_smi_spec_io_v1alpha3.HTTPRouteGroup{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*specs_smi_spec_io_v1alpha3.HTTPRouteGroup)
	}
	return newMap
}

func (s *hTTPRouteGroupSet) Insert(
	hTTPRouteGroupList ...*specs_smi_spec_io_v1alpha3.HTTPRouteGroup,
) {
	for _, obj := range hTTPRouteGroupList {
		s.set.Insert(obj)
	}
}

func (s *hTTPRouteGroupSet) Has(hTTPRouteGroup *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) bool {
	return s.set.Has(hTTPRouteGroup)
}

func (s *hTTPRouteGroupSet) Equal(
	hTTPRouteGroupSet HTTPRouteGroupSet,
) bool {
	return s.set.Equal(makeGenericHTTPRouteGroupSet(hTTPRouteGroupSet.List()))
}

func (s *hTTPRouteGroupSet) Delete(HTTPRouteGroup *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) {
	s.set.Delete(HTTPRouteGroup)
}

func (s *hTTPRouteGroupSet) Union(set HTTPRouteGroupSet) HTTPRouteGroupSet {
	return NewHTTPRouteGroupSet(append(s.List(), set.List()...)...)
}

func (s *hTTPRouteGroupSet) Difference(set HTTPRouteGroupSet) HTTPRouteGroupSet {
	newSet := s.set.Difference(makeGenericHTTPRouteGroupSet(set.List()))
	return &hTTPRouteGroupSet{set: newSet}
}

func (s *hTTPRouteGroupSet) Intersection(set HTTPRouteGroupSet) HTTPRouteGroupSet {
	newSet := s.set.Intersection(makeGenericHTTPRouteGroupSet(set.List()))
	var hTTPRouteGroupList []*specs_smi_spec_io_v1alpha3.HTTPRouteGroup
	for _, obj := range newSet.List() {
		hTTPRouteGroupList = append(hTTPRouteGroupList, obj.(*specs_smi_spec_io_v1alpha3.HTTPRouteGroup))
	}
	return NewHTTPRouteGroupSet(hTTPRouteGroupList...)
}

func (s *hTTPRouteGroupSet) Find(id ezkube.ResourceId) (*specs_smi_spec_io_v1alpha3.HTTPRouteGroup, error) {
	obj, err := s.set.Find(&specs_smi_spec_io_v1alpha3.HTTPRouteGroup{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*specs_smi_spec_io_v1alpha3.HTTPRouteGroup), nil
}

func (s *hTTPRouteGroupSet) Length() int {
	return s.set.Length()
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./sets.go

// Package mock_v1alpha3sets is a generated GoMock package.
package mock_v1alpha3sets

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	v1alpha3sets "github.com/solo-io/external-apis/pkg/api/smi/specs.smi-spec.io/v1alpha3/sets"
	ezkube "github.com/solo-io/skv2/pkg/ezkube"
	sets "k8s.io/apimachinery/pkg/util/sets"
)

// MockHttpRouteGroupSet is a mock of HttpRouteGroupSet interface
type MockHttpRouteGroupSet struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouteGroupSetMockRecorder
}

// MockHttpRouteGroupSetMockRecorder is the mock recorder for MockHttpRouteGroupSet
type MockHttpRouteGroupSetMockRecorder struct {
	mock *MockHttpRouteGroupSet
}

// NewMockHttpRouteGroupSet creates a new mock instance
func NewMockHttpRouteGroupSet(ctrl *gomock.Controller) *MockHttpRouteGroupSet {
	mock := &MockHttpRouteGroupSet{ctrl: ctrl}
	mock.recorder = &MockHttpRouteGroupSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouteGroupSet) EXPECT() *MockHttpRouteGroupSetMockRecorder {
	return m.recorder
}

// Keys mocks base method
func (m *MockHttpRouteGroupSet) Keys() sets.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].(sets.String)
	return ret0
}

// Keys indicates an expected call of Keys
func (mr *MockHttpRouteGroupSetMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Keys))
}

// List mocks base method
func (m *MockHttpRouteGroupSet) List() []*v1alpha3.HttpRouteGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*v1alpha3.HttpRouteGroup)
	return ret0
}

// List indicates an expected call of List
func (mr *MockHttpRouteGroupSetMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).List))
}

// Map mocks base method
func (m *MockHttpRouteGroupSet) Map() map[string]*v1alpha3.HttpRouteGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(map[string]*v1alpha3.HttpRouteGroup)
	return ret0
}

// Map indicates an expected call of Map
func (mr *MockHttpRouteGroupSetMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Map))
}

// Insert mocks base method
func (m *MockHttpRouteGroupSet) Insert(httpRouteGroup ...*v1alpha3.HttpRouteGroup) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range httpRouteGroup {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert
func (mr *MockHttpRouteGroupSetMockRecorder) Insert(httpRouteGroup ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Insert), httpRouteGroup...)
}

// Equal mocks base method
func (m *MockHttpRouteGroupSet) Equal(httpRouteGroupSet v1alpha3sets.HttpRouteGroupSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", httpRouteGroupSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockHttpRouteGroupSetMockRecorder) Equal(httpRouteGroupSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Equal), httpRouteGroupSet)
}

// Has mocks base method
func (m *MockHttpRouteGroupSet) Has(httpRouteGroup *v1alpha3.HttpRouteGroup) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", httpRouteGroup)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockHttpRouteGroupSetMockRecorder) Has(httpRouteGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Has), httpRouteGroup)
}

// Delete mocks base method
func (m *MockHttpRouteGroupSet) Delete(httpRouteGroup *v1alpha3.HttpRouteGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", httpRouteGroup)
}

// Delete indicates an expected call of Delete
func (mr *MockHttpRouteGroupSetMockRecorder) Delete(httpRouteGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Delete), httpRouteGroup)
}

// Union mocks base method
func (m *MockHttpRouteGroupSet) Union(set v1alpha3sets.HttpRouteGroupSet) v1alpha3sets.HttpRouteGroupSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Union", set)
	ret0, _ := ret[0].(v1alpha3sets.HttpRouteGroupSet)
	return ret0
}

// Union indicates an expected call of Union
func (mr *MockHttpRouteGroupSetMockRecorder) Union(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Union", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Union), set)
}

// Difference mocks base method
func (m *MockHttpRouteGroupSet) Difference(set v1alpha3sets.HttpRouteGroupSet) v1alpha3sets.HttpRouteGroupSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", set)
	ret0, _ := ret[0].(v1alpha3sets.HttpRouteGroupSet)
	return ret0
}

// Difference indicates an expected call of Difference
func (mr *MockHttpRouteGroupSetMockRecorder) Difference(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Difference), set)
}

// Intersection mocks base method
func (m *MockHttpRouteGroupSet) Intersection(set v1alpha3sets.HttpRouteGroupSet) v1alpha3sets.HttpRouteGroupSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intersection", set)
	ret0, _ := ret[0].(v1alpha3sets.HttpRouteGroupSet)
	return ret0
}

// Intersection indicates an expected call of Intersection
func (mr *MockHttpRouteGroupSetMockRecorder) Intersection(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersection", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Intersection), set)
}

// Find mocks base method
func (m *MockHttpRouteGroupSet) Find(id ezkube.ResourceId) (*v1alpha3.HttpRouteGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*v1alpha3.HttpRouteGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockHttpRouteGroupSetMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Find), id)
}

// Length mocks base method
func (m *MockHttpRouteGroupSet) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockHttpRouteGroupSetMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockHttpRouteGroupSet)(nil).Length))
}

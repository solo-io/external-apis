// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1alpha3

import (
	"context"

	specs_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the specs.smi-spec.io/v1alpha3 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the specs.smi-spec.io/v1alpha3 APIs
type Clientset interface {
	// clienset for the specs.smi-spec.io/v1alpha3/v1alpha3 APIs
	HttpRouteGroups() HttpRouteGroupClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := specs_smi_spec_io_v1alpha3.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the specs.smi-spec.io/v1alpha3/v1alpha3 APIs
func (c *clientSet) HttpRouteGroups() HttpRouteGroupClient {
	return NewHttpRouteGroupClient(c.client)
}

// Reader knows how to read and list HttpRouteGroups.
type HttpRouteGroupReader interface {
	// Get retrieves a HttpRouteGroup for the given object key
	GetHttpRouteGroup(ctx context.Context, key client.ObjectKey) (*specs_smi_spec_io_v1alpha3.HttpRouteGroup, error)

	// List retrieves list of HttpRouteGroups for a given namespace and list options.
	ListHttpRouteGroup(ctx context.Context, opts ...client.ListOption) (*specs_smi_spec_io_v1alpha3.HttpRouteGroupList, error)
}

// HttpRouteGroupTransitionFunction instructs the HttpRouteGroupWriter how to transition between an existing
// HttpRouteGroup object and a desired on an Upsert
type HttpRouteGroupTransitionFunction func(existing, desired *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error

// Writer knows how to create, delete, and update HttpRouteGroups.
type HttpRouteGroupWriter interface {
	// Create saves the HttpRouteGroup object.
	CreateHttpRouteGroup(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, opts ...client.CreateOption) error

	// Delete deletes the HttpRouteGroup object.
	DeleteHttpRouteGroup(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given HttpRouteGroup object.
	UpdateHttpRouteGroup(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, opts ...client.UpdateOption) error

	// Patch patches the given HttpRouteGroup object.
	PatchHttpRouteGroup(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all HttpRouteGroup objects matching the given options.
	DeleteAllOfHttpRouteGroup(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the HttpRouteGroup object.
	UpsertHttpRouteGroup(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, transitionFuncs ...HttpRouteGroupTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a HttpRouteGroup object.
type HttpRouteGroupStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given HttpRouteGroup object.
	UpdateHttpRouteGroupStatus(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, opts ...client.UpdateOption) error

	// Patch patches the given HttpRouteGroup object's subresource.
	PatchHttpRouteGroupStatus(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on HttpRouteGroups.
type HttpRouteGroupClient interface {
	HttpRouteGroupReader
	HttpRouteGroupWriter
	HttpRouteGroupStatusWriter
}

type httpRouteGroupClient struct {
	client client.Client
}

func NewHttpRouteGroupClient(client client.Client) *httpRouteGroupClient {
	return &httpRouteGroupClient{client: client}
}

func (c *httpRouteGroupClient) GetHttpRouteGroup(ctx context.Context, key client.ObjectKey) (*specs_smi_spec_io_v1alpha3.HttpRouteGroup, error) {
	obj := &specs_smi_spec_io_v1alpha3.HttpRouteGroup{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *httpRouteGroupClient) ListHttpRouteGroup(ctx context.Context, opts ...client.ListOption) (*specs_smi_spec_io_v1alpha3.HttpRouteGroupList, error) {
	list := &specs_smi_spec_io_v1alpha3.HttpRouteGroupList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *httpRouteGroupClient) CreateHttpRouteGroup(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *httpRouteGroupClient) DeleteHttpRouteGroup(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &specs_smi_spec_io_v1alpha3.HttpRouteGroup{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *httpRouteGroupClient) UpdateHttpRouteGroup(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *httpRouteGroupClient) PatchHttpRouteGroup(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *httpRouteGroupClient) DeleteAllOfHttpRouteGroup(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &specs_smi_spec_io_v1alpha3.HttpRouteGroup{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *httpRouteGroupClient) UpsertHttpRouteGroup(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, transitionFuncs ...HttpRouteGroupTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup), desired.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *httpRouteGroupClient) UpdateHttpRouteGroupStatus(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *httpRouteGroupClient) PatchHttpRouteGroupStatus(ctx context.Context, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides HttpRouteGroupClients for multiple clusters.
type MulticlusterHttpRouteGroupClient interface {
	// Cluster returns a HttpRouteGroupClient for the given cluster
	Cluster(cluster string) (HttpRouteGroupClient, error)
}

type multiclusterHttpRouteGroupClient struct {
	client multicluster.Client
}

func NewMulticlusterHttpRouteGroupClient(client multicluster.Client) MulticlusterHttpRouteGroupClient {
	return &multiclusterHttpRouteGroupClient{client: client}
}

func (m *multiclusterHttpRouteGroupClient) Cluster(cluster string) (HttpRouteGroupClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewHttpRouteGroupClient(client), nil
}

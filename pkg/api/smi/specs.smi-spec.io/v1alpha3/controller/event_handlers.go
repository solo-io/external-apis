// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	specs_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the HTTPRouteGroup Resource
// DEPRECATED: Prefer reconciler pattern.
type HTTPRouteGroupEventHandler interface {
	CreateHTTPRouteGroup(obj *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error
	UpdateHTTPRouteGroup(old, new *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error
	DeleteHTTPRouteGroup(obj *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error
	GenericHTTPRouteGroup(obj *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error
}

type HTTPRouteGroupEventHandlerFuncs struct {
	OnCreate  func(obj *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error
	OnUpdate  func(old, new *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error
	OnDelete  func(obj *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error
	OnGeneric func(obj *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error
}

func (f *HTTPRouteGroupEventHandlerFuncs) CreateHTTPRouteGroup(obj *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *HTTPRouteGroupEventHandlerFuncs) DeleteHTTPRouteGroup(obj *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *HTTPRouteGroupEventHandlerFuncs) UpdateHTTPRouteGroup(objOld, objNew *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *HTTPRouteGroupEventHandlerFuncs) GenericHTTPRouteGroup(obj *specs_smi_spec_io_v1alpha3.HTTPRouteGroup) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type HTTPRouteGroupEventWatcher interface {
	AddEventHandler(ctx context.Context, h HTTPRouteGroupEventHandler, predicates ...predicate.Predicate) error
}

type hTTPRouteGroupEventWatcher struct {
	watcher events.EventWatcher
}

func NewHTTPRouteGroupEventWatcher(name string, mgr manager.Manager) HTTPRouteGroupEventWatcher {
	return &hTTPRouteGroupEventWatcher{
		watcher: events.NewWatcher(name, mgr, &specs_smi_spec_io_v1alpha3.HTTPRouteGroup{}),
	}
}

func (c *hTTPRouteGroupEventWatcher) AddEventHandler(ctx context.Context, h HTTPRouteGroupEventHandler, predicates ...predicate.Predicate) error {
	handler := genericHTTPRouteGroupHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericHTTPRouteGroupHandler implements a generic events.EventHandler
type genericHTTPRouteGroupHandler struct {
	handler HTTPRouteGroupEventHandler
}

func (h genericHTTPRouteGroupHandler) Create(object runtime.Object) error {
	obj, ok := object.(*specs_smi_spec_io_v1alpha3.HTTPRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HTTPRouteGroup handler received event for %T", object)
	}
	return h.handler.CreateHTTPRouteGroup(obj)
}

func (h genericHTTPRouteGroupHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*specs_smi_spec_io_v1alpha3.HTTPRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HTTPRouteGroup handler received event for %T", object)
	}
	return h.handler.DeleteHTTPRouteGroup(obj)
}

func (h genericHTTPRouteGroupHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*specs_smi_spec_io_v1alpha3.HTTPRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HTTPRouteGroup handler received event for %T", old)
	}
	objNew, ok := new.(*specs_smi_spec_io_v1alpha3.HTTPRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HTTPRouteGroup handler received event for %T", new)
	}
	return h.handler.UpdateHTTPRouteGroup(objOld, objNew)
}

func (h genericHTTPRouteGroupHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*specs_smi_spec_io_v1alpha3.HTTPRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HTTPRouteGroup handler received event for %T", object)
	}
	return h.handler.GenericHTTPRouteGroup(obj)
}

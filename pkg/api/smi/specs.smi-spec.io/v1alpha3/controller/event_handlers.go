// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	specs_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the HttpRouteGroup Resource
// DEPRECATED: Prefer reconciler pattern.
type HttpRouteGroupEventHandler interface {
	CreateHttpRouteGroup(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error
	UpdateHttpRouteGroup(old, new *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error
	DeleteHttpRouteGroup(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error
	GenericHttpRouteGroup(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error
}

type HttpRouteGroupEventHandlerFuncs struct {
	OnCreate  func(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error
	OnUpdate  func(old, new *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error
	OnDelete  func(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error
	OnGeneric func(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error
}

func (f *HttpRouteGroupEventHandlerFuncs) CreateHttpRouteGroup(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *HttpRouteGroupEventHandlerFuncs) DeleteHttpRouteGroup(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *HttpRouteGroupEventHandlerFuncs) UpdateHttpRouteGroup(objOld, objNew *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *HttpRouteGroupEventHandlerFuncs) GenericHttpRouteGroup(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type HttpRouteGroupEventWatcher interface {
	AddEventHandler(ctx context.Context, h HttpRouteGroupEventHandler, predicates ...predicate.Predicate) error
}

type httpRouteGroupEventWatcher struct {
	watcher events.EventWatcher
}

func NewHttpRouteGroupEventWatcher(name string, mgr manager.Manager) HttpRouteGroupEventWatcher {
	return &httpRouteGroupEventWatcher{
		watcher: events.NewWatcher(name, mgr, &specs_smi_spec_io_v1alpha3.HttpRouteGroup{}),
	}
}

func (c *httpRouteGroupEventWatcher) AddEventHandler(ctx context.Context, h HttpRouteGroupEventHandler, predicates ...predicate.Predicate) error {
	handler := genericHttpRouteGroupHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericHttpRouteGroupHandler implements a generic events.EventHandler
type genericHttpRouteGroupHandler struct {
	handler HttpRouteGroupEventHandler
}

func (h genericHttpRouteGroupHandler) Create(object runtime.Object) error {
	obj, ok := object.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HttpRouteGroup handler received event for %T", object)
	}
	return h.handler.CreateHttpRouteGroup(obj)
}

func (h genericHttpRouteGroupHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HttpRouteGroup handler received event for %T", object)
	}
	return h.handler.DeleteHttpRouteGroup(obj)
}

func (h genericHttpRouteGroupHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HttpRouteGroup handler received event for %T", old)
	}
	objNew, ok := new.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HttpRouteGroup handler received event for %T", new)
	}
	return h.handler.UpdateHttpRouteGroup(objOld, objNew)
}

func (h genericHttpRouteGroupHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HttpRouteGroup handler received event for %T", object)
	}
	return h.handler.GenericHttpRouteGroup(obj)
}

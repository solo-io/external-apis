// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	controller "github.com/solo-io/external-apis/pkg/api/smi/specs.smi-spec.io/v1alpha3/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockHttpRouteGroupEventHandler is a mock of HttpRouteGroupEventHandler interface
type MockHttpRouteGroupEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouteGroupEventHandlerMockRecorder
}

// MockHttpRouteGroupEventHandlerMockRecorder is the mock recorder for MockHttpRouteGroupEventHandler
type MockHttpRouteGroupEventHandlerMockRecorder struct {
	mock *MockHttpRouteGroupEventHandler
}

// NewMockHttpRouteGroupEventHandler creates a new mock instance
func NewMockHttpRouteGroupEventHandler(ctrl *gomock.Controller) *MockHttpRouteGroupEventHandler {
	mock := &MockHttpRouteGroupEventHandler{ctrl: ctrl}
	mock.recorder = &MockHttpRouteGroupEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouteGroupEventHandler) EXPECT() *MockHttpRouteGroupEventHandlerMockRecorder {
	return m.recorder
}

// CreateHttpRouteGroup mocks base method
func (m *MockHttpRouteGroupEventHandler) CreateHttpRouteGroup(obj *v1alpha3.HttpRouteGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHttpRouteGroup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHttpRouteGroup indicates an expected call of CreateHttpRouteGroup
func (mr *MockHttpRouteGroupEventHandlerMockRecorder) CreateHttpRouteGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHttpRouteGroup", reflect.TypeOf((*MockHttpRouteGroupEventHandler)(nil).CreateHttpRouteGroup), obj)
}

// UpdateHttpRouteGroup mocks base method
func (m *MockHttpRouteGroupEventHandler) UpdateHttpRouteGroup(old, new *v1alpha3.HttpRouteGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHttpRouteGroup", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHttpRouteGroup indicates an expected call of UpdateHttpRouteGroup
func (mr *MockHttpRouteGroupEventHandlerMockRecorder) UpdateHttpRouteGroup(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHttpRouteGroup", reflect.TypeOf((*MockHttpRouteGroupEventHandler)(nil).UpdateHttpRouteGroup), old, new)
}

// DeleteHttpRouteGroup mocks base method
func (m *MockHttpRouteGroupEventHandler) DeleteHttpRouteGroup(obj *v1alpha3.HttpRouteGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHttpRouteGroup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHttpRouteGroup indicates an expected call of DeleteHttpRouteGroup
func (mr *MockHttpRouteGroupEventHandlerMockRecorder) DeleteHttpRouteGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHttpRouteGroup", reflect.TypeOf((*MockHttpRouteGroupEventHandler)(nil).DeleteHttpRouteGroup), obj)
}

// GenericHttpRouteGroup mocks base method
func (m *MockHttpRouteGroupEventHandler) GenericHttpRouteGroup(obj *v1alpha3.HttpRouteGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericHttpRouteGroup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericHttpRouteGroup indicates an expected call of GenericHttpRouteGroup
func (mr *MockHttpRouteGroupEventHandlerMockRecorder) GenericHttpRouteGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericHttpRouteGroup", reflect.TypeOf((*MockHttpRouteGroupEventHandler)(nil).GenericHttpRouteGroup), obj)
}

// MockHttpRouteGroupEventWatcher is a mock of HttpRouteGroupEventWatcher interface
type MockHttpRouteGroupEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouteGroupEventWatcherMockRecorder
}

// MockHttpRouteGroupEventWatcherMockRecorder is the mock recorder for MockHttpRouteGroupEventWatcher
type MockHttpRouteGroupEventWatcherMockRecorder struct {
	mock *MockHttpRouteGroupEventWatcher
}

// NewMockHttpRouteGroupEventWatcher creates a new mock instance
func NewMockHttpRouteGroupEventWatcher(ctrl *gomock.Controller) *MockHttpRouteGroupEventWatcher {
	mock := &MockHttpRouteGroupEventWatcher{ctrl: ctrl}
	mock.recorder = &MockHttpRouteGroupEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouteGroupEventWatcher) EXPECT() *MockHttpRouteGroupEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockHttpRouteGroupEventWatcher) AddEventHandler(ctx context.Context, h controller.HttpRouteGroupEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockHttpRouteGroupEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockHttpRouteGroupEventWatcher)(nil).AddEventHandler), varargs...)
}

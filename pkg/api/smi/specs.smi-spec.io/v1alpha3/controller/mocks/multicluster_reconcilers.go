// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	controller "github.com/solo-io/external-apis/pkg/api/smi/specs.smi-spec.io/v1alpha3/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterHTTPRouteGroupReconciler is a mock of MulticlusterHTTPRouteGroupReconciler interface
type MockMulticlusterHTTPRouteGroupReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPRouteGroupReconcilerMockRecorder
}

// MockMulticlusterHTTPRouteGroupReconcilerMockRecorder is the mock recorder for MockMulticlusterHTTPRouteGroupReconciler
type MockMulticlusterHTTPRouteGroupReconcilerMockRecorder struct {
	mock *MockMulticlusterHTTPRouteGroupReconciler
}

// NewMockMulticlusterHTTPRouteGroupReconciler creates a new mock instance
func NewMockMulticlusterHTTPRouteGroupReconciler(ctrl *gomock.Controller) *MockMulticlusterHTTPRouteGroupReconciler {
	mock := &MockMulticlusterHTTPRouteGroupReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPRouteGroupReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterHTTPRouteGroupReconciler) EXPECT() *MockMulticlusterHTTPRouteGroupReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHTTPRouteGroup mocks base method
func (m *MockMulticlusterHTTPRouteGroupReconciler) ReconcileHTTPRouteGroup(clusterName string, obj *v1alpha3.HTTPRouteGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHTTPRouteGroup", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileHTTPRouteGroup indicates an expected call of ReconcileHTTPRouteGroup
func (mr *MockMulticlusterHTTPRouteGroupReconcilerMockRecorder) ReconcileHTTPRouteGroup(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHTTPRouteGroup", reflect.TypeOf((*MockMulticlusterHTTPRouteGroupReconciler)(nil).ReconcileHTTPRouteGroup), clusterName, obj)
}

// MockMulticlusterHTTPRouteGroupDeletionReconciler is a mock of MulticlusterHTTPRouteGroupDeletionReconciler interface
type MockMulticlusterHTTPRouteGroupDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPRouteGroupDeletionReconcilerMockRecorder
}

// MockMulticlusterHTTPRouteGroupDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterHTTPRouteGroupDeletionReconciler
type MockMulticlusterHTTPRouteGroupDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterHTTPRouteGroupDeletionReconciler
}

// NewMockMulticlusterHTTPRouteGroupDeletionReconciler creates a new mock instance
func NewMockMulticlusterHTTPRouteGroupDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterHTTPRouteGroupDeletionReconciler {
	mock := &MockMulticlusterHTTPRouteGroupDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPRouteGroupDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterHTTPRouteGroupDeletionReconciler) EXPECT() *MockMulticlusterHTTPRouteGroupDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHTTPRouteGroupDeletion mocks base method
func (m *MockMulticlusterHTTPRouteGroupDeletionReconciler) ReconcileHTTPRouteGroupDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHTTPRouteGroupDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileHTTPRouteGroupDeletion indicates an expected call of ReconcileHTTPRouteGroupDeletion
func (mr *MockMulticlusterHTTPRouteGroupDeletionReconcilerMockRecorder) ReconcileHTTPRouteGroupDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHTTPRouteGroupDeletion", reflect.TypeOf((*MockMulticlusterHTTPRouteGroupDeletionReconciler)(nil).ReconcileHTTPRouteGroupDeletion), clusterName, req)
}

// MockMulticlusterHTTPRouteGroupReconcileLoop is a mock of MulticlusterHTTPRouteGroupReconcileLoop interface
type MockMulticlusterHTTPRouteGroupReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHTTPRouteGroupReconcileLoopMockRecorder
}

// MockMulticlusterHTTPRouteGroupReconcileLoopMockRecorder is the mock recorder for MockMulticlusterHTTPRouteGroupReconcileLoop
type MockMulticlusterHTTPRouteGroupReconcileLoopMockRecorder struct {
	mock *MockMulticlusterHTTPRouteGroupReconcileLoop
}

// NewMockMulticlusterHTTPRouteGroupReconcileLoop creates a new mock instance
func NewMockMulticlusterHTTPRouteGroupReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterHTTPRouteGroupReconcileLoop {
	mock := &MockMulticlusterHTTPRouteGroupReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHTTPRouteGroupReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterHTTPRouteGroupReconcileLoop) EXPECT() *MockMulticlusterHTTPRouteGroupReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterHTTPRouteGroupReconciler mocks base method
func (m *MockMulticlusterHTTPRouteGroupReconcileLoop) AddMulticlusterHTTPRouteGroupReconciler(ctx context.Context, rec controller.MulticlusterHTTPRouteGroupReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterHTTPRouteGroupReconciler", varargs...)
}

// AddMulticlusterHTTPRouteGroupReconciler indicates an expected call of AddMulticlusterHTTPRouteGroupReconciler
func (mr *MockMulticlusterHTTPRouteGroupReconcileLoopMockRecorder) AddMulticlusterHTTPRouteGroupReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterHTTPRouteGroupReconciler", reflect.TypeOf((*MockMulticlusterHTTPRouteGroupReconcileLoop)(nil).AddMulticlusterHTTPRouteGroupReconciler), varargs...)
}

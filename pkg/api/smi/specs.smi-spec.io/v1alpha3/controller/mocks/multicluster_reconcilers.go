// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	controller "github.com/solo-io/external-apis/pkg/api/smi/specs.smi-spec.io/v1alpha3/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterHttpRouteGroupReconciler is a mock of MulticlusterHttpRouteGroupReconciler interface
type MockMulticlusterHttpRouteGroupReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHttpRouteGroupReconcilerMockRecorder
}

// MockMulticlusterHttpRouteGroupReconcilerMockRecorder is the mock recorder for MockMulticlusterHttpRouteGroupReconciler
type MockMulticlusterHttpRouteGroupReconcilerMockRecorder struct {
	mock *MockMulticlusterHttpRouteGroupReconciler
}

// NewMockMulticlusterHttpRouteGroupReconciler creates a new mock instance
func NewMockMulticlusterHttpRouteGroupReconciler(ctrl *gomock.Controller) *MockMulticlusterHttpRouteGroupReconciler {
	mock := &MockMulticlusterHttpRouteGroupReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHttpRouteGroupReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterHttpRouteGroupReconciler) EXPECT() *MockMulticlusterHttpRouteGroupReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHttpRouteGroup mocks base method
func (m *MockMulticlusterHttpRouteGroupReconciler) ReconcileHttpRouteGroup(clusterName string, obj *v1alpha3.HttpRouteGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHttpRouteGroup", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileHttpRouteGroup indicates an expected call of ReconcileHttpRouteGroup
func (mr *MockMulticlusterHttpRouteGroupReconcilerMockRecorder) ReconcileHttpRouteGroup(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHttpRouteGroup", reflect.TypeOf((*MockMulticlusterHttpRouteGroupReconciler)(nil).ReconcileHttpRouteGroup), clusterName, obj)
}

// MockMulticlusterHttpRouteGroupDeletionReconciler is a mock of MulticlusterHttpRouteGroupDeletionReconciler interface
type MockMulticlusterHttpRouteGroupDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHttpRouteGroupDeletionReconcilerMockRecorder
}

// MockMulticlusterHttpRouteGroupDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterHttpRouteGroupDeletionReconciler
type MockMulticlusterHttpRouteGroupDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterHttpRouteGroupDeletionReconciler
}

// NewMockMulticlusterHttpRouteGroupDeletionReconciler creates a new mock instance
func NewMockMulticlusterHttpRouteGroupDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterHttpRouteGroupDeletionReconciler {
	mock := &MockMulticlusterHttpRouteGroupDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHttpRouteGroupDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterHttpRouteGroupDeletionReconciler) EXPECT() *MockMulticlusterHttpRouteGroupDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHttpRouteGroupDeletion mocks base method
func (m *MockMulticlusterHttpRouteGroupDeletionReconciler) ReconcileHttpRouteGroupDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHttpRouteGroupDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileHttpRouteGroupDeletion indicates an expected call of ReconcileHttpRouteGroupDeletion
func (mr *MockMulticlusterHttpRouteGroupDeletionReconcilerMockRecorder) ReconcileHttpRouteGroupDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHttpRouteGroupDeletion", reflect.TypeOf((*MockMulticlusterHttpRouteGroupDeletionReconciler)(nil).ReconcileHttpRouteGroupDeletion), clusterName, req)
}

// MockMulticlusterHttpRouteGroupReconcileLoop is a mock of MulticlusterHttpRouteGroupReconcileLoop interface
type MockMulticlusterHttpRouteGroupReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterHttpRouteGroupReconcileLoopMockRecorder
}

// MockMulticlusterHttpRouteGroupReconcileLoopMockRecorder is the mock recorder for MockMulticlusterHttpRouteGroupReconcileLoop
type MockMulticlusterHttpRouteGroupReconcileLoopMockRecorder struct {
	mock *MockMulticlusterHttpRouteGroupReconcileLoop
}

// NewMockMulticlusterHttpRouteGroupReconcileLoop creates a new mock instance
func NewMockMulticlusterHttpRouteGroupReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterHttpRouteGroupReconcileLoop {
	mock := &MockMulticlusterHttpRouteGroupReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterHttpRouteGroupReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterHttpRouteGroupReconcileLoop) EXPECT() *MockMulticlusterHttpRouteGroupReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterHttpRouteGroupReconciler mocks base method
func (m *MockMulticlusterHttpRouteGroupReconcileLoop) AddMulticlusterHttpRouteGroupReconciler(ctx context.Context, rec controller.MulticlusterHttpRouteGroupReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterHttpRouteGroupReconciler", varargs...)
}

// AddMulticlusterHttpRouteGroupReconciler indicates an expected call of AddMulticlusterHttpRouteGroupReconciler
func (mr *MockMulticlusterHttpRouteGroupReconcileLoopMockRecorder) AddMulticlusterHttpRouteGroupReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterHttpRouteGroupReconciler", reflect.TypeOf((*MockMulticlusterHttpRouteGroupReconcileLoop)(nil).AddMulticlusterHttpRouteGroupReconciler), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	controller "github.com/solo-io/external-apis/pkg/api/smi/specs.smi-spec.io/v1alpha3/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockHttpRouteGroupReconciler is a mock of HttpRouteGroupReconciler interface
type MockHttpRouteGroupReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouteGroupReconcilerMockRecorder
}

// MockHttpRouteGroupReconcilerMockRecorder is the mock recorder for MockHttpRouteGroupReconciler
type MockHttpRouteGroupReconcilerMockRecorder struct {
	mock *MockHttpRouteGroupReconciler
}

// NewMockHttpRouteGroupReconciler creates a new mock instance
func NewMockHttpRouteGroupReconciler(ctrl *gomock.Controller) *MockHttpRouteGroupReconciler {
	mock := &MockHttpRouteGroupReconciler{ctrl: ctrl}
	mock.recorder = &MockHttpRouteGroupReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouteGroupReconciler) EXPECT() *MockHttpRouteGroupReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHttpRouteGroup mocks base method
func (m *MockHttpRouteGroupReconciler) ReconcileHttpRouteGroup(obj *v1alpha3.HttpRouteGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHttpRouteGroup", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileHttpRouteGroup indicates an expected call of ReconcileHttpRouteGroup
func (mr *MockHttpRouteGroupReconcilerMockRecorder) ReconcileHttpRouteGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHttpRouteGroup", reflect.TypeOf((*MockHttpRouteGroupReconciler)(nil).ReconcileHttpRouteGroup), obj)
}

// MockHttpRouteGroupDeletionReconciler is a mock of HttpRouteGroupDeletionReconciler interface
type MockHttpRouteGroupDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouteGroupDeletionReconcilerMockRecorder
}

// MockHttpRouteGroupDeletionReconcilerMockRecorder is the mock recorder for MockHttpRouteGroupDeletionReconciler
type MockHttpRouteGroupDeletionReconcilerMockRecorder struct {
	mock *MockHttpRouteGroupDeletionReconciler
}

// NewMockHttpRouteGroupDeletionReconciler creates a new mock instance
func NewMockHttpRouteGroupDeletionReconciler(ctrl *gomock.Controller) *MockHttpRouteGroupDeletionReconciler {
	mock := &MockHttpRouteGroupDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockHttpRouteGroupDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouteGroupDeletionReconciler) EXPECT() *MockHttpRouteGroupDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileHttpRouteGroupDeletion mocks base method
func (m *MockHttpRouteGroupDeletionReconciler) ReconcileHttpRouteGroupDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHttpRouteGroupDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileHttpRouteGroupDeletion indicates an expected call of ReconcileHttpRouteGroupDeletion
func (mr *MockHttpRouteGroupDeletionReconcilerMockRecorder) ReconcileHttpRouteGroupDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHttpRouteGroupDeletion", reflect.TypeOf((*MockHttpRouteGroupDeletionReconciler)(nil).ReconcileHttpRouteGroupDeletion), req)
}

// MockHttpRouteGroupFinalizer is a mock of HttpRouteGroupFinalizer interface
type MockHttpRouteGroupFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouteGroupFinalizerMockRecorder
}

// MockHttpRouteGroupFinalizerMockRecorder is the mock recorder for MockHttpRouteGroupFinalizer
type MockHttpRouteGroupFinalizerMockRecorder struct {
	mock *MockHttpRouteGroupFinalizer
}

// NewMockHttpRouteGroupFinalizer creates a new mock instance
func NewMockHttpRouteGroupFinalizer(ctrl *gomock.Controller) *MockHttpRouteGroupFinalizer {
	mock := &MockHttpRouteGroupFinalizer{ctrl: ctrl}
	mock.recorder = &MockHttpRouteGroupFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouteGroupFinalizer) EXPECT() *MockHttpRouteGroupFinalizerMockRecorder {
	return m.recorder
}

// ReconcileHttpRouteGroup mocks base method
func (m *MockHttpRouteGroupFinalizer) ReconcileHttpRouteGroup(obj *v1alpha3.HttpRouteGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileHttpRouteGroup", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileHttpRouteGroup indicates an expected call of ReconcileHttpRouteGroup
func (mr *MockHttpRouteGroupFinalizerMockRecorder) ReconcileHttpRouteGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileHttpRouteGroup", reflect.TypeOf((*MockHttpRouteGroupFinalizer)(nil).ReconcileHttpRouteGroup), obj)
}

// HttpRouteGroupFinalizerName mocks base method
func (m *MockHttpRouteGroupFinalizer) HttpRouteGroupFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HttpRouteGroupFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// HttpRouteGroupFinalizerName indicates an expected call of HttpRouteGroupFinalizerName
func (mr *MockHttpRouteGroupFinalizerMockRecorder) HttpRouteGroupFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpRouteGroupFinalizerName", reflect.TypeOf((*MockHttpRouteGroupFinalizer)(nil).HttpRouteGroupFinalizerName))
}

// FinalizeHttpRouteGroup mocks base method
func (m *MockHttpRouteGroupFinalizer) FinalizeHttpRouteGroup(obj *v1alpha3.HttpRouteGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeHttpRouteGroup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeHttpRouteGroup indicates an expected call of FinalizeHttpRouteGroup
func (mr *MockHttpRouteGroupFinalizerMockRecorder) FinalizeHttpRouteGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeHttpRouteGroup", reflect.TypeOf((*MockHttpRouteGroupFinalizer)(nil).FinalizeHttpRouteGroup), obj)
}

// MockHttpRouteGroupReconcileLoop is a mock of HttpRouteGroupReconcileLoop interface
type MockHttpRouteGroupReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouteGroupReconcileLoopMockRecorder
}

// MockHttpRouteGroupReconcileLoopMockRecorder is the mock recorder for MockHttpRouteGroupReconcileLoop
type MockHttpRouteGroupReconcileLoopMockRecorder struct {
	mock *MockHttpRouteGroupReconcileLoop
}

// NewMockHttpRouteGroupReconcileLoop creates a new mock instance
func NewMockHttpRouteGroupReconcileLoop(ctrl *gomock.Controller) *MockHttpRouteGroupReconcileLoop {
	mock := &MockHttpRouteGroupReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockHttpRouteGroupReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouteGroupReconcileLoop) EXPECT() *MockHttpRouteGroupReconcileLoopMockRecorder {
	return m.recorder
}

// RunHttpRouteGroupReconciler mocks base method
func (m *MockHttpRouteGroupReconcileLoop) RunHttpRouteGroupReconciler(ctx context.Context, rec controller.HttpRouteGroupReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunHttpRouteGroupReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunHttpRouteGroupReconciler indicates an expected call of RunHttpRouteGroupReconciler
func (mr *MockHttpRouteGroupReconcileLoopMockRecorder) RunHttpRouteGroupReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHttpRouteGroupReconciler", reflect.TypeOf((*MockHttpRouteGroupReconcileLoop)(nil).RunHttpRouteGroupReconciler), varargs...)
}

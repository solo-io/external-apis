// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	specs_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the HttpRouteGroup Resource across clusters.
// implemented by the user
type MulticlusterHttpRouteGroupReconciler interface {
	ReconcileHttpRouteGroup(clusterName string, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) (reconcile.Result, error)
}

// Reconcile deletion events for the HttpRouteGroup Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterHttpRouteGroupDeletionReconciler interface {
	ReconcileHttpRouteGroupDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterHttpRouteGroupReconcilerFuncs struct {
	OnReconcileHttpRouteGroup         func(clusterName string, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) (reconcile.Result, error)
	OnReconcileHttpRouteGroupDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterHttpRouteGroupReconcilerFuncs) ReconcileHttpRouteGroup(clusterName string, obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) (reconcile.Result, error) {
	if f.OnReconcileHttpRouteGroup == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileHttpRouteGroup(clusterName, obj)
}

func (f *MulticlusterHttpRouteGroupReconcilerFuncs) ReconcileHttpRouteGroupDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileHttpRouteGroupDeletion == nil {
		return nil
	}
	return f.OnReconcileHttpRouteGroupDeletion(clusterName, req)
}

type MulticlusterHttpRouteGroupReconcileLoop interface {
	// AddMulticlusterHttpRouteGroupReconciler adds a MulticlusterHttpRouteGroupReconciler to the MulticlusterHttpRouteGroupReconcileLoop.
	AddMulticlusterHttpRouteGroupReconciler(ctx context.Context, rec MulticlusterHttpRouteGroupReconciler, predicates ...predicate.Predicate)
}

type multiclusterHttpRouteGroupReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterHttpRouteGroupReconcileLoop) AddMulticlusterHttpRouteGroupReconciler(ctx context.Context, rec MulticlusterHttpRouteGroupReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericHttpRouteGroupMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterHttpRouteGroupReconcileLoop(name string, cw multicluster.ClusterWatcher) MulticlusterHttpRouteGroupReconcileLoop {
	return &multiclusterHttpRouteGroupReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &specs_smi_spec_io_v1alpha3.HttpRouteGroup{})}
}

type genericHttpRouteGroupMulticlusterReconciler struct {
	reconciler MulticlusterHttpRouteGroupReconciler
}

func (g genericHttpRouteGroupMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterHttpRouteGroupDeletionReconciler); ok {
		return deletionReconciler.ReconcileHttpRouteGroupDeletion(cluster, req)
	}
	return nil
}

func (g genericHttpRouteGroupMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: HttpRouteGroup handler received event for %T", object)
	}
	return g.reconciler.ReconcileHttpRouteGroup(cluster, obj)
}

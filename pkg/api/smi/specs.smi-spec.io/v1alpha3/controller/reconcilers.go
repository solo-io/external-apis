// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	specs_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the HttpRouteGroup Resource.
// implemented by the user
type HttpRouteGroupReconciler interface {
	ReconcileHttpRouteGroup(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) (reconcile.Result, error)
}

// Reconcile deletion events for the HttpRouteGroup Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type HttpRouteGroupDeletionReconciler interface {
	ReconcileHttpRouteGroupDeletion(req reconcile.Request) error
}

type HttpRouteGroupReconcilerFuncs struct {
	OnReconcileHttpRouteGroup         func(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) (reconcile.Result, error)
	OnReconcileHttpRouteGroupDeletion func(req reconcile.Request) error
}

func (f *HttpRouteGroupReconcilerFuncs) ReconcileHttpRouteGroup(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) (reconcile.Result, error) {
	if f.OnReconcileHttpRouteGroup == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileHttpRouteGroup(obj)
}

func (f *HttpRouteGroupReconcilerFuncs) ReconcileHttpRouteGroupDeletion(req reconcile.Request) error {
	if f.OnReconcileHttpRouteGroupDeletion == nil {
		return nil
	}
	return f.OnReconcileHttpRouteGroupDeletion(req)
}

// Reconcile and finalize the HttpRouteGroup Resource
// implemented by the user
type HttpRouteGroupFinalizer interface {
	HttpRouteGroupReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	HttpRouteGroupFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeHttpRouteGroup(obj *specs_smi_spec_io_v1alpha3.HttpRouteGroup) error
}

type HttpRouteGroupReconcileLoop interface {
	RunHttpRouteGroupReconciler(ctx context.Context, rec HttpRouteGroupReconciler, predicates ...predicate.Predicate) error
}

type httpRouteGroupReconcileLoop struct {
	loop reconcile.Loop
}

func NewHttpRouteGroupReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) HttpRouteGroupReconcileLoop {
	return &httpRouteGroupReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &specs_smi_spec_io_v1alpha3.HttpRouteGroup{}, options),
	}
}

func (c *httpRouteGroupReconcileLoop) RunHttpRouteGroupReconciler(ctx context.Context, reconciler HttpRouteGroupReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericHttpRouteGroupReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(HttpRouteGroupFinalizer); ok {
		reconcilerWrapper = genericHttpRouteGroupFinalizer{
			genericHttpRouteGroupReconciler: genericReconciler,
			finalizingReconciler:            finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericHttpRouteGroupHandler implements a generic reconcile.Reconciler
type genericHttpRouteGroupReconciler struct {
	reconciler HttpRouteGroupReconciler
}

func (r genericHttpRouteGroupReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: HttpRouteGroup handler received event for %T", object)
	}
	return r.reconciler.ReconcileHttpRouteGroup(obj)
}

func (r genericHttpRouteGroupReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(HttpRouteGroupDeletionReconciler); ok {
		return deletionReconciler.ReconcileHttpRouteGroupDeletion(request)
	}
	return nil
}

// genericHttpRouteGroupFinalizer implements a generic reconcile.FinalizingReconciler
type genericHttpRouteGroupFinalizer struct {
	genericHttpRouteGroupReconciler
	finalizingReconciler HttpRouteGroupFinalizer
}

func (r genericHttpRouteGroupFinalizer) FinalizerName() string {
	return r.finalizingReconciler.HttpRouteGroupFinalizerName()
}

func (r genericHttpRouteGroupFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*specs_smi_spec_io_v1alpha3.HttpRouteGroup)
	if !ok {
		return errors.Errorf("internal error: HttpRouteGroup handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeHttpRouteGroup(obj)
}

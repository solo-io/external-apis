// Code generated by skv2. DO NOT EDIT.

package v1alpha3

import (
	specs_smi_spec_io_v1alpha3 "github.com/solo-io/external-apis/pkg/api/smi/specs.smi-spec.io/v1alpha3"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for HttpRouteGroupClient from Clientset
func HttpRouteGroupClientFromClientsetProvider(clients specs_smi_spec_io_v1alpha3.Clientset) specs_smi_spec_io_v1alpha3.HttpRouteGroupClient {
	return clients.HttpRouteGroups()
}

// Provider for HttpRouteGroup Client from Client
func HttpRouteGroupClientProvider(client client.Client) specs_smi_spec_io_v1alpha3.HttpRouteGroupClient {
	return specs_smi_spec_io_v1alpha3.NewHttpRouteGroupClient(client)
}

type HttpRouteGroupClientFactory func(client client.Client) specs_smi_spec_io_v1alpha3.HttpRouteGroupClient

func HttpRouteGroupClientFactoryProvider() HttpRouteGroupClientFactory {
	return HttpRouteGroupClientProvider
}

type HttpRouteGroupClientFromConfigFactory func(cfg *rest.Config) (specs_smi_spec_io_v1alpha3.HttpRouteGroupClient, error)

func HttpRouteGroupClientFromConfigFactoryProvider() HttpRouteGroupClientFromConfigFactory {
	return func(cfg *rest.Config) (specs_smi_spec_io_v1alpha3.HttpRouteGroupClient, error) {
		clients, err := specs_smi_spec_io_v1alpha3.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.HttpRouteGroups(), nil
	}
}

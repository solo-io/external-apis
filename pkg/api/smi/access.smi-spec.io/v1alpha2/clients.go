// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1alpha2

import (
	"context"

	access_smi_spec_io_v1alpha2 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/access/v1alpha2"
	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the access.smi-spec.io/v1alpha2 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the access.smi-spec.io/v1alpha2 APIs
type Clientset interface {
	// clienset for the access.smi-spec.io/v1alpha2/v1alpha2 APIs
	TrafficTargets() TrafficTargetClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := access_smi_spec_io_v1alpha2.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the access.smi-spec.io/v1alpha2/v1alpha2 APIs
func (c *clientSet) TrafficTargets() TrafficTargetClient {
	return NewTrafficTargetClient(c.client)
}

// Reader knows how to read and list TrafficTargets.
type TrafficTargetReader interface {
	// Get retrieves a TrafficTarget for the given object key
	GetTrafficTarget(ctx context.Context, key client.ObjectKey) (*access_smi_spec_io_v1alpha2.TrafficTarget, error)

	// List retrieves list of TrafficTargets for a given namespace and list options.
	ListTrafficTarget(ctx context.Context, opts ...client.ListOption) (*access_smi_spec_io_v1alpha2.TrafficTargetList, error)
}

// TrafficTargetTransitionFunction instructs the TrafficTargetWriter how to transition between an existing
// TrafficTarget object and a desired on an Upsert
type TrafficTargetTransitionFunction func(existing, desired *access_smi_spec_io_v1alpha2.TrafficTarget) error

// Writer knows how to create, delete, and update TrafficTargets.
type TrafficTargetWriter interface {
	// Create saves the TrafficTarget object.
	CreateTrafficTarget(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, opts ...client.CreateOption) error

	// Delete deletes the TrafficTarget object.
	DeleteTrafficTarget(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given TrafficTarget object.
	UpdateTrafficTarget(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, opts ...client.UpdateOption) error

	// Patch patches the given TrafficTarget object.
	PatchTrafficTarget(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all TrafficTarget objects matching the given options.
	DeleteAllOfTrafficTarget(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the TrafficTarget object.
	UpsertTrafficTarget(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, transitionFuncs ...TrafficTargetTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a TrafficTarget object.
type TrafficTargetStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given TrafficTarget object.
	UpdateTrafficTargetStatus(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, opts ...client.UpdateOption) error

	// Patch patches the given TrafficTarget object's subresource.
	PatchTrafficTargetStatus(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on TrafficTargets.
type TrafficTargetClient interface {
	TrafficTargetReader
	TrafficTargetWriter
	TrafficTargetStatusWriter
}

type trafficTargetClient struct {
	client client.Client
}

func NewTrafficTargetClient(client client.Client) *trafficTargetClient {
	return &trafficTargetClient{client: client}
}

func (c *trafficTargetClient) GetTrafficTarget(ctx context.Context, key client.ObjectKey) (*access_smi_spec_io_v1alpha2.TrafficTarget, error) {
	obj := &access_smi_spec_io_v1alpha2.TrafficTarget{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *trafficTargetClient) ListTrafficTarget(ctx context.Context, opts ...client.ListOption) (*access_smi_spec_io_v1alpha2.TrafficTargetList, error) {
	list := &access_smi_spec_io_v1alpha2.TrafficTargetList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *trafficTargetClient) CreateTrafficTarget(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *trafficTargetClient) DeleteTrafficTarget(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &access_smi_spec_io_v1alpha2.TrafficTarget{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *trafficTargetClient) UpdateTrafficTarget(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *trafficTargetClient) PatchTrafficTarget(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *trafficTargetClient) DeleteAllOfTrafficTarget(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &access_smi_spec_io_v1alpha2.TrafficTarget{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *trafficTargetClient) UpsertTrafficTarget(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, transitionFuncs ...TrafficTargetTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*access_smi_spec_io_v1alpha2.TrafficTarget), desired.(*access_smi_spec_io_v1alpha2.TrafficTarget)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *trafficTargetClient) UpdateTrafficTargetStatus(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *trafficTargetClient) PatchTrafficTargetStatus(ctx context.Context, obj *access_smi_spec_io_v1alpha2.TrafficTarget, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides TrafficTargetClients for multiple clusters.
type MulticlusterTrafficTargetClient interface {
	// Cluster returns a TrafficTargetClient for the given cluster
	Cluster(cluster string) (TrafficTargetClient, error)
}

type multiclusterTrafficTargetClient struct {
	client multicluster.Client
}

func NewMulticlusterTrafficTargetClient(client multicluster.Client) MulticlusterTrafficTargetClient {
	return &multiclusterTrafficTargetClient{client: client}
}

func (m *multiclusterTrafficTargetClient) Cluster(cluster string) (TrafficTargetClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewTrafficTargetClient(client), nil
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha2sets

import (
	access_smi_spec_io_v1alpha2 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/access/v1alpha2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type TrafficTargetSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*access_smi_spec_io_v1alpha2.TrafficTarget) bool) []*access_smi_spec_io_v1alpha2.TrafficTarget
	// Return the Set as a map of key to resource.
	Map() map[string]*access_smi_spec_io_v1alpha2.TrafficTarget
	// Insert a resource into the set.
	Insert(trafficTarget ...*access_smi_spec_io_v1alpha2.TrafficTarget)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(trafficTargetSet TrafficTargetSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(trafficTarget ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(trafficTarget ezkube.ResourceId)
	// Return the union with the provided set
	Union(set TrafficTargetSet) TrafficTargetSet
	// Return the difference with the provided set
	Difference(set TrafficTargetSet) TrafficTargetSet
	// Return the intersection with the provided set
	Intersection(set TrafficTargetSet) TrafficTargetSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*access_smi_spec_io_v1alpha2.TrafficTarget, error)
	// Get the length of the set
	Length() int
}

func makeGenericTrafficTargetSet(trafficTargetList []*access_smi_spec_io_v1alpha2.TrafficTarget) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range trafficTargetList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type trafficTargetSet struct {
	set sksets.ResourceSet
}

func NewTrafficTargetSet(trafficTargetList ...*access_smi_spec_io_v1alpha2.TrafficTarget) TrafficTargetSet {
	return &trafficTargetSet{set: makeGenericTrafficTargetSet(trafficTargetList)}
}

func NewTrafficTargetSetFromList(trafficTargetList *access_smi_spec_io_v1alpha2.TrafficTargetList) TrafficTargetSet {
	list := make([]*access_smi_spec_io_v1alpha2.TrafficTarget, 0, len(trafficTargetList.Items))
	for idx := range trafficTargetList.Items {
		list = append(list, &trafficTargetList.Items[idx])
	}
	return &trafficTargetSet{set: makeGenericTrafficTargetSet(list)}
}

func (s *trafficTargetSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.set.Keys()
}

func (s *trafficTargetSet) List(filterResource ...func(*access_smi_spec_io_v1alpha2.TrafficTarget) bool) []*access_smi_spec_io_v1alpha2.TrafficTarget {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*access_smi_spec_io_v1alpha2.TrafficTarget))
		})
	}

	var trafficTargetList []*access_smi_spec_io_v1alpha2.TrafficTarget
	for _, obj := range s.set.List(genericFilters...) {
		trafficTargetList = append(trafficTargetList, obj.(*access_smi_spec_io_v1alpha2.TrafficTarget))
	}
	return trafficTargetList
}

func (s *trafficTargetSet) Map() map[string]*access_smi_spec_io_v1alpha2.TrafficTarget {
	if s == nil {
		return nil
	}

	newMap := map[string]*access_smi_spec_io_v1alpha2.TrafficTarget{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*access_smi_spec_io_v1alpha2.TrafficTarget)
	}
	return newMap
}

func (s *trafficTargetSet) Insert(
	trafficTargetList ...*access_smi_spec_io_v1alpha2.TrafficTarget,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range trafficTargetList {
		s.set.Insert(obj)
	}
}

func (s *trafficTargetSet) Has(trafficTarget ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.set.Has(trafficTarget)
}

func (s *trafficTargetSet) Equal(
	trafficTargetSet TrafficTargetSet,
) bool {
	if s == nil {
		return trafficTargetSet == nil
	}
	return s.set.Equal(makeGenericTrafficTargetSet(trafficTargetSet.List()))
}

func (s *trafficTargetSet) Delete(TrafficTarget ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.set.Delete(TrafficTarget)
}

func (s *trafficTargetSet) Union(set TrafficTargetSet) TrafficTargetSet {
	if s == nil {
		return set
	}
	return NewTrafficTargetSet(append(s.List(), set.List()...)...)
}

func (s *trafficTargetSet) Difference(set TrafficTargetSet) TrafficTargetSet {
	if s == nil {
		return set
	}
	newSet := s.set.Difference(makeGenericTrafficTargetSet(set.List()))
	return &trafficTargetSet{set: newSet}
}

func (s *trafficTargetSet) Intersection(set TrafficTargetSet) TrafficTargetSet {
	if s == nil {
		return nil
	}
	newSet := s.set.Intersection(makeGenericTrafficTargetSet(set.List()))
	var trafficTargetList []*access_smi_spec_io_v1alpha2.TrafficTarget
	for _, obj := range newSet.List() {
		trafficTargetList = append(trafficTargetList, obj.(*access_smi_spec_io_v1alpha2.TrafficTarget))
	}
	return NewTrafficTargetSet(trafficTargetList...)
}

func (s *trafficTargetSet) Find(id ezkube.ResourceId) (*access_smi_spec_io_v1alpha2.TrafficTarget, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find TrafficTarget %v", sksets.Key(id))
	}
	obj, err := s.set.Find(&access_smi_spec_io_v1alpha2.TrafficTarget{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*access_smi_spec_io_v1alpha2.TrafficTarget), nil
}

func (s *trafficTargetSet) Length() int {
	if s == nil {
		return 0
	}
	return s.set.Length()
}

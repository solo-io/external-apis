// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	access_smi_spec_io_v1alpha2 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/access/v1alpha2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the TrafficTarget Resource
// DEPRECATED: Prefer reconciler pattern.
type TrafficTargetEventHandler interface {
	CreateTrafficTarget(obj *access_smi_spec_io_v1alpha2.TrafficTarget) error
	UpdateTrafficTarget(old, new *access_smi_spec_io_v1alpha2.TrafficTarget) error
	DeleteTrafficTarget(obj *access_smi_spec_io_v1alpha2.TrafficTarget) error
	GenericTrafficTarget(obj *access_smi_spec_io_v1alpha2.TrafficTarget) error
}

type TrafficTargetEventHandlerFuncs struct {
	OnCreate  func(obj *access_smi_spec_io_v1alpha2.TrafficTarget) error
	OnUpdate  func(old, new *access_smi_spec_io_v1alpha2.TrafficTarget) error
	OnDelete  func(obj *access_smi_spec_io_v1alpha2.TrafficTarget) error
	OnGeneric func(obj *access_smi_spec_io_v1alpha2.TrafficTarget) error
}

func (f *TrafficTargetEventHandlerFuncs) CreateTrafficTarget(obj *access_smi_spec_io_v1alpha2.TrafficTarget) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *TrafficTargetEventHandlerFuncs) DeleteTrafficTarget(obj *access_smi_spec_io_v1alpha2.TrafficTarget) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *TrafficTargetEventHandlerFuncs) UpdateTrafficTarget(objOld, objNew *access_smi_spec_io_v1alpha2.TrafficTarget) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *TrafficTargetEventHandlerFuncs) GenericTrafficTarget(obj *access_smi_spec_io_v1alpha2.TrafficTarget) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type TrafficTargetEventWatcher interface {
	AddEventHandler(ctx context.Context, h TrafficTargetEventHandler, predicates ...predicate.Predicate) error
}

type trafficTargetEventWatcher struct {
	watcher events.EventWatcher
}

func NewTrafficTargetEventWatcher(name string, mgr manager.Manager) TrafficTargetEventWatcher {
	return &trafficTargetEventWatcher{
		watcher: events.NewWatcher(name, mgr, &access_smi_spec_io_v1alpha2.TrafficTarget{}),
	}
}

func (c *trafficTargetEventWatcher) AddEventHandler(ctx context.Context, h TrafficTargetEventHandler, predicates ...predicate.Predicate) error {
	handler := genericTrafficTargetHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericTrafficTargetHandler implements a generic events.EventHandler
type genericTrafficTargetHandler struct {
	handler TrafficTargetEventHandler
}

func (h genericTrafficTargetHandler) Create(object client.Object) error {
	obj, ok := object.(*access_smi_spec_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", object)
	}
	return h.handler.CreateTrafficTarget(obj)
}

func (h genericTrafficTargetHandler) Delete(object client.Object) error {
	obj, ok := object.(*access_smi_spec_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", object)
	}
	return h.handler.DeleteTrafficTarget(obj)
}

func (h genericTrafficTargetHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*access_smi_spec_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", old)
	}
	objNew, ok := new.(*access_smi_spec_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", new)
	}
	return h.handler.UpdateTrafficTarget(objOld, objNew)
}

func (h genericTrafficTargetHandler) Generic(object client.Object) error {
	obj, ok := object.(*access_smi_spec_io_v1alpha2.TrafficTarget)
	if !ok {
		return errors.Errorf("internal error: TrafficTarget handler received event for %T", object)
	}
	return h.handler.GenericTrafficTarget(obj)
}

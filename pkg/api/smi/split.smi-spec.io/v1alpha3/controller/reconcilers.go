// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	split_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/split/v1alpha3"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the TrafficSplit Resource.
// implemented by the user
type TrafficSplitReconciler interface {
	ReconcileTrafficSplit(obj *split_smi_spec_io_v1alpha3.TrafficSplit) (reconcile.Result, error)
}

// Reconcile deletion events for the TrafficSplit Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type TrafficSplitDeletionReconciler interface {
	ReconcileTrafficSplitDeletion(req reconcile.Request) error
}

type TrafficSplitReconcilerFuncs struct {
	OnReconcileTrafficSplit         func(obj *split_smi_spec_io_v1alpha3.TrafficSplit) (reconcile.Result, error)
	OnReconcileTrafficSplitDeletion func(req reconcile.Request) error
}

func (f *TrafficSplitReconcilerFuncs) ReconcileTrafficSplit(obj *split_smi_spec_io_v1alpha3.TrafficSplit) (reconcile.Result, error) {
	if f.OnReconcileTrafficSplit == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileTrafficSplit(obj)
}

func (f *TrafficSplitReconcilerFuncs) ReconcileTrafficSplitDeletion(req reconcile.Request) error {
	if f.OnReconcileTrafficSplitDeletion == nil {
		return nil
	}
	return f.OnReconcileTrafficSplitDeletion(req)
}

// Reconcile and finalize the TrafficSplit Resource
// implemented by the user
type TrafficSplitFinalizer interface {
	TrafficSplitReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	TrafficSplitFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeTrafficSplit(obj *split_smi_spec_io_v1alpha3.TrafficSplit) error
}

type TrafficSplitReconcileLoop interface {
	RunTrafficSplitReconciler(ctx context.Context, rec TrafficSplitReconciler, predicates ...predicate.Predicate) error
}

type trafficSplitReconcileLoop struct {
	loop reconcile.Loop
}

func NewTrafficSplitReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) TrafficSplitReconcileLoop {
	return &trafficSplitReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &split_smi_spec_io_v1alpha3.TrafficSplit{}, options),
	}
}

func (c *trafficSplitReconcileLoop) RunTrafficSplitReconciler(ctx context.Context, reconciler TrafficSplitReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericTrafficSplitReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(TrafficSplitFinalizer); ok {
		reconcilerWrapper = genericTrafficSplitFinalizer{
			genericTrafficSplitReconciler: genericReconciler,
			finalizingReconciler:          finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericTrafficSplitHandler implements a generic reconcile.Reconciler
type genericTrafficSplitReconciler struct {
	reconciler TrafficSplitReconciler
}

func (r genericTrafficSplitReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*split_smi_spec_io_v1alpha3.TrafficSplit)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: TrafficSplit handler received event for %T", object)
	}
	return r.reconciler.ReconcileTrafficSplit(obj)
}

func (r genericTrafficSplitReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(TrafficSplitDeletionReconciler); ok {
		return deletionReconciler.ReconcileTrafficSplitDeletion(request)
	}
	return nil
}

// genericTrafficSplitFinalizer implements a generic reconcile.FinalizingReconciler
type genericTrafficSplitFinalizer struct {
	genericTrafficSplitReconciler
	finalizingReconciler TrafficSplitFinalizer
}

func (r genericTrafficSplitFinalizer) FinalizerName() string {
	return r.finalizingReconciler.TrafficSplitFinalizerName()
}

func (r genericTrafficSplitFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*split_smi_spec_io_v1alpha3.TrafficSplit)
	if !ok {
		return errors.Errorf("internal error: TrafficSplit handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeTrafficSplit(obj)
}

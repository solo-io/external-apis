// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/split/v1alpha3"
	controller "github.com/solo-io/external-apis/pkg/api/smi/split.smi-spec.io/v1alpha3/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterTrafficSplitReconciler is a mock of MulticlusterTrafficSplitReconciler interface
type MockMulticlusterTrafficSplitReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficSplitReconcilerMockRecorder
}

// MockMulticlusterTrafficSplitReconcilerMockRecorder is the mock recorder for MockMulticlusterTrafficSplitReconciler
type MockMulticlusterTrafficSplitReconcilerMockRecorder struct {
	mock *MockMulticlusterTrafficSplitReconciler
}

// NewMockMulticlusterTrafficSplitReconciler creates a new mock instance
func NewMockMulticlusterTrafficSplitReconciler(ctrl *gomock.Controller) *MockMulticlusterTrafficSplitReconciler {
	mock := &MockMulticlusterTrafficSplitReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficSplitReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterTrafficSplitReconciler) EXPECT() *MockMulticlusterTrafficSplitReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTrafficSplit mocks base method
func (m *MockMulticlusterTrafficSplitReconciler) ReconcileTrafficSplit(clusterName string, obj *v1alpha3.TrafficSplit) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTrafficSplit", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTrafficSplit indicates an expected call of ReconcileTrafficSplit
func (mr *MockMulticlusterTrafficSplitReconcilerMockRecorder) ReconcileTrafficSplit(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTrafficSplit", reflect.TypeOf((*MockMulticlusterTrafficSplitReconciler)(nil).ReconcileTrafficSplit), clusterName, obj)
}

// MockMulticlusterTrafficSplitDeletionReconciler is a mock of MulticlusterTrafficSplitDeletionReconciler interface
type MockMulticlusterTrafficSplitDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficSplitDeletionReconcilerMockRecorder
}

// MockMulticlusterTrafficSplitDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterTrafficSplitDeletionReconciler
type MockMulticlusterTrafficSplitDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterTrafficSplitDeletionReconciler
}

// NewMockMulticlusterTrafficSplitDeletionReconciler creates a new mock instance
func NewMockMulticlusterTrafficSplitDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterTrafficSplitDeletionReconciler {
	mock := &MockMulticlusterTrafficSplitDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficSplitDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterTrafficSplitDeletionReconciler) EXPECT() *MockMulticlusterTrafficSplitDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTrafficSplitDeletion mocks base method
func (m *MockMulticlusterTrafficSplitDeletionReconciler) ReconcileTrafficSplitDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTrafficSplitDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTrafficSplitDeletion indicates an expected call of ReconcileTrafficSplitDeletion
func (mr *MockMulticlusterTrafficSplitDeletionReconcilerMockRecorder) ReconcileTrafficSplitDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTrafficSplitDeletion", reflect.TypeOf((*MockMulticlusterTrafficSplitDeletionReconciler)(nil).ReconcileTrafficSplitDeletion), clusterName, req)
}

// MockMulticlusterTrafficSplitReconcileLoop is a mock of MulticlusterTrafficSplitReconcileLoop interface
type MockMulticlusterTrafficSplitReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTrafficSplitReconcileLoopMockRecorder
}

// MockMulticlusterTrafficSplitReconcileLoopMockRecorder is the mock recorder for MockMulticlusterTrafficSplitReconcileLoop
type MockMulticlusterTrafficSplitReconcileLoopMockRecorder struct {
	mock *MockMulticlusterTrafficSplitReconcileLoop
}

// NewMockMulticlusterTrafficSplitReconcileLoop creates a new mock instance
func NewMockMulticlusterTrafficSplitReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterTrafficSplitReconcileLoop {
	mock := &MockMulticlusterTrafficSplitReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTrafficSplitReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterTrafficSplitReconcileLoop) EXPECT() *MockMulticlusterTrafficSplitReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterTrafficSplitReconciler mocks base method
func (m *MockMulticlusterTrafficSplitReconcileLoop) AddMulticlusterTrafficSplitReconciler(ctx context.Context, rec controller.MulticlusterTrafficSplitReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterTrafficSplitReconciler", varargs...)
}

// AddMulticlusterTrafficSplitReconciler indicates an expected call of AddMulticlusterTrafficSplitReconciler
func (mr *MockMulticlusterTrafficSplitReconcileLoopMockRecorder) AddMulticlusterTrafficSplitReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterTrafficSplitReconciler", reflect.TypeOf((*MockMulticlusterTrafficSplitReconcileLoop)(nil).AddMulticlusterTrafficSplitReconciler), varargs...)
}

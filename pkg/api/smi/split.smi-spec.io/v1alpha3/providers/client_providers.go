// Code generated by skv2. DO NOT EDIT.

package v1alpha3

import (
	split_smi_spec_io_v1alpha3 "github.com/solo-io/external-apis/pkg/api/smi/split.smi-spec.io/v1alpha3"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for TrafficSplitClient from Clientset
func TrafficSplitClientFromClientsetProvider(clients split_smi_spec_io_v1alpha3.Clientset) split_smi_spec_io_v1alpha3.TrafficSplitClient {
	return clients.TrafficSplits()
}

// Provider for TrafficSplit Client from Client
func TrafficSplitClientProvider(client client.Client) split_smi_spec_io_v1alpha3.TrafficSplitClient {
	return split_smi_spec_io_v1alpha3.NewTrafficSplitClient(client)
}

type TrafficSplitClientFactory func(client client.Client) split_smi_spec_io_v1alpha3.TrafficSplitClient

func TrafficSplitClientFactoryProvider() TrafficSplitClientFactory {
	return TrafficSplitClientProvider
}

type TrafficSplitClientFromConfigFactory func(cfg *rest.Config) (split_smi_spec_io_v1alpha3.TrafficSplitClient, error)

func TrafficSplitClientFromConfigFactoryProvider() TrafficSplitClientFromConfigFactory {
	return func(cfg *rest.Config) (split_smi_spec_io_v1alpha3.TrafficSplitClient, error) {
		clients, err := split_smi_spec_io_v1alpha3.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.TrafficSplits(), nil
	}
}

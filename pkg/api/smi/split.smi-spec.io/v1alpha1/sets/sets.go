// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha1sets

import (
	split_smi_spec_io_v1alpha1 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/split/v1alpha1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type TrafficSplitSet interface {
	Keys() sets.String
	List() []*split_smi_spec_io_v1alpha1.TrafficSplit
	Map() map[string]*split_smi_spec_io_v1alpha1.TrafficSplit
	Insert(trafficSplit ...*split_smi_spec_io_v1alpha1.TrafficSplit)
	Equal(trafficSplitSet TrafficSplitSet) bool
	Has(trafficSplit *split_smi_spec_io_v1alpha1.TrafficSplit) bool
	Delete(trafficSplit *split_smi_spec_io_v1alpha1.TrafficSplit)
	Union(set TrafficSplitSet) TrafficSplitSet
	Difference(set TrafficSplitSet) TrafficSplitSet
	Intersection(set TrafficSplitSet) TrafficSplitSet
	Find(id ezkube.ResourceId) (*split_smi_spec_io_v1alpha1.TrafficSplit, error)
}

func makeGenericTrafficSplitSet(trafficSplitList []*split_smi_spec_io_v1alpha1.TrafficSplit) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range trafficSplitList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type trafficSplitSet struct {
	set sksets.ResourceSet
}

func NewTrafficSplitSet(trafficSplitList ...*split_smi_spec_io_v1alpha1.TrafficSplit) TrafficSplitSet {
	return &trafficSplitSet{set: makeGenericTrafficSplitSet(trafficSplitList)}
}

func (s trafficSplitSet) Keys() sets.String {
	return s.set.Keys()
}

func (s trafficSplitSet) List() []*split_smi_spec_io_v1alpha1.TrafficSplit {
	var trafficSplitList []*split_smi_spec_io_v1alpha1.TrafficSplit
	for _, obj := range s.set.List() {
		trafficSplitList = append(trafficSplitList, obj.(*split_smi_spec_io_v1alpha1.TrafficSplit))
	}
	return trafficSplitList
}

func (s trafficSplitSet) Map() map[string]*split_smi_spec_io_v1alpha1.TrafficSplit {
	newMap := map[string]*split_smi_spec_io_v1alpha1.TrafficSplit{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*split_smi_spec_io_v1alpha1.TrafficSplit)
	}
	return newMap
}

func (s trafficSplitSet) Insert(
	trafficSplitList ...*split_smi_spec_io_v1alpha1.TrafficSplit,
) {
	for _, obj := range trafficSplitList {
		s.set.Insert(obj)
	}
}

func (s trafficSplitSet) Has(trafficSplit *split_smi_spec_io_v1alpha1.TrafficSplit) bool {
	return s.set.Has(trafficSplit)
}

func (s trafficSplitSet) Equal(
	trafficSplitSet TrafficSplitSet,
) bool {
	return s.set.Equal(makeGenericTrafficSplitSet(trafficSplitSet.List()))
}

func (s trafficSplitSet) Delete(TrafficSplit *split_smi_spec_io_v1alpha1.TrafficSplit) {
	s.set.Delete(TrafficSplit)
}

func (s trafficSplitSet) Union(set TrafficSplitSet) TrafficSplitSet {
	return NewTrafficSplitSet(append(s.List(), set.List()...)...)
}

func (s trafficSplitSet) Difference(set TrafficSplitSet) TrafficSplitSet {
	newSet := s.set.Difference(makeGenericTrafficSplitSet(set.List()))
	return trafficSplitSet{set: newSet}
}

func (s trafficSplitSet) Intersection(set TrafficSplitSet) TrafficSplitSet {
	newSet := s.set.Intersection(makeGenericTrafficSplitSet(set.List()))
	var trafficSplitList []*split_smi_spec_io_v1alpha1.TrafficSplit
	for _, obj := range newSet.List() {
		trafficSplitList = append(trafficSplitList, obj.(*split_smi_spec_io_v1alpha1.TrafficSplit))
	}
	return NewTrafficSplitSet(trafficSplitList...)
}

func (s trafficSplitSet) Find(id ezkube.ResourceId) (*split_smi_spec_io_v1alpha1.TrafficSplit, error) {
	obj, err := s.set.Find(&split_smi_spec_io_v1alpha1.TrafficSplit{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*split_smi_spec_io_v1alpha1.TrafficSplit), nil
}

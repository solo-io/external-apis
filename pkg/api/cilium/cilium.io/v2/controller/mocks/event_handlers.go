// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	v2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/cilium/cilium.io/v2/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockCiliumNetworkPolicyEventHandler is a mock of CiliumNetworkPolicyEventHandler interface.
type MockCiliumNetworkPolicyEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCiliumNetworkPolicyEventHandlerMockRecorder
}

// MockCiliumNetworkPolicyEventHandlerMockRecorder is the mock recorder for MockCiliumNetworkPolicyEventHandler.
type MockCiliumNetworkPolicyEventHandlerMockRecorder struct {
	mock *MockCiliumNetworkPolicyEventHandler
}

// NewMockCiliumNetworkPolicyEventHandler creates a new mock instance.
func NewMockCiliumNetworkPolicyEventHandler(ctrl *gomock.Controller) *MockCiliumNetworkPolicyEventHandler {
	mock := &MockCiliumNetworkPolicyEventHandler{ctrl: ctrl}
	mock.recorder = &MockCiliumNetworkPolicyEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCiliumNetworkPolicyEventHandler) EXPECT() *MockCiliumNetworkPolicyEventHandlerMockRecorder {
	return m.recorder
}

// CreateCiliumNetworkPolicy mocks base method.
func (m *MockCiliumNetworkPolicyEventHandler) CreateCiliumNetworkPolicy(obj *v2.CiliumNetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCiliumNetworkPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCiliumNetworkPolicy indicates an expected call of CreateCiliumNetworkPolicy.
func (mr *MockCiliumNetworkPolicyEventHandlerMockRecorder) CreateCiliumNetworkPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCiliumNetworkPolicy", reflect.TypeOf((*MockCiliumNetworkPolicyEventHandler)(nil).CreateCiliumNetworkPolicy), obj)
}

// DeleteCiliumNetworkPolicy mocks base method.
func (m *MockCiliumNetworkPolicyEventHandler) DeleteCiliumNetworkPolicy(obj *v2.CiliumNetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCiliumNetworkPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCiliumNetworkPolicy indicates an expected call of DeleteCiliumNetworkPolicy.
func (mr *MockCiliumNetworkPolicyEventHandlerMockRecorder) DeleteCiliumNetworkPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCiliumNetworkPolicy", reflect.TypeOf((*MockCiliumNetworkPolicyEventHandler)(nil).DeleteCiliumNetworkPolicy), obj)
}

// GenericCiliumNetworkPolicy mocks base method.
func (m *MockCiliumNetworkPolicyEventHandler) GenericCiliumNetworkPolicy(obj *v2.CiliumNetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericCiliumNetworkPolicy", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericCiliumNetworkPolicy indicates an expected call of GenericCiliumNetworkPolicy.
func (mr *MockCiliumNetworkPolicyEventHandlerMockRecorder) GenericCiliumNetworkPolicy(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericCiliumNetworkPolicy", reflect.TypeOf((*MockCiliumNetworkPolicyEventHandler)(nil).GenericCiliumNetworkPolicy), obj)
}

// UpdateCiliumNetworkPolicy mocks base method.
func (m *MockCiliumNetworkPolicyEventHandler) UpdateCiliumNetworkPolicy(old, new *v2.CiliumNetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCiliumNetworkPolicy", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCiliumNetworkPolicy indicates an expected call of UpdateCiliumNetworkPolicy.
func (mr *MockCiliumNetworkPolicyEventHandlerMockRecorder) UpdateCiliumNetworkPolicy(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCiliumNetworkPolicy", reflect.TypeOf((*MockCiliumNetworkPolicyEventHandler)(nil).UpdateCiliumNetworkPolicy), old, new)
}

// MockCiliumNetworkPolicyEventWatcher is a mock of CiliumNetworkPolicyEventWatcher interface.
type MockCiliumNetworkPolicyEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockCiliumNetworkPolicyEventWatcherMockRecorder
}

// MockCiliumNetworkPolicyEventWatcherMockRecorder is the mock recorder for MockCiliumNetworkPolicyEventWatcher.
type MockCiliumNetworkPolicyEventWatcherMockRecorder struct {
	mock *MockCiliumNetworkPolicyEventWatcher
}

// NewMockCiliumNetworkPolicyEventWatcher creates a new mock instance.
func NewMockCiliumNetworkPolicyEventWatcher(ctrl *gomock.Controller) *MockCiliumNetworkPolicyEventWatcher {
	mock := &MockCiliumNetworkPolicyEventWatcher{ctrl: ctrl}
	mock.recorder = &MockCiliumNetworkPolicyEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCiliumNetworkPolicyEventWatcher) EXPECT() *MockCiliumNetworkPolicyEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockCiliumNetworkPolicyEventWatcher) AddEventHandler(ctx context.Context, h controller.CiliumNetworkPolicyEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockCiliumNetworkPolicyEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockCiliumNetworkPolicyEventWatcher)(nil).AddEventHandler), varargs...)
}

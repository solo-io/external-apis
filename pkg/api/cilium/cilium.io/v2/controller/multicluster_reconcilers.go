// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	cilium_io_v2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the CiliumNetworkPolicy Resource across clusters.
// implemented by the user
type MulticlusterCiliumNetworkPolicyReconciler interface {
	ReconcileCiliumNetworkPolicy(clusterName string, obj *cilium_io_v2.CiliumNetworkPolicy) (reconcile.Result, error)
}

// Reconcile deletion events for the CiliumNetworkPolicy Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterCiliumNetworkPolicyDeletionReconciler interface {
	ReconcileCiliumNetworkPolicyDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterCiliumNetworkPolicyReconcilerFuncs struct {
	OnReconcileCiliumNetworkPolicy         func(clusterName string, obj *cilium_io_v2.CiliumNetworkPolicy) (reconcile.Result, error)
	OnReconcileCiliumNetworkPolicyDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterCiliumNetworkPolicyReconcilerFuncs) ReconcileCiliumNetworkPolicy(clusterName string, obj *cilium_io_v2.CiliumNetworkPolicy) (reconcile.Result, error) {
	if f.OnReconcileCiliumNetworkPolicy == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileCiliumNetworkPolicy(clusterName, obj)
}

func (f *MulticlusterCiliumNetworkPolicyReconcilerFuncs) ReconcileCiliumNetworkPolicyDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileCiliumNetworkPolicyDeletion == nil {
		return nil
	}
	return f.OnReconcileCiliumNetworkPolicyDeletion(clusterName, req)
}

type MulticlusterCiliumNetworkPolicyReconcileLoop interface {
	// AddMulticlusterCiliumNetworkPolicyReconciler adds a MulticlusterCiliumNetworkPolicyReconciler to the MulticlusterCiliumNetworkPolicyReconcileLoop.
	AddMulticlusterCiliumNetworkPolicyReconciler(ctx context.Context, rec MulticlusterCiliumNetworkPolicyReconciler, predicates ...predicate.Predicate)
}

type multiclusterCiliumNetworkPolicyReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterCiliumNetworkPolicyReconcileLoop) AddMulticlusterCiliumNetworkPolicyReconciler(ctx context.Context, rec MulticlusterCiliumNetworkPolicyReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericCiliumNetworkPolicyMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterCiliumNetworkPolicyReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterCiliumNetworkPolicyReconcileLoop {
	return &multiclusterCiliumNetworkPolicyReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &cilium_io_v2.CiliumNetworkPolicy{}, options)}
}

type genericCiliumNetworkPolicyMulticlusterReconciler struct {
	reconciler MulticlusterCiliumNetworkPolicyReconciler
}

func (g genericCiliumNetworkPolicyMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterCiliumNetworkPolicyDeletionReconciler); ok {
		return deletionReconciler.ReconcileCiliumNetworkPolicyDeletion(cluster, req)
	}
	return nil
}

func (g genericCiliumNetworkPolicyMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*cilium_io_v2.CiliumNetworkPolicy)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: CiliumNetworkPolicy handler received event for %T", object)
	}
	return g.reconciler.ReconcileCiliumNetworkPolicy(cluster, obj)
}

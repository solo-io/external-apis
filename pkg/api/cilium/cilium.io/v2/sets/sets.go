// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v2sets

import (
	cilium_io_v2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type CiliumNetworkPolicySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*cilium_io_v2.CiliumNetworkPolicy) bool) []*cilium_io_v2.CiliumNetworkPolicy
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*cilium_io_v2.CiliumNetworkPolicy) bool) []*cilium_io_v2.CiliumNetworkPolicy
	// Return the Set as a map of key to resource.
	Map() map[string]*cilium_io_v2.CiliumNetworkPolicy
	// Insert a resource into the set.
	Insert(ciliumNetworkPolicy ...*cilium_io_v2.CiliumNetworkPolicy)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(ciliumNetworkPolicySet CiliumNetworkPolicySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(ciliumNetworkPolicy ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(ciliumNetworkPolicy ezkube.ResourceId)
	// Return the union with the provided set
	Union(set CiliumNetworkPolicySet) CiliumNetworkPolicySet
	// Return the difference with the provided set
	Difference(set CiliumNetworkPolicySet) CiliumNetworkPolicySet
	// Return the intersection with the provided set
	Intersection(set CiliumNetworkPolicySet) CiliumNetworkPolicySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*cilium_io_v2.CiliumNetworkPolicy, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another CiliumNetworkPolicySet
	Delta(newSet CiliumNetworkPolicySet) sksets.ResourceDelta
	// Create a deep copy of the current CiliumNetworkPolicySet
	Clone() CiliumNetworkPolicySet
}

func makeGenericCiliumNetworkPolicySet(ciliumNetworkPolicyList []*cilium_io_v2.CiliumNetworkPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range ciliumNetworkPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type ciliumNetworkPolicySet struct {
	set sksets.ResourceSet
}

func NewCiliumNetworkPolicySet(ciliumNetworkPolicyList ...*cilium_io_v2.CiliumNetworkPolicy) CiliumNetworkPolicySet {
	return &ciliumNetworkPolicySet{set: makeGenericCiliumNetworkPolicySet(ciliumNetworkPolicyList)}
}

func NewCiliumNetworkPolicySetFromList(ciliumNetworkPolicyList *cilium_io_v2.CiliumNetworkPolicyList) CiliumNetworkPolicySet {
	list := make([]*cilium_io_v2.CiliumNetworkPolicy, 0, len(ciliumNetworkPolicyList.Items))
	for idx := range ciliumNetworkPolicyList.Items {
		list = append(list, &ciliumNetworkPolicyList.Items[idx])
	}
	return &ciliumNetworkPolicySet{set: makeGenericCiliumNetworkPolicySet(list)}
}

func (s *ciliumNetworkPolicySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *ciliumNetworkPolicySet) List(filterResource ...func(*cilium_io_v2.CiliumNetworkPolicy) bool) []*cilium_io_v2.CiliumNetworkPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*cilium_io_v2.CiliumNetworkPolicy))
		})
	}

	objs := s.Generic().List(genericFilters...)
	ciliumNetworkPolicyList := make([]*cilium_io_v2.CiliumNetworkPolicy, 0, len(objs))
	for _, obj := range objs {
		ciliumNetworkPolicyList = append(ciliumNetworkPolicyList, obj.(*cilium_io_v2.CiliumNetworkPolicy))
	}
	return ciliumNetworkPolicyList
}

func (s *ciliumNetworkPolicySet) UnsortedList(filterResource ...func(*cilium_io_v2.CiliumNetworkPolicy) bool) []*cilium_io_v2.CiliumNetworkPolicy {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*cilium_io_v2.CiliumNetworkPolicy))
		})
	}

	var ciliumNetworkPolicyList []*cilium_io_v2.CiliumNetworkPolicy
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		ciliumNetworkPolicyList = append(ciliumNetworkPolicyList, obj.(*cilium_io_v2.CiliumNetworkPolicy))
	}
	return ciliumNetworkPolicyList
}

func (s *ciliumNetworkPolicySet) Map() map[string]*cilium_io_v2.CiliumNetworkPolicy {
	if s == nil {
		return nil
	}

	newMap := map[string]*cilium_io_v2.CiliumNetworkPolicy{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*cilium_io_v2.CiliumNetworkPolicy)
	}
	return newMap
}

func (s *ciliumNetworkPolicySet) Insert(
	ciliumNetworkPolicyList ...*cilium_io_v2.CiliumNetworkPolicy,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range ciliumNetworkPolicyList {
		s.Generic().Insert(obj)
	}
}

func (s *ciliumNetworkPolicySet) Has(ciliumNetworkPolicy ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(ciliumNetworkPolicy)
}

func (s *ciliumNetworkPolicySet) Equal(
	ciliumNetworkPolicySet CiliumNetworkPolicySet,
) bool {
	if s == nil {
		return ciliumNetworkPolicySet == nil
	}
	return s.Generic().Equal(ciliumNetworkPolicySet.Generic())
}

func (s *ciliumNetworkPolicySet) Delete(CiliumNetworkPolicy ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(CiliumNetworkPolicy)
}

func (s *ciliumNetworkPolicySet) Union(set CiliumNetworkPolicySet) CiliumNetworkPolicySet {
	if s == nil {
		return set
	}
	return NewCiliumNetworkPolicySet(append(s.List(), set.List()...)...)
}

func (s *ciliumNetworkPolicySet) Difference(set CiliumNetworkPolicySet) CiliumNetworkPolicySet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &ciliumNetworkPolicySet{set: newSet}
}

func (s *ciliumNetworkPolicySet) Intersection(set CiliumNetworkPolicySet) CiliumNetworkPolicySet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var ciliumNetworkPolicyList []*cilium_io_v2.CiliumNetworkPolicy
	for _, obj := range newSet.List() {
		ciliumNetworkPolicyList = append(ciliumNetworkPolicyList, obj.(*cilium_io_v2.CiliumNetworkPolicy))
	}
	return NewCiliumNetworkPolicySet(ciliumNetworkPolicyList...)
}

func (s *ciliumNetworkPolicySet) Find(id ezkube.ResourceId) (*cilium_io_v2.CiliumNetworkPolicy, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find CiliumNetworkPolicy %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&cilium_io_v2.CiliumNetworkPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*cilium_io_v2.CiliumNetworkPolicy), nil
}

func (s *ciliumNetworkPolicySet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *ciliumNetworkPolicySet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *ciliumNetworkPolicySet) Delta(newSet CiliumNetworkPolicySet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *ciliumNetworkPolicySet) Clone() CiliumNetworkPolicySet {
	if s == nil {
		return nil
	}
	return &ciliumNetworkPolicySet{set: sksets.NewResourceSet(s.Generic().Clone().List()...)}
}

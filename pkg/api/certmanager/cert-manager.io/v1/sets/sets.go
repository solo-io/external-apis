// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1sets

import (
	cert_manager_io_v1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type CertificateRequestSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*cert_manager_io_v1.CertificateRequest) bool) []*cert_manager_io_v1.CertificateRequest
	// Return the Set as a map of key to resource.
	Map() map[string]*cert_manager_io_v1.CertificateRequest
	// Insert a resource into the set.
	Insert(certificateRequest ...*cert_manager_io_v1.CertificateRequest)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(certificateRequestSet CertificateRequestSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(certificateRequest ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(certificateRequest ezkube.ResourceId)
	// Return the union with the provided set
	Union(set CertificateRequestSet) CertificateRequestSet
	// Return the difference with the provided set
	Difference(set CertificateRequestSet) CertificateRequestSet
	// Return the intersection with the provided set
	Intersection(set CertificateRequestSet) CertificateRequestSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*cert_manager_io_v1.CertificateRequest, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another CertificateRequestSet
	Delta(newSet CertificateRequestSet) sksets.ResourceDelta
}

func makeGenericCertificateRequestSet(certificateRequestList []*cert_manager_io_v1.CertificateRequest) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range certificateRequestList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type certificateRequestSet struct {
	set sksets.ResourceSet
}

func NewCertificateRequestSet(certificateRequestList ...*cert_manager_io_v1.CertificateRequest) CertificateRequestSet {
	return &certificateRequestSet{set: makeGenericCertificateRequestSet(certificateRequestList)}
}

func NewCertificateRequestSetFromList(certificateRequestList *cert_manager_io_v1.CertificateRequestList) CertificateRequestSet {
	list := make([]*cert_manager_io_v1.CertificateRequest, 0, len(certificateRequestList.Items))
	for idx := range certificateRequestList.Items {
		list = append(list, &certificateRequestList.Items[idx])
	}
	return &certificateRequestSet{set: makeGenericCertificateRequestSet(list)}
}

func (s *certificateRequestSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *certificateRequestSet) List(filterResource ...func(*cert_manager_io_v1.CertificateRequest) bool) []*cert_manager_io_v1.CertificateRequest {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*cert_manager_io_v1.CertificateRequest))
		})
	}

	var certificateRequestList []*cert_manager_io_v1.CertificateRequest
	for _, obj := range s.Generic().List(genericFilters...) {
		certificateRequestList = append(certificateRequestList, obj.(*cert_manager_io_v1.CertificateRequest))
	}
	return certificateRequestList
}

func (s *certificateRequestSet) Map() map[string]*cert_manager_io_v1.CertificateRequest {
	if s == nil {
		return nil
	}

	newMap := map[string]*cert_manager_io_v1.CertificateRequest{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*cert_manager_io_v1.CertificateRequest)
	}
	return newMap
}

func (s *certificateRequestSet) Insert(
	certificateRequestList ...*cert_manager_io_v1.CertificateRequest,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range certificateRequestList {
		s.Generic().Insert(obj)
	}
}

func (s *certificateRequestSet) Has(certificateRequest ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(certificateRequest)
}

func (s *certificateRequestSet) Equal(
	certificateRequestSet CertificateRequestSet,
) bool {
	if s == nil {
		return certificateRequestSet == nil
	}
	return s.Generic().Equal(certificateRequestSet.Generic())
}

func (s *certificateRequestSet) Delete(CertificateRequest ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(CertificateRequest)
}

func (s *certificateRequestSet) Union(set CertificateRequestSet) CertificateRequestSet {
	if s == nil {
		return set
	}
	return NewCertificateRequestSet(append(s.List(), set.List()...)...)
}

func (s *certificateRequestSet) Difference(set CertificateRequestSet) CertificateRequestSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &certificateRequestSet{set: newSet}
}

func (s *certificateRequestSet) Intersection(set CertificateRequestSet) CertificateRequestSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var certificateRequestList []*cert_manager_io_v1.CertificateRequest
	for _, obj := range newSet.List() {
		certificateRequestList = append(certificateRequestList, obj.(*cert_manager_io_v1.CertificateRequest))
	}
	return NewCertificateRequestSet(certificateRequestList...)
}

func (s *certificateRequestSet) Find(id ezkube.ResourceId) (*cert_manager_io_v1.CertificateRequest, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find CertificateRequest %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&cert_manager_io_v1.CertificateRequest{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*cert_manager_io_v1.CertificateRequest), nil
}

func (s *certificateRequestSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *certificateRequestSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *certificateRequestSet) Delta(newSet CertificateRequestSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

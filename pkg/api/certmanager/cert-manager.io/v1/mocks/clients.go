// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1"
	v10 "github.com/solo-io/external-apis/pkg/api/certmanager/cert-manager.io/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterClientset) Cluster(cluster string) (v10.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v10.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// CertificateRequests mocks base method
func (m *MockClientset) CertificateRequests() v10.CertificateRequestClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateRequests")
	ret0, _ := ret[0].(v10.CertificateRequestClient)
	return ret0
}

// CertificateRequests indicates an expected call of CertificateRequests
func (mr *MockClientsetMockRecorder) CertificateRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateRequests", reflect.TypeOf((*MockClientset)(nil).CertificateRequests))
}

// MockCertificateRequestReader is a mock of CertificateRequestReader interface
type MockCertificateRequestReader struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestReaderMockRecorder
}

// MockCertificateRequestReaderMockRecorder is the mock recorder for MockCertificateRequestReader
type MockCertificateRequestReaderMockRecorder struct {
	mock *MockCertificateRequestReader
}

// NewMockCertificateRequestReader creates a new mock instance
func NewMockCertificateRequestReader(ctrl *gomock.Controller) *MockCertificateRequestReader {
	mock := &MockCertificateRequestReader{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestReader) EXPECT() *MockCertificateRequestReaderMockRecorder {
	return m.recorder
}

// GetCertificateRequest mocks base method
func (m *MockCertificateRequestReader) GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*v1.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateRequest", ctx, key)
	ret0, _ := ret[0].(*v1.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateRequest indicates an expected call of GetCertificateRequest
func (mr *MockCertificateRequestReaderMockRecorder) GetCertificateRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateRequest", reflect.TypeOf((*MockCertificateRequestReader)(nil).GetCertificateRequest), ctx, key)
}

// ListCertificateRequest mocks base method
func (m *MockCertificateRequestReader) ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*v1.CertificateRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificateRequest", varargs...)
	ret0, _ := ret[0].(*v1.CertificateRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateRequest indicates an expected call of ListCertificateRequest
func (mr *MockCertificateRequestReaderMockRecorder) ListCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateRequest", reflect.TypeOf((*MockCertificateRequestReader)(nil).ListCertificateRequest), varargs...)
}

// MockCertificateRequestWriter is a mock of CertificateRequestWriter interface
type MockCertificateRequestWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestWriterMockRecorder
}

// MockCertificateRequestWriterMockRecorder is the mock recorder for MockCertificateRequestWriter
type MockCertificateRequestWriterMockRecorder struct {
	mock *MockCertificateRequestWriter
}

// NewMockCertificateRequestWriter creates a new mock instance
func NewMockCertificateRequestWriter(ctrl *gomock.Controller) *MockCertificateRequestWriter {
	mock := &MockCertificateRequestWriter{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestWriter) EXPECT() *MockCertificateRequestWriterMockRecorder {
	return m.recorder
}

// CreateCertificateRequest mocks base method
func (m *MockCertificateRequestWriter) CreateCertificateRequest(ctx context.Context, obj *v1.CertificateRequest, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificateRequest indicates an expected call of CreateCertificateRequest
func (mr *MockCertificateRequestWriterMockRecorder) CreateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).CreateCertificateRequest), varargs...)
}

// DeleteCertificateRequest mocks base method
func (m *MockCertificateRequestWriter) DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest
func (mr *MockCertificateRequestWriterMockRecorder) DeleteCertificateRequest(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).DeleteCertificateRequest), varargs...)
}

// UpdateCertificateRequest mocks base method
func (m *MockCertificateRequestWriter) UpdateCertificateRequest(ctx context.Context, obj *v1.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequest indicates an expected call of UpdateCertificateRequest
func (mr *MockCertificateRequestWriterMockRecorder) UpdateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).UpdateCertificateRequest), varargs...)
}

// PatchCertificateRequest mocks base method
func (m *MockCertificateRequestWriter) PatchCertificateRequest(ctx context.Context, obj *v1.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequest indicates an expected call of PatchCertificateRequest
func (mr *MockCertificateRequestWriterMockRecorder) PatchCertificateRequest(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).PatchCertificateRequest), varargs...)
}

// DeleteAllOfCertificateRequest mocks base method
func (m *MockCertificateRequestWriter) DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCertificateRequest indicates an expected call of DeleteAllOfCertificateRequest
func (mr *MockCertificateRequestWriterMockRecorder) DeleteAllOfCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).DeleteAllOfCertificateRequest), varargs...)
}

// UpsertCertificateRequest mocks base method
func (m *MockCertificateRequestWriter) UpsertCertificateRequest(ctx context.Context, obj *v1.CertificateRequest, transitionFuncs ...v10.CertificateRequestTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCertificateRequest indicates an expected call of UpsertCertificateRequest
func (mr *MockCertificateRequestWriterMockRecorder) UpsertCertificateRequest(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCertificateRequest", reflect.TypeOf((*MockCertificateRequestWriter)(nil).UpsertCertificateRequest), varargs...)
}

// MockCertificateRequestStatusWriter is a mock of CertificateRequestStatusWriter interface
type MockCertificateRequestStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestStatusWriterMockRecorder
}

// MockCertificateRequestStatusWriterMockRecorder is the mock recorder for MockCertificateRequestStatusWriter
type MockCertificateRequestStatusWriterMockRecorder struct {
	mock *MockCertificateRequestStatusWriter
}

// NewMockCertificateRequestStatusWriter creates a new mock instance
func NewMockCertificateRequestStatusWriter(ctrl *gomock.Controller) *MockCertificateRequestStatusWriter {
	mock := &MockCertificateRequestStatusWriter{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestStatusWriter) EXPECT() *MockCertificateRequestStatusWriterMockRecorder {
	return m.recorder
}

// UpdateCertificateRequestStatus mocks base method
func (m *MockCertificateRequestStatusWriter) UpdateCertificateRequestStatus(ctx context.Context, obj *v1.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequestStatus indicates an expected call of UpdateCertificateRequestStatus
func (mr *MockCertificateRequestStatusWriterMockRecorder) UpdateCertificateRequestStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestStatusWriter)(nil).UpdateCertificateRequestStatus), varargs...)
}

// PatchCertificateRequestStatus mocks base method
func (m *MockCertificateRequestStatusWriter) PatchCertificateRequestStatus(ctx context.Context, obj *v1.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequestStatus indicates an expected call of PatchCertificateRequestStatus
func (mr *MockCertificateRequestStatusWriterMockRecorder) PatchCertificateRequestStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestStatusWriter)(nil).PatchCertificateRequestStatus), varargs...)
}

// MockCertificateRequestClient is a mock of CertificateRequestClient interface
type MockCertificateRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestClientMockRecorder
}

// MockCertificateRequestClientMockRecorder is the mock recorder for MockCertificateRequestClient
type MockCertificateRequestClientMockRecorder struct {
	mock *MockCertificateRequestClient
}

// NewMockCertificateRequestClient creates a new mock instance
func NewMockCertificateRequestClient(ctrl *gomock.Controller) *MockCertificateRequestClient {
	mock := &MockCertificateRequestClient{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestClient) EXPECT() *MockCertificateRequestClientMockRecorder {
	return m.recorder
}

// GetCertificateRequest mocks base method
func (m *MockCertificateRequestClient) GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*v1.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateRequest", ctx, key)
	ret0, _ := ret[0].(*v1.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateRequest indicates an expected call of GetCertificateRequest
func (mr *MockCertificateRequestClientMockRecorder) GetCertificateRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).GetCertificateRequest), ctx, key)
}

// ListCertificateRequest mocks base method
func (m *MockCertificateRequestClient) ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*v1.CertificateRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificateRequest", varargs...)
	ret0, _ := ret[0].(*v1.CertificateRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateRequest indicates an expected call of ListCertificateRequest
func (mr *MockCertificateRequestClientMockRecorder) ListCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).ListCertificateRequest), varargs...)
}

// CreateCertificateRequest mocks base method
func (m *MockCertificateRequestClient) CreateCertificateRequest(ctx context.Context, obj *v1.CertificateRequest, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificateRequest indicates an expected call of CreateCertificateRequest
func (mr *MockCertificateRequestClientMockRecorder) CreateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).CreateCertificateRequest), varargs...)
}

// DeleteCertificateRequest mocks base method
func (m *MockCertificateRequestClient) DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest
func (mr *MockCertificateRequestClientMockRecorder) DeleteCertificateRequest(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).DeleteCertificateRequest), varargs...)
}

// UpdateCertificateRequest mocks base method
func (m *MockCertificateRequestClient) UpdateCertificateRequest(ctx context.Context, obj *v1.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequest indicates an expected call of UpdateCertificateRequest
func (mr *MockCertificateRequestClientMockRecorder) UpdateCertificateRequest(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).UpdateCertificateRequest), varargs...)
}

// PatchCertificateRequest mocks base method
func (m *MockCertificateRequestClient) PatchCertificateRequest(ctx context.Context, obj *v1.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequest indicates an expected call of PatchCertificateRequest
func (mr *MockCertificateRequestClientMockRecorder) PatchCertificateRequest(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).PatchCertificateRequest), varargs...)
}

// DeleteAllOfCertificateRequest mocks base method
func (m *MockCertificateRequestClient) DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfCertificateRequest indicates an expected call of DeleteAllOfCertificateRequest
func (mr *MockCertificateRequestClientMockRecorder) DeleteAllOfCertificateRequest(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).DeleteAllOfCertificateRequest), varargs...)
}

// UpsertCertificateRequest mocks base method
func (m *MockCertificateRequestClient) UpsertCertificateRequest(ctx context.Context, obj *v1.CertificateRequest, transitionFuncs ...v10.CertificateRequestTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertCertificateRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCertificateRequest indicates an expected call of UpsertCertificateRequest
func (mr *MockCertificateRequestClientMockRecorder) UpsertCertificateRequest(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCertificateRequest", reflect.TypeOf((*MockCertificateRequestClient)(nil).UpsertCertificateRequest), varargs...)
}

// UpdateCertificateRequestStatus mocks base method
func (m *MockCertificateRequestClient) UpdateCertificateRequestStatus(ctx context.Context, obj *v1.CertificateRequest, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequestStatus indicates an expected call of UpdateCertificateRequestStatus
func (mr *MockCertificateRequestClientMockRecorder) UpdateCertificateRequestStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestClient)(nil).UpdateCertificateRequestStatus), varargs...)
}

// PatchCertificateRequestStatus mocks base method
func (m *MockCertificateRequestClient) PatchCertificateRequestStatus(ctx context.Context, obj *v1.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchCertificateRequestStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchCertificateRequestStatus indicates an expected call of PatchCertificateRequestStatus
func (mr *MockCertificateRequestClientMockRecorder) PatchCertificateRequestStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateRequestStatus", reflect.TypeOf((*MockCertificateRequestClient)(nil).PatchCertificateRequestStatus), varargs...)
}

// MockMulticlusterCertificateRequestClient is a mock of MulticlusterCertificateRequestClient interface
type MockMulticlusterCertificateRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCertificateRequestClientMockRecorder
}

// MockMulticlusterCertificateRequestClientMockRecorder is the mock recorder for MockMulticlusterCertificateRequestClient
type MockMulticlusterCertificateRequestClientMockRecorder struct {
	mock *MockMulticlusterCertificateRequestClient
}

// NewMockMulticlusterCertificateRequestClient creates a new mock instance
func NewMockMulticlusterCertificateRequestClient(ctrl *gomock.Controller) *MockMulticlusterCertificateRequestClient {
	mock := &MockMulticlusterCertificateRequestClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCertificateRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterCertificateRequestClient) EXPECT() *MockMulticlusterCertificateRequestClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockMulticlusterCertificateRequestClient) Cluster(cluster string) (v10.CertificateRequestClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v10.CertificateRequestClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster
func (mr *MockMulticlusterCertificateRequestClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterCertificateRequestClient)(nil).Cluster), cluster)
}

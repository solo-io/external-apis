// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1

import (
	"context"

	cert_manager_io_v1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1"
	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the cert-manager.io/v1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the cert-manager.io/v1 APIs
type Clientset interface {
	// clienset for the cert-manager.io/v1/v1 APIs
	CertificateRequests() CertificateRequestClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := cert_manager_io_v1.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the cert-manager.io/v1/v1 APIs
func (c *clientSet) CertificateRequests() CertificateRequestClient {
	return NewCertificateRequestClient(c.client)
}

// Reader knows how to read and list CertificateRequests.
type CertificateRequestReader interface {
	// Get retrieves a CertificateRequest for the given object key
	GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*cert_manager_io_v1.CertificateRequest, error)

	// List retrieves list of CertificateRequests for a given namespace and list options.
	ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*cert_manager_io_v1.CertificateRequestList, error)
}

// CertificateRequestTransitionFunction instructs the CertificateRequestWriter how to transition between an existing
// CertificateRequest object and a desired on an Upsert
type CertificateRequestTransitionFunction func(existing, desired *cert_manager_io_v1.CertificateRequest) error

// Writer knows how to create, delete, and update CertificateRequests.
type CertificateRequestWriter interface {
	// Create saves the CertificateRequest object.
	CreateCertificateRequest(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, opts ...client.CreateOption) error

	// Delete deletes the CertificateRequest object.
	DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given CertificateRequest object.
	UpdateCertificateRequest(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, opts ...client.UpdateOption) error

	// Patch patches the given CertificateRequest object.
	PatchCertificateRequest(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all CertificateRequest objects matching the given options.
	DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the CertificateRequest object.
	UpsertCertificateRequest(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, transitionFuncs ...CertificateRequestTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a CertificateRequest object.
type CertificateRequestStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given CertificateRequest object.
	UpdateCertificateRequestStatus(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, opts ...client.UpdateOption) error

	// Patch patches the given CertificateRequest object's subresource.
	PatchCertificateRequestStatus(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error
}

// Client knows how to perform CRUD operations on CertificateRequests.
type CertificateRequestClient interface {
	CertificateRequestReader
	CertificateRequestWriter
	CertificateRequestStatusWriter
}

type certificateRequestClient struct {
	client client.Client
}

func NewCertificateRequestClient(client client.Client) *certificateRequestClient {
	return &certificateRequestClient{client: client}
}

func (c *certificateRequestClient) GetCertificateRequest(ctx context.Context, key client.ObjectKey) (*cert_manager_io_v1.CertificateRequest, error) {
	obj := &cert_manager_io_v1.CertificateRequest{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *certificateRequestClient) ListCertificateRequest(ctx context.Context, opts ...client.ListOption) (*cert_manager_io_v1.CertificateRequestList, error) {
	list := &cert_manager_io_v1.CertificateRequestList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *certificateRequestClient) CreateCertificateRequest(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *certificateRequestClient) DeleteCertificateRequest(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &cert_manager_io_v1.CertificateRequest{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *certificateRequestClient) UpdateCertificateRequest(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *certificateRequestClient) PatchCertificateRequest(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *certificateRequestClient) DeleteAllOfCertificateRequest(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &cert_manager_io_v1.CertificateRequest{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *certificateRequestClient) UpsertCertificateRequest(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, transitionFuncs ...CertificateRequestTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*cert_manager_io_v1.CertificateRequest), desired.(*cert_manager_io_v1.CertificateRequest)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *certificateRequestClient) UpdateCertificateRequestStatus(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, opts ...client.UpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *certificateRequestClient) PatchCertificateRequestStatus(ctx context.Context, obj *cert_manager_io_v1.CertificateRequest, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides CertificateRequestClients for multiple clusters.
type MulticlusterCertificateRequestClient interface {
	// Cluster returns a CertificateRequestClient for the given cluster
	Cluster(cluster string) (CertificateRequestClient, error)
}

type multiclusterCertificateRequestClient struct {
	client multicluster.Client
}

func NewMulticlusterCertificateRequestClient(client multicluster.Client) MulticlusterCertificateRequestClient {
	return &multiclusterCertificateRequestClient{client: client}
}

func (m *multiclusterCertificateRequestClient) Cluster(cluster string) (CertificateRequestClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewCertificateRequestClient(client), nil
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1"
	controller "github.com/solo-io/external-apis/pkg/api/certmanager/cert-manager.io/v1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterCertificateRequestReconciler is a mock of MulticlusterCertificateRequestReconciler interface
type MockMulticlusterCertificateRequestReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCertificateRequestReconcilerMockRecorder
}

// MockMulticlusterCertificateRequestReconcilerMockRecorder is the mock recorder for MockMulticlusterCertificateRequestReconciler
type MockMulticlusterCertificateRequestReconcilerMockRecorder struct {
	mock *MockMulticlusterCertificateRequestReconciler
}

// NewMockMulticlusterCertificateRequestReconciler creates a new mock instance
func NewMockMulticlusterCertificateRequestReconciler(ctrl *gomock.Controller) *MockMulticlusterCertificateRequestReconciler {
	mock := &MockMulticlusterCertificateRequestReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCertificateRequestReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterCertificateRequestReconciler) EXPECT() *MockMulticlusterCertificateRequestReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCertificateRequest mocks base method
func (m *MockMulticlusterCertificateRequestReconciler) ReconcileCertificateRequest(clusterName string, obj *v1.CertificateRequest) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequest", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileCertificateRequest indicates an expected call of ReconcileCertificateRequest
func (mr *MockMulticlusterCertificateRequestReconcilerMockRecorder) ReconcileCertificateRequest(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequest", reflect.TypeOf((*MockMulticlusterCertificateRequestReconciler)(nil).ReconcileCertificateRequest), clusterName, obj)
}

// MockMulticlusterCertificateRequestDeletionReconciler is a mock of MulticlusterCertificateRequestDeletionReconciler interface
type MockMulticlusterCertificateRequestDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder
}

// MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterCertificateRequestDeletionReconciler
type MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterCertificateRequestDeletionReconciler
}

// NewMockMulticlusterCertificateRequestDeletionReconciler creates a new mock instance
func NewMockMulticlusterCertificateRequestDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterCertificateRequestDeletionReconciler {
	mock := &MockMulticlusterCertificateRequestDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterCertificateRequestDeletionReconciler) EXPECT() *MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileCertificateRequestDeletion mocks base method
func (m *MockMulticlusterCertificateRequestDeletionReconciler) ReconcileCertificateRequestDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileCertificateRequestDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileCertificateRequestDeletion indicates an expected call of ReconcileCertificateRequestDeletion
func (mr *MockMulticlusterCertificateRequestDeletionReconcilerMockRecorder) ReconcileCertificateRequestDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileCertificateRequestDeletion", reflect.TypeOf((*MockMulticlusterCertificateRequestDeletionReconciler)(nil).ReconcileCertificateRequestDeletion), clusterName, req)
}

// MockMulticlusterCertificateRequestReconcileLoop is a mock of MulticlusterCertificateRequestReconcileLoop interface
type MockMulticlusterCertificateRequestReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterCertificateRequestReconcileLoopMockRecorder
}

// MockMulticlusterCertificateRequestReconcileLoopMockRecorder is the mock recorder for MockMulticlusterCertificateRequestReconcileLoop
type MockMulticlusterCertificateRequestReconcileLoopMockRecorder struct {
	mock *MockMulticlusterCertificateRequestReconcileLoop
}

// NewMockMulticlusterCertificateRequestReconcileLoop creates a new mock instance
func NewMockMulticlusterCertificateRequestReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterCertificateRequestReconcileLoop {
	mock := &MockMulticlusterCertificateRequestReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterCertificateRequestReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterCertificateRequestReconcileLoop) EXPECT() *MockMulticlusterCertificateRequestReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterCertificateRequestReconciler mocks base method
func (m *MockMulticlusterCertificateRequestReconcileLoop) AddMulticlusterCertificateRequestReconciler(ctx context.Context, rec controller.MulticlusterCertificateRequestReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterCertificateRequestReconciler", varargs...)
}

// AddMulticlusterCertificateRequestReconciler indicates an expected call of AddMulticlusterCertificateRequestReconciler
func (mr *MockMulticlusterCertificateRequestReconcileLoopMockRecorder) AddMulticlusterCertificateRequestReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterCertificateRequestReconciler", reflect.TypeOf((*MockMulticlusterCertificateRequestReconcileLoop)(nil).AddMulticlusterCertificateRequestReconciler), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1"
	controller "github.com/solo-io/external-apis/pkg/api/certmanager/cert-manager.io/v1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockCertificateRequestEventHandler is a mock of CertificateRequestEventHandler interface
type MockCertificateRequestEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestEventHandlerMockRecorder
}

// MockCertificateRequestEventHandlerMockRecorder is the mock recorder for MockCertificateRequestEventHandler
type MockCertificateRequestEventHandlerMockRecorder struct {
	mock *MockCertificateRequestEventHandler
}

// NewMockCertificateRequestEventHandler creates a new mock instance
func NewMockCertificateRequestEventHandler(ctrl *gomock.Controller) *MockCertificateRequestEventHandler {
	mock := &MockCertificateRequestEventHandler{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestEventHandler) EXPECT() *MockCertificateRequestEventHandlerMockRecorder {
	return m.recorder
}

// CreateCertificateRequest mocks base method
func (m *MockCertificateRequestEventHandler) CreateCertificateRequest(obj *v1.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateRequest", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificateRequest indicates an expected call of CreateCertificateRequest
func (mr *MockCertificateRequestEventHandlerMockRecorder) CreateCertificateRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateRequest", reflect.TypeOf((*MockCertificateRequestEventHandler)(nil).CreateCertificateRequest), obj)
}

// UpdateCertificateRequest mocks base method
func (m *MockCertificateRequestEventHandler) UpdateCertificateRequest(old, new *v1.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateRequest", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificateRequest indicates an expected call of UpdateCertificateRequest
func (mr *MockCertificateRequestEventHandlerMockRecorder) UpdateCertificateRequest(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateRequest", reflect.TypeOf((*MockCertificateRequestEventHandler)(nil).UpdateCertificateRequest), old, new)
}

// DeleteCertificateRequest mocks base method
func (m *MockCertificateRequestEventHandler) DeleteCertificateRequest(obj *v1.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateRequest", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificateRequest indicates an expected call of DeleteCertificateRequest
func (mr *MockCertificateRequestEventHandlerMockRecorder) DeleteCertificateRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateRequest", reflect.TypeOf((*MockCertificateRequestEventHandler)(nil).DeleteCertificateRequest), obj)
}

// GenericCertificateRequest mocks base method
func (m *MockCertificateRequestEventHandler) GenericCertificateRequest(obj *v1.CertificateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericCertificateRequest", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericCertificateRequest indicates an expected call of GenericCertificateRequest
func (mr *MockCertificateRequestEventHandlerMockRecorder) GenericCertificateRequest(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericCertificateRequest", reflect.TypeOf((*MockCertificateRequestEventHandler)(nil).GenericCertificateRequest), obj)
}

// MockCertificateRequestEventWatcher is a mock of CertificateRequestEventWatcher interface
type MockCertificateRequestEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRequestEventWatcherMockRecorder
}

// MockCertificateRequestEventWatcherMockRecorder is the mock recorder for MockCertificateRequestEventWatcher
type MockCertificateRequestEventWatcherMockRecorder struct {
	mock *MockCertificateRequestEventWatcher
}

// NewMockCertificateRequestEventWatcher creates a new mock instance
func NewMockCertificateRequestEventWatcher(ctrl *gomock.Controller) *MockCertificateRequestEventWatcher {
	mock := &MockCertificateRequestEventWatcher{ctrl: ctrl}
	mock.recorder = &MockCertificateRequestEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificateRequestEventWatcher) EXPECT() *MockCertificateRequestEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method
func (m *MockCertificateRequestEventWatcher) AddEventHandler(ctx context.Context, h controller.CertificateRequestEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler
func (mr *MockCertificateRequestEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockCertificateRequestEventWatcher)(nil).AddEventHandler), varargs...)
}

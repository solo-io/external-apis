// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	cert_manager_io_v1 "github.com/jetstack/cert-manager/pkg/apis/certmanager/v1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the CertificateRequest Resource
// DEPRECATED: Prefer reconciler pattern.
type CertificateRequestEventHandler interface {
	CreateCertificateRequest(obj *cert_manager_io_v1.CertificateRequest) error
	UpdateCertificateRequest(old, new *cert_manager_io_v1.CertificateRequest) error
	DeleteCertificateRequest(obj *cert_manager_io_v1.CertificateRequest) error
	GenericCertificateRequest(obj *cert_manager_io_v1.CertificateRequest) error
}

type CertificateRequestEventHandlerFuncs struct {
	OnCreate  func(obj *cert_manager_io_v1.CertificateRequest) error
	OnUpdate  func(old, new *cert_manager_io_v1.CertificateRequest) error
	OnDelete  func(obj *cert_manager_io_v1.CertificateRequest) error
	OnGeneric func(obj *cert_manager_io_v1.CertificateRequest) error
}

func (f *CertificateRequestEventHandlerFuncs) CreateCertificateRequest(obj *cert_manager_io_v1.CertificateRequest) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *CertificateRequestEventHandlerFuncs) DeleteCertificateRequest(obj *cert_manager_io_v1.CertificateRequest) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *CertificateRequestEventHandlerFuncs) UpdateCertificateRequest(objOld, objNew *cert_manager_io_v1.CertificateRequest) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *CertificateRequestEventHandlerFuncs) GenericCertificateRequest(obj *cert_manager_io_v1.CertificateRequest) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type CertificateRequestEventWatcher interface {
	AddEventHandler(ctx context.Context, h CertificateRequestEventHandler, predicates ...predicate.Predicate) error
}

type certificateRequestEventWatcher struct {
	watcher events.EventWatcher
}

func NewCertificateRequestEventWatcher(name string, mgr manager.Manager) CertificateRequestEventWatcher {
	return &certificateRequestEventWatcher{
		watcher: events.NewWatcher(name, mgr, &cert_manager_io_v1.CertificateRequest{}),
	}
}

func (c *certificateRequestEventWatcher) AddEventHandler(ctx context.Context, h CertificateRequestEventHandler, predicates ...predicate.Predicate) error {
	handler := genericCertificateRequestHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericCertificateRequestHandler implements a generic events.EventHandler
type genericCertificateRequestHandler struct {
	handler CertificateRequestEventHandler
}

func (h genericCertificateRequestHandler) Create(object client.Object) error {
	obj, ok := object.(*cert_manager_io_v1.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", object)
	}
	return h.handler.CreateCertificateRequest(obj)
}

func (h genericCertificateRequestHandler) Delete(object client.Object) error {
	obj, ok := object.(*cert_manager_io_v1.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", object)
	}
	return h.handler.DeleteCertificateRequest(obj)
}

func (h genericCertificateRequestHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*cert_manager_io_v1.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", old)
	}
	objNew, ok := new.(*cert_manager_io_v1.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", new)
	}
	return h.handler.UpdateCertificateRequest(objOld, objNew)
}

func (h genericCertificateRequestHandler) Generic(object client.Object) error {
	obj, ok := object.(*cert_manager_io_v1.CertificateRequest)
	if !ok {
		return errors.Errorf("internal error: CertificateRequest handler received event for %T", object)
	}
	return h.handler.GenericCertificateRequest(obj)
}

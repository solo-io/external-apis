// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	extensions_istio_io_v1alpha1 "istio.io/client-go/pkg/apis/extensions/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the WasmPlugin Resource.
// implemented by the user
type WasmPluginReconciler interface {
	ReconcileWasmPlugin(obj *extensions_istio_io_v1alpha1.WasmPlugin) (reconcile.Result, error)
}

// Reconcile deletion events for the WasmPlugin Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type WasmPluginDeletionReconciler interface {
	ReconcileWasmPluginDeletion(req reconcile.Request) error
}

type WasmPluginReconcilerFuncs struct {
	OnReconcileWasmPlugin         func(obj *extensions_istio_io_v1alpha1.WasmPlugin) (reconcile.Result, error)
	OnReconcileWasmPluginDeletion func(req reconcile.Request) error
}

func (f *WasmPluginReconcilerFuncs) ReconcileWasmPlugin(obj *extensions_istio_io_v1alpha1.WasmPlugin) (reconcile.Result, error) {
	if f.OnReconcileWasmPlugin == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileWasmPlugin(obj)
}

func (f *WasmPluginReconcilerFuncs) ReconcileWasmPluginDeletion(req reconcile.Request) error {
	if f.OnReconcileWasmPluginDeletion == nil {
		return nil
	}
	return f.OnReconcileWasmPluginDeletion(req)
}

// Reconcile and finalize the WasmPlugin Resource
// implemented by the user
type WasmPluginFinalizer interface {
	WasmPluginReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	WasmPluginFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeWasmPlugin(obj *extensions_istio_io_v1alpha1.WasmPlugin) error
}

type WasmPluginReconcileLoop interface {
	RunWasmPluginReconciler(ctx context.Context, rec WasmPluginReconciler, predicates ...predicate.Predicate) error
}

type wasmPluginReconcileLoop struct {
	loop reconcile.Loop
}

func NewWasmPluginReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) WasmPluginReconcileLoop {
	return &wasmPluginReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &extensions_istio_io_v1alpha1.WasmPlugin{}, options),
	}
}

func (c *wasmPluginReconcileLoop) RunWasmPluginReconciler(ctx context.Context, reconciler WasmPluginReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericWasmPluginReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(WasmPluginFinalizer); ok {
		reconcilerWrapper = genericWasmPluginFinalizer{
			genericWasmPluginReconciler: genericReconciler,
			finalizingReconciler:        finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericWasmPluginHandler implements a generic reconcile.Reconciler
type genericWasmPluginReconciler struct {
	reconciler WasmPluginReconciler
}

func (r genericWasmPluginReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*extensions_istio_io_v1alpha1.WasmPlugin)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: WasmPlugin handler received event for %T", object)
	}
	return r.reconciler.ReconcileWasmPlugin(obj)
}

func (r genericWasmPluginReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(WasmPluginDeletionReconciler); ok {
		return deletionReconciler.ReconcileWasmPluginDeletion(request)
	}
	return nil
}

// genericWasmPluginFinalizer implements a generic reconcile.FinalizingReconciler
type genericWasmPluginFinalizer struct {
	genericWasmPluginReconciler
	finalizingReconciler WasmPluginFinalizer
}

func (r genericWasmPluginFinalizer) FinalizerName() string {
	return r.finalizingReconciler.WasmPluginFinalizerName()
}

func (r genericWasmPluginFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*extensions_istio_io_v1alpha1.WasmPlugin)
	if !ok {
		return errors.Errorf("internal error: WasmPlugin handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeWasmPlugin(obj)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/istio/extensions.istio.io/v1alpha1/controller"
	v1alpha1 "istio.io/client-go/pkg/apis/extensions/v1alpha1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockWasmPluginEventHandler is a mock of WasmPluginEventHandler interface.
type MockWasmPluginEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWasmPluginEventHandlerMockRecorder
}

// MockWasmPluginEventHandlerMockRecorder is the mock recorder for MockWasmPluginEventHandler.
type MockWasmPluginEventHandlerMockRecorder struct {
	mock *MockWasmPluginEventHandler
}

// NewMockWasmPluginEventHandler creates a new mock instance.
func NewMockWasmPluginEventHandler(ctrl *gomock.Controller) *MockWasmPluginEventHandler {
	mock := &MockWasmPluginEventHandler{ctrl: ctrl}
	mock.recorder = &MockWasmPluginEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmPluginEventHandler) EXPECT() *MockWasmPluginEventHandlerMockRecorder {
	return m.recorder
}

// CreateWasmPlugin mocks base method.
func (m *MockWasmPluginEventHandler) CreateWasmPlugin(obj *v1alpha1.WasmPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWasmPlugin", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmPlugin indicates an expected call of CreateWasmPlugin.
func (mr *MockWasmPluginEventHandlerMockRecorder) CreateWasmPlugin(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmPlugin", reflect.TypeOf((*MockWasmPluginEventHandler)(nil).CreateWasmPlugin), obj)
}

// DeleteWasmPlugin mocks base method.
func (m *MockWasmPluginEventHandler) DeleteWasmPlugin(obj *v1alpha1.WasmPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWasmPlugin", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmPlugin indicates an expected call of DeleteWasmPlugin.
func (mr *MockWasmPluginEventHandlerMockRecorder) DeleteWasmPlugin(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmPlugin", reflect.TypeOf((*MockWasmPluginEventHandler)(nil).DeleteWasmPlugin), obj)
}

// GenericWasmPlugin mocks base method.
func (m *MockWasmPluginEventHandler) GenericWasmPlugin(obj *v1alpha1.WasmPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericWasmPlugin", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericWasmPlugin indicates an expected call of GenericWasmPlugin.
func (mr *MockWasmPluginEventHandlerMockRecorder) GenericWasmPlugin(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericWasmPlugin", reflect.TypeOf((*MockWasmPluginEventHandler)(nil).GenericWasmPlugin), obj)
}

// UpdateWasmPlugin mocks base method.
func (m *MockWasmPluginEventHandler) UpdateWasmPlugin(old, new *v1alpha1.WasmPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWasmPlugin", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmPlugin indicates an expected call of UpdateWasmPlugin.
func (mr *MockWasmPluginEventHandlerMockRecorder) UpdateWasmPlugin(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmPlugin", reflect.TypeOf((*MockWasmPluginEventHandler)(nil).UpdateWasmPlugin), old, new)
}

// MockWasmPluginEventWatcher is a mock of WasmPluginEventWatcher interface.
type MockWasmPluginEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWasmPluginEventWatcherMockRecorder
}

// MockWasmPluginEventWatcherMockRecorder is the mock recorder for MockWasmPluginEventWatcher.
type MockWasmPluginEventWatcherMockRecorder struct {
	mock *MockWasmPluginEventWatcher
}

// NewMockWasmPluginEventWatcher creates a new mock instance.
func NewMockWasmPluginEventWatcher(ctrl *gomock.Controller) *MockWasmPluginEventWatcher {
	mock := &MockWasmPluginEventWatcher{ctrl: ctrl}
	mock.recorder = &MockWasmPluginEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmPluginEventWatcher) EXPECT() *MockWasmPluginEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockWasmPluginEventWatcher) AddEventHandler(ctx context.Context, h controller.WasmPluginEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockWasmPluginEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockWasmPluginEventWatcher)(nil).AddEventHandler), varargs...)
}

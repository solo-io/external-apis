// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/istio/extensions.istio.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1alpha1 "istio.io/client-go/pkg/apis/extensions/v1alpha1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterWasmPluginReconciler is a mock of MulticlusterWasmPluginReconciler interface.
type MockMulticlusterWasmPluginReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmPluginReconcilerMockRecorder
}

// MockMulticlusterWasmPluginReconcilerMockRecorder is the mock recorder for MockMulticlusterWasmPluginReconciler.
type MockMulticlusterWasmPluginReconcilerMockRecorder struct {
	mock *MockMulticlusterWasmPluginReconciler
}

// NewMockMulticlusterWasmPluginReconciler creates a new mock instance.
func NewMockMulticlusterWasmPluginReconciler(ctrl *gomock.Controller) *MockMulticlusterWasmPluginReconciler {
	mock := &MockMulticlusterWasmPluginReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmPluginReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWasmPluginReconciler) EXPECT() *MockMulticlusterWasmPluginReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmPlugin mocks base method.
func (m *MockMulticlusterWasmPluginReconciler) ReconcileWasmPlugin(clusterName string, obj *v1alpha1.WasmPlugin) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmPlugin", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWasmPlugin indicates an expected call of ReconcileWasmPlugin.
func (mr *MockMulticlusterWasmPluginReconcilerMockRecorder) ReconcileWasmPlugin(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmPlugin", reflect.TypeOf((*MockMulticlusterWasmPluginReconciler)(nil).ReconcileWasmPlugin), clusterName, obj)
}

// MockMulticlusterWasmPluginDeletionReconciler is a mock of MulticlusterWasmPluginDeletionReconciler interface.
type MockMulticlusterWasmPluginDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmPluginDeletionReconcilerMockRecorder
}

// MockMulticlusterWasmPluginDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterWasmPluginDeletionReconciler.
type MockMulticlusterWasmPluginDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterWasmPluginDeletionReconciler
}

// NewMockMulticlusterWasmPluginDeletionReconciler creates a new mock instance.
func NewMockMulticlusterWasmPluginDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterWasmPluginDeletionReconciler {
	mock := &MockMulticlusterWasmPluginDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmPluginDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWasmPluginDeletionReconciler) EXPECT() *MockMulticlusterWasmPluginDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWasmPluginDeletion mocks base method.
func (m *MockMulticlusterWasmPluginDeletionReconciler) ReconcileWasmPluginDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWasmPluginDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWasmPluginDeletion indicates an expected call of ReconcileWasmPluginDeletion.
func (mr *MockMulticlusterWasmPluginDeletionReconcilerMockRecorder) ReconcileWasmPluginDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWasmPluginDeletion", reflect.TypeOf((*MockMulticlusterWasmPluginDeletionReconciler)(nil).ReconcileWasmPluginDeletion), clusterName, req)
}

// MockMulticlusterWasmPluginReconcileLoop is a mock of MulticlusterWasmPluginReconcileLoop interface.
type MockMulticlusterWasmPluginReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmPluginReconcileLoopMockRecorder
}

// MockMulticlusterWasmPluginReconcileLoopMockRecorder is the mock recorder for MockMulticlusterWasmPluginReconcileLoop.
type MockMulticlusterWasmPluginReconcileLoopMockRecorder struct {
	mock *MockMulticlusterWasmPluginReconcileLoop
}

// NewMockMulticlusterWasmPluginReconcileLoop creates a new mock instance.
func NewMockMulticlusterWasmPluginReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterWasmPluginReconcileLoop {
	mock := &MockMulticlusterWasmPluginReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmPluginReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWasmPluginReconcileLoop) EXPECT() *MockMulticlusterWasmPluginReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterWasmPluginReconciler mocks base method.
func (m *MockMulticlusterWasmPluginReconcileLoop) AddMulticlusterWasmPluginReconciler(ctx context.Context, rec controller.MulticlusterWasmPluginReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterWasmPluginReconciler", varargs...)
}

// AddMulticlusterWasmPluginReconciler indicates an expected call of AddMulticlusterWasmPluginReconciler.
func (mr *MockMulticlusterWasmPluginReconcileLoopMockRecorder) AddMulticlusterWasmPluginReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterWasmPluginReconciler", reflect.TypeOf((*MockMulticlusterWasmPluginReconcileLoop)(nil).AddMulticlusterWasmPluginReconciler), varargs...)
}

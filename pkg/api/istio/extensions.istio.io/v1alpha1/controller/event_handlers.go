// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	extensions_istio_io_v1alpha1 "istio.io/client-go/pkg/apis/extensions/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the WasmPlugin Resource
// DEPRECATED: Prefer reconciler pattern.
type WasmPluginEventHandler interface {
	CreateWasmPlugin(obj *extensions_istio_io_v1alpha1.WasmPlugin) error
	UpdateWasmPlugin(old, new *extensions_istio_io_v1alpha1.WasmPlugin) error
	DeleteWasmPlugin(obj *extensions_istio_io_v1alpha1.WasmPlugin) error
	GenericWasmPlugin(obj *extensions_istio_io_v1alpha1.WasmPlugin) error
}

type WasmPluginEventHandlerFuncs struct {
	OnCreate  func(obj *extensions_istio_io_v1alpha1.WasmPlugin) error
	OnUpdate  func(old, new *extensions_istio_io_v1alpha1.WasmPlugin) error
	OnDelete  func(obj *extensions_istio_io_v1alpha1.WasmPlugin) error
	OnGeneric func(obj *extensions_istio_io_v1alpha1.WasmPlugin) error
}

func (f *WasmPluginEventHandlerFuncs) CreateWasmPlugin(obj *extensions_istio_io_v1alpha1.WasmPlugin) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *WasmPluginEventHandlerFuncs) DeleteWasmPlugin(obj *extensions_istio_io_v1alpha1.WasmPlugin) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *WasmPluginEventHandlerFuncs) UpdateWasmPlugin(objOld, objNew *extensions_istio_io_v1alpha1.WasmPlugin) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *WasmPluginEventHandlerFuncs) GenericWasmPlugin(obj *extensions_istio_io_v1alpha1.WasmPlugin) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type WasmPluginEventWatcher interface {
	AddEventHandler(ctx context.Context, h WasmPluginEventHandler, predicates ...predicate.Predicate) error
}

type wasmPluginEventWatcher struct {
	watcher events.EventWatcher
}

func NewWasmPluginEventWatcher(name string, mgr manager.Manager) WasmPluginEventWatcher {
	return &wasmPluginEventWatcher{
		watcher: events.NewWatcher(name, mgr, &extensions_istio_io_v1alpha1.WasmPlugin{}),
	}
}

func (c *wasmPluginEventWatcher) AddEventHandler(ctx context.Context, h WasmPluginEventHandler, predicates ...predicate.Predicate) error {
	handler := genericWasmPluginHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericWasmPluginHandler implements a generic events.EventHandler
type genericWasmPluginHandler struct {
	handler WasmPluginEventHandler
}

func (h genericWasmPluginHandler) Create(object client.Object) error {
	obj, ok := object.(*extensions_istio_io_v1alpha1.WasmPlugin)
	if !ok {
		return errors.Errorf("internal error: WasmPlugin handler received event for %T", object)
	}
	return h.handler.CreateWasmPlugin(obj)
}

func (h genericWasmPluginHandler) Delete(object client.Object) error {
	obj, ok := object.(*extensions_istio_io_v1alpha1.WasmPlugin)
	if !ok {
		return errors.Errorf("internal error: WasmPlugin handler received event for %T", object)
	}
	return h.handler.DeleteWasmPlugin(obj)
}

func (h genericWasmPluginHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*extensions_istio_io_v1alpha1.WasmPlugin)
	if !ok {
		return errors.Errorf("internal error: WasmPlugin handler received event for %T", old)
	}
	objNew, ok := new.(*extensions_istio_io_v1alpha1.WasmPlugin)
	if !ok {
		return errors.Errorf("internal error: WasmPlugin handler received event for %T", new)
	}
	return h.handler.UpdateWasmPlugin(objOld, objNew)
}

func (h genericWasmPluginHandler) Generic(object client.Object) error {
	obj, ok := object.(*extensions_istio_io_v1alpha1.WasmPlugin)
	if !ok {
		return errors.Errorf("internal error: WasmPlugin handler received event for %T", object)
	}
	return h.handler.GenericWasmPlugin(obj)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/external-apis/pkg/api/istio/extensions.istio.io/v1alpha1"
	v1alpha10 "istio.io/client-go/pkg/apis/extensions/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// WasmPlugins mocks base method.
func (m *MockClientset) WasmPlugins() v1alpha1.WasmPluginClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasmPlugins")
	ret0, _ := ret[0].(v1alpha1.WasmPluginClient)
	return ret0
}

// WasmPlugins indicates an expected call of WasmPlugins.
func (mr *MockClientsetMockRecorder) WasmPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasmPlugins", reflect.TypeOf((*MockClientset)(nil).WasmPlugins))
}

// MockWasmPluginReader is a mock of WasmPluginReader interface.
type MockWasmPluginReader struct {
	ctrl     *gomock.Controller
	recorder *MockWasmPluginReaderMockRecorder
}

// MockWasmPluginReaderMockRecorder is the mock recorder for MockWasmPluginReader.
type MockWasmPluginReaderMockRecorder struct {
	mock *MockWasmPluginReader
}

// NewMockWasmPluginReader creates a new mock instance.
func NewMockWasmPluginReader(ctrl *gomock.Controller) *MockWasmPluginReader {
	mock := &MockWasmPluginReader{ctrl: ctrl}
	mock.recorder = &MockWasmPluginReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmPluginReader) EXPECT() *MockWasmPluginReaderMockRecorder {
	return m.recorder
}

// GetWasmPlugin mocks base method.
func (m *MockWasmPluginReader) GetWasmPlugin(ctx context.Context, key client.ObjectKey) (*v1alpha10.WasmPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasmPlugin", ctx, key)
	ret0, _ := ret[0].(*v1alpha10.WasmPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasmPlugin indicates an expected call of GetWasmPlugin.
func (mr *MockWasmPluginReaderMockRecorder) GetWasmPlugin(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasmPlugin", reflect.TypeOf((*MockWasmPluginReader)(nil).GetWasmPlugin), ctx, key)
}

// ListWasmPlugin mocks base method.
func (m *MockWasmPluginReader) ListWasmPlugin(ctx context.Context, opts ...client.ListOption) (*v1alpha10.WasmPluginList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWasmPlugin", varargs...)
	ret0, _ := ret[0].(*v1alpha10.WasmPluginList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWasmPlugin indicates an expected call of ListWasmPlugin.
func (mr *MockWasmPluginReaderMockRecorder) ListWasmPlugin(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWasmPlugin", reflect.TypeOf((*MockWasmPluginReader)(nil).ListWasmPlugin), varargs...)
}

// MockWasmPluginWriter is a mock of WasmPluginWriter interface.
type MockWasmPluginWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWasmPluginWriterMockRecorder
}

// MockWasmPluginWriterMockRecorder is the mock recorder for MockWasmPluginWriter.
type MockWasmPluginWriterMockRecorder struct {
	mock *MockWasmPluginWriter
}

// NewMockWasmPluginWriter creates a new mock instance.
func NewMockWasmPluginWriter(ctrl *gomock.Controller) *MockWasmPluginWriter {
	mock := &MockWasmPluginWriter{ctrl: ctrl}
	mock.recorder = &MockWasmPluginWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmPluginWriter) EXPECT() *MockWasmPluginWriterMockRecorder {
	return m.recorder
}

// CreateWasmPlugin mocks base method.
func (m *MockWasmPluginWriter) CreateWasmPlugin(ctx context.Context, obj *v1alpha10.WasmPlugin, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmPlugin indicates an expected call of CreateWasmPlugin.
func (mr *MockWasmPluginWriterMockRecorder) CreateWasmPlugin(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmPlugin", reflect.TypeOf((*MockWasmPluginWriter)(nil).CreateWasmPlugin), varargs...)
}

// DeleteAllOfWasmPlugin mocks base method.
func (m *MockWasmPluginWriter) DeleteAllOfWasmPlugin(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWasmPlugin indicates an expected call of DeleteAllOfWasmPlugin.
func (mr *MockWasmPluginWriterMockRecorder) DeleteAllOfWasmPlugin(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWasmPlugin", reflect.TypeOf((*MockWasmPluginWriter)(nil).DeleteAllOfWasmPlugin), varargs...)
}

// DeleteWasmPlugin mocks base method.
func (m *MockWasmPluginWriter) DeleteWasmPlugin(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmPlugin indicates an expected call of DeleteWasmPlugin.
func (mr *MockWasmPluginWriterMockRecorder) DeleteWasmPlugin(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmPlugin", reflect.TypeOf((*MockWasmPluginWriter)(nil).DeleteWasmPlugin), varargs...)
}

// PatchWasmPlugin mocks base method.
func (m *MockWasmPluginWriter) PatchWasmPlugin(ctx context.Context, obj *v1alpha10.WasmPlugin, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmPlugin indicates an expected call of PatchWasmPlugin.
func (mr *MockWasmPluginWriterMockRecorder) PatchWasmPlugin(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmPlugin", reflect.TypeOf((*MockWasmPluginWriter)(nil).PatchWasmPlugin), varargs...)
}

// UpdateWasmPlugin mocks base method.
func (m *MockWasmPluginWriter) UpdateWasmPlugin(ctx context.Context, obj *v1alpha10.WasmPlugin, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmPlugin indicates an expected call of UpdateWasmPlugin.
func (mr *MockWasmPluginWriterMockRecorder) UpdateWasmPlugin(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmPlugin", reflect.TypeOf((*MockWasmPluginWriter)(nil).UpdateWasmPlugin), varargs...)
}

// UpsertWasmPlugin mocks base method.
func (m *MockWasmPluginWriter) UpsertWasmPlugin(ctx context.Context, obj *v1alpha10.WasmPlugin, transitionFuncs ...v1alpha1.WasmPluginTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWasmPlugin indicates an expected call of UpsertWasmPlugin.
func (mr *MockWasmPluginWriterMockRecorder) UpsertWasmPlugin(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWasmPlugin", reflect.TypeOf((*MockWasmPluginWriter)(nil).UpsertWasmPlugin), varargs...)
}

// MockWasmPluginStatusWriter is a mock of WasmPluginStatusWriter interface.
type MockWasmPluginStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWasmPluginStatusWriterMockRecorder
}

// MockWasmPluginStatusWriterMockRecorder is the mock recorder for MockWasmPluginStatusWriter.
type MockWasmPluginStatusWriterMockRecorder struct {
	mock *MockWasmPluginStatusWriter
}

// NewMockWasmPluginStatusWriter creates a new mock instance.
func NewMockWasmPluginStatusWriter(ctrl *gomock.Controller) *MockWasmPluginStatusWriter {
	mock := &MockWasmPluginStatusWriter{ctrl: ctrl}
	mock.recorder = &MockWasmPluginStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmPluginStatusWriter) EXPECT() *MockWasmPluginStatusWriterMockRecorder {
	return m.recorder
}

// PatchWasmPluginStatus mocks base method.
func (m *MockWasmPluginStatusWriter) PatchWasmPluginStatus(ctx context.Context, obj *v1alpha10.WasmPlugin, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmPluginStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmPluginStatus indicates an expected call of PatchWasmPluginStatus.
func (mr *MockWasmPluginStatusWriterMockRecorder) PatchWasmPluginStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmPluginStatus", reflect.TypeOf((*MockWasmPluginStatusWriter)(nil).PatchWasmPluginStatus), varargs...)
}

// UpdateWasmPluginStatus mocks base method.
func (m *MockWasmPluginStatusWriter) UpdateWasmPluginStatus(ctx context.Context, obj *v1alpha10.WasmPlugin, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmPluginStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmPluginStatus indicates an expected call of UpdateWasmPluginStatus.
func (mr *MockWasmPluginStatusWriterMockRecorder) UpdateWasmPluginStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmPluginStatus", reflect.TypeOf((*MockWasmPluginStatusWriter)(nil).UpdateWasmPluginStatus), varargs...)
}

// MockWasmPluginClient is a mock of WasmPluginClient interface.
type MockWasmPluginClient struct {
	ctrl     *gomock.Controller
	recorder *MockWasmPluginClientMockRecorder
}

// MockWasmPluginClientMockRecorder is the mock recorder for MockWasmPluginClient.
type MockWasmPluginClientMockRecorder struct {
	mock *MockWasmPluginClient
}

// NewMockWasmPluginClient creates a new mock instance.
func NewMockWasmPluginClient(ctrl *gomock.Controller) *MockWasmPluginClient {
	mock := &MockWasmPluginClient{ctrl: ctrl}
	mock.recorder = &MockWasmPluginClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWasmPluginClient) EXPECT() *MockWasmPluginClientMockRecorder {
	return m.recorder
}

// CreateWasmPlugin mocks base method.
func (m *MockWasmPluginClient) CreateWasmPlugin(ctx context.Context, obj *v1alpha10.WasmPlugin, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWasmPlugin indicates an expected call of CreateWasmPlugin.
func (mr *MockWasmPluginClientMockRecorder) CreateWasmPlugin(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWasmPlugin", reflect.TypeOf((*MockWasmPluginClient)(nil).CreateWasmPlugin), varargs...)
}

// DeleteAllOfWasmPlugin mocks base method.
func (m *MockWasmPluginClient) DeleteAllOfWasmPlugin(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfWasmPlugin indicates an expected call of DeleteAllOfWasmPlugin.
func (mr *MockWasmPluginClientMockRecorder) DeleteAllOfWasmPlugin(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfWasmPlugin", reflect.TypeOf((*MockWasmPluginClient)(nil).DeleteAllOfWasmPlugin), varargs...)
}

// DeleteWasmPlugin mocks base method.
func (m *MockWasmPluginClient) DeleteWasmPlugin(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWasmPlugin indicates an expected call of DeleteWasmPlugin.
func (mr *MockWasmPluginClientMockRecorder) DeleteWasmPlugin(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWasmPlugin", reflect.TypeOf((*MockWasmPluginClient)(nil).DeleteWasmPlugin), varargs...)
}

// GetWasmPlugin mocks base method.
func (m *MockWasmPluginClient) GetWasmPlugin(ctx context.Context, key client.ObjectKey) (*v1alpha10.WasmPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWasmPlugin", ctx, key)
	ret0, _ := ret[0].(*v1alpha10.WasmPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWasmPlugin indicates an expected call of GetWasmPlugin.
func (mr *MockWasmPluginClientMockRecorder) GetWasmPlugin(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWasmPlugin", reflect.TypeOf((*MockWasmPluginClient)(nil).GetWasmPlugin), ctx, key)
}

// ListWasmPlugin mocks base method.
func (m *MockWasmPluginClient) ListWasmPlugin(ctx context.Context, opts ...client.ListOption) (*v1alpha10.WasmPluginList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWasmPlugin", varargs...)
	ret0, _ := ret[0].(*v1alpha10.WasmPluginList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWasmPlugin indicates an expected call of ListWasmPlugin.
func (mr *MockWasmPluginClientMockRecorder) ListWasmPlugin(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWasmPlugin", reflect.TypeOf((*MockWasmPluginClient)(nil).ListWasmPlugin), varargs...)
}

// PatchWasmPlugin mocks base method.
func (m *MockWasmPluginClient) PatchWasmPlugin(ctx context.Context, obj *v1alpha10.WasmPlugin, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmPlugin indicates an expected call of PatchWasmPlugin.
func (mr *MockWasmPluginClientMockRecorder) PatchWasmPlugin(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmPlugin", reflect.TypeOf((*MockWasmPluginClient)(nil).PatchWasmPlugin), varargs...)
}

// PatchWasmPluginStatus mocks base method.
func (m *MockWasmPluginClient) PatchWasmPluginStatus(ctx context.Context, obj *v1alpha10.WasmPlugin, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchWasmPluginStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWasmPluginStatus indicates an expected call of PatchWasmPluginStatus.
func (mr *MockWasmPluginClientMockRecorder) PatchWasmPluginStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWasmPluginStatus", reflect.TypeOf((*MockWasmPluginClient)(nil).PatchWasmPluginStatus), varargs...)
}

// UpdateWasmPlugin mocks base method.
func (m *MockWasmPluginClient) UpdateWasmPlugin(ctx context.Context, obj *v1alpha10.WasmPlugin, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmPlugin indicates an expected call of UpdateWasmPlugin.
func (mr *MockWasmPluginClientMockRecorder) UpdateWasmPlugin(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmPlugin", reflect.TypeOf((*MockWasmPluginClient)(nil).UpdateWasmPlugin), varargs...)
}

// UpdateWasmPluginStatus mocks base method.
func (m *MockWasmPluginClient) UpdateWasmPluginStatus(ctx context.Context, obj *v1alpha10.WasmPlugin, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWasmPluginStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWasmPluginStatus indicates an expected call of UpdateWasmPluginStatus.
func (mr *MockWasmPluginClientMockRecorder) UpdateWasmPluginStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWasmPluginStatus", reflect.TypeOf((*MockWasmPluginClient)(nil).UpdateWasmPluginStatus), varargs...)
}

// UpsertWasmPlugin mocks base method.
func (m *MockWasmPluginClient) UpsertWasmPlugin(ctx context.Context, obj *v1alpha10.WasmPlugin, transitionFuncs ...v1alpha1.WasmPluginTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWasmPlugin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWasmPlugin indicates an expected call of UpsertWasmPlugin.
func (mr *MockWasmPluginClientMockRecorder) UpsertWasmPlugin(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWasmPlugin", reflect.TypeOf((*MockWasmPluginClient)(nil).UpsertWasmPlugin), varargs...)
}

// MockMulticlusterWasmPluginClient is a mock of MulticlusterWasmPluginClient interface.
type MockMulticlusterWasmPluginClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWasmPluginClientMockRecorder
}

// MockMulticlusterWasmPluginClientMockRecorder is the mock recorder for MockMulticlusterWasmPluginClient.
type MockMulticlusterWasmPluginClientMockRecorder struct {
	mock *MockMulticlusterWasmPluginClient
}

// NewMockMulticlusterWasmPluginClient creates a new mock instance.
func NewMockMulticlusterWasmPluginClient(ctrl *gomock.Controller) *MockMulticlusterWasmPluginClient {
	mock := &MockMulticlusterWasmPluginClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWasmPluginClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWasmPluginClient) EXPECT() *MockMulticlusterWasmPluginClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterWasmPluginClient) Cluster(cluster string) (v1alpha1.WasmPluginClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.WasmPluginClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterWasmPluginClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterWasmPluginClient)(nil).Cluster), cluster)
}

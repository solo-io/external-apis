// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha1sets

import (
	extensions_istio_io_v1alpha1 "istio.io/client-go/pkg/apis/extensions/v1alpha1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/sets"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type WasmPluginSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*extensions_istio_io_v1alpha1.WasmPlugin) bool) []*extensions_istio_io_v1alpha1.WasmPlugin
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*extensions_istio_io_v1alpha1.WasmPlugin) bool) []*extensions_istio_io_v1alpha1.WasmPlugin
	// Return the Set as a map of key to resource.
	Map() map[string]*extensions_istio_io_v1alpha1.WasmPlugin
	// Insert a resource into the set.
	Insert(wasmPlugin ...*extensions_istio_io_v1alpha1.WasmPlugin)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(wasmPluginSet WasmPluginSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(wasmPlugin ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(wasmPlugin ezkube.ResourceId)
	// Return the union with the provided set
	Union(set WasmPluginSet) WasmPluginSet
	// Return the difference with the provided set
	Difference(set WasmPluginSet) WasmPluginSet
	// Return the intersection with the provided set
	Intersection(set WasmPluginSet) WasmPluginSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*extensions_istio_io_v1alpha1.WasmPlugin, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another WasmPluginSet
	Delta(newSet WasmPluginSet) sksets.ResourceDelta
	// Create a deep copy of the current WasmPluginSet
	Clone() WasmPluginSet
	// Get the sort function used by the set
	GetSortFunc() func(toInsert, existing client.Object) bool
	// Get the equality function used by the set
	GetEqualityFunc() func(a, b client.Object) bool
}

func makeGenericWasmPluginSet(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	wasmPluginList []*extensions_istio_io_v1alpha1.WasmPlugin,
) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range wasmPluginList {
		genericResources = append(genericResources, obj)
	}
	genericSortFunc := func(toInsert, existing ezkube.ResourceId) bool {
		objToInsert, ok := toInsert.(client.Object)
		if !ok {
			objToInsert = &extensions_istio_io_v1alpha1.WasmPlugin{
				ObjectMeta: metav1.ObjectMeta{
					Name:      toInsert.GetName(),
					Namespace: toInsert.GetNamespace(),
				},
			}
		}
		objExisting, ok := existing.(client.Object)
		if !ok {
			objExisting = &extensions_istio_io_v1alpha1.WasmPlugin{
				ObjectMeta: metav1.ObjectMeta{
					Name:      existing.GetName(),
					Namespace: existing.GetNamespace(),
				},
			}
		}
		return sortFunc(objToInsert, objExisting)
	}
	genericEqualityFunc := func(a, b ezkube.ResourceId) bool {
		objA, ok := a.(client.Object)
		if !ok {
			objA = &extensions_istio_io_v1alpha1.WasmPlugin{
				ObjectMeta: metav1.ObjectMeta{
					Name:      a.GetName(),
					Namespace: a.GetNamespace(),
				},
			}
		}
		objB, ok := b.(client.Object)
		if !ok {
			objB = &extensions_istio_io_v1alpha1.WasmPlugin{
				ObjectMeta: metav1.ObjectMeta{
					Name:      b.GetName(),
					Namespace: b.GetNamespace(),
				},
			}
		}
		return equalityFunc(objA, objB)
	}
	return sksets.NewResourceSet(genericSortFunc, genericEqualityFunc, genericResources...)
}

type wasmPluginSet struct {
	set          sksets.ResourceSet
	sortFunc     func(toInsert, existing client.Object) bool
	equalityFunc func(a, b client.Object) bool
}

func NewWasmPluginSet(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	wasmPluginList ...*extensions_istio_io_v1alpha1.WasmPlugin,
) WasmPluginSet {
	return &wasmPluginSet{
		set:          makeGenericWasmPluginSet(sortFunc, equalityFunc, wasmPluginList),
		sortFunc:     sortFunc,
		equalityFunc: equalityFunc,
	}
}

func NewWasmPluginSetFromList(
	sortFunc func(toInsert, existing client.Object) bool,
	equalityFunc func(a, b client.Object) bool,
	wasmPluginList *extensions_istio_io_v1alpha1.WasmPluginList,
) WasmPluginSet {
	list := make([]*extensions_istio_io_v1alpha1.WasmPlugin, 0, len(wasmPluginList.Items))
	for idx := range wasmPluginList.Items {
		list = append(list, wasmPluginList.Items[idx])
	}
	return &wasmPluginSet{
		set:          makeGenericWasmPluginSet(sortFunc, equalityFunc, list),
		sortFunc:     sortFunc,
		equalityFunc: equalityFunc,
	}
}

func (s *wasmPluginSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *wasmPluginSet) List(filterResource ...func(*extensions_istio_io_v1alpha1.WasmPlugin) bool) []*extensions_istio_io_v1alpha1.WasmPlugin {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*extensions_istio_io_v1alpha1.WasmPlugin))
		})
	}

	objs := s.Generic().List(genericFilters...)
	wasmPluginList := make([]*extensions_istio_io_v1alpha1.WasmPlugin, 0, len(objs))
	for _, obj := range objs {
		wasmPluginList = append(wasmPluginList, obj.(*extensions_istio_io_v1alpha1.WasmPlugin))
	}
	return wasmPluginList
}

func (s *wasmPluginSet) UnsortedList(filterResource ...func(*extensions_istio_io_v1alpha1.WasmPlugin) bool) []*extensions_istio_io_v1alpha1.WasmPlugin {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*extensions_istio_io_v1alpha1.WasmPlugin))
		})
	}

	var wasmPluginList []*extensions_istio_io_v1alpha1.WasmPlugin
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		wasmPluginList = append(wasmPluginList, obj.(*extensions_istio_io_v1alpha1.WasmPlugin))
	}
	return wasmPluginList
}

func (s *wasmPluginSet) Map() map[string]*extensions_istio_io_v1alpha1.WasmPlugin {
	if s == nil {
		return nil
	}

	newMap := map[string]*extensions_istio_io_v1alpha1.WasmPlugin{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*extensions_istio_io_v1alpha1.WasmPlugin)
	}
	return newMap
}

func (s *wasmPluginSet) Insert(
	wasmPluginList ...*extensions_istio_io_v1alpha1.WasmPlugin,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range wasmPluginList {
		s.Generic().Insert(obj)
	}
}

func (s *wasmPluginSet) Has(wasmPlugin ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(wasmPlugin)
}

func (s *wasmPluginSet) Equal(
	wasmPluginSet WasmPluginSet,
) bool {
	if s == nil {
		return wasmPluginSet == nil
	}
	return s.Generic().Equal(wasmPluginSet.Generic())
}

func (s *wasmPluginSet) Delete(WasmPlugin ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(WasmPlugin)
}

func (s *wasmPluginSet) Union(set WasmPluginSet) WasmPluginSet {
	if s == nil {
		return set
	}
	return NewWasmPluginSet(s.sortFunc, s.equalityFunc, append(s.List(), set.List()...)...)
}

func (s *wasmPluginSet) Difference(set WasmPluginSet) WasmPluginSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &wasmPluginSet{
		set:          newSet,
		sortFunc:     s.sortFunc,
		equalityFunc: s.equalityFunc,
	}
}

func (s *wasmPluginSet) Intersection(set WasmPluginSet) WasmPluginSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var wasmPluginList []*extensions_istio_io_v1alpha1.WasmPlugin
	for _, obj := range newSet.List() {
		wasmPluginList = append(wasmPluginList, obj.(*extensions_istio_io_v1alpha1.WasmPlugin))
	}
	return NewWasmPluginSet(s.sortFunc, s.equalityFunc, wasmPluginList...)
}

func (s *wasmPluginSet) Find(id ezkube.ResourceId) (*extensions_istio_io_v1alpha1.WasmPlugin, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find WasmPlugin %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&extensions_istio_io_v1alpha1.WasmPlugin{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*extensions_istio_io_v1alpha1.WasmPlugin), nil
}

func (s *wasmPluginSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *wasmPluginSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *wasmPluginSet) Delta(newSet WasmPluginSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *wasmPluginSet) Clone() WasmPluginSet {
	if s == nil {
		return nil
	}
	genericSortFunc := func(toInsert, existing ezkube.ResourceId) bool {
		objToInsert, ok := toInsert.(client.Object)
		if !ok {
			objToInsert = &extensions_istio_io_v1alpha1.WasmPlugin{
				ObjectMeta: metav1.ObjectMeta{
					Name:      toInsert.GetName(),
					Namespace: toInsert.GetNamespace(),
				},
			}
		}
		objExisting, ok := existing.(client.Object)
		if !ok {
			objExisting = &extensions_istio_io_v1alpha1.WasmPlugin{
				ObjectMeta: metav1.ObjectMeta{
					Name:      existing.GetName(),
					Namespace: existing.GetNamespace(),
				},
			}
		}
		return s.sortFunc(objToInsert, objExisting)
	}
	genericEqualityFunc := func(a, b ezkube.ResourceId) bool {
		objA, ok := a.(client.Object)
		if !ok {
			objA = &extensions_istio_io_v1alpha1.WasmPlugin{
				ObjectMeta: metav1.ObjectMeta{
					Name:      a.GetName(),
					Namespace: a.GetNamespace(),
				},
			}
		}
		objB, ok := b.(client.Object)
		if !ok {
			objB = &extensions_istio_io_v1alpha1.WasmPlugin{
				ObjectMeta: metav1.ObjectMeta{
					Name:      b.GetName(),
					Namespace: b.GetNamespace(),
				},
			}
		}
		return s.equalityFunc(objA, objB)
	}
	return &wasmPluginSet{
		set: sksets.NewResourceSet(
			genericSortFunc,
			genericEqualityFunc,
			s.Generic().Clone().List()...,
		),
	}
}

func (s *wasmPluginSet) GetSortFunc() func(toInsert, existing client.Object) bool {
	return s.sortFunc
}

func (s *wasmPluginSet) GetEqualityFunc() func(a, b client.Object) bool {
	return s.equalityFunc
}

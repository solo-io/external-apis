// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/istio/telemetry.istio.io/v1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1 "istio.io/client-go/pkg/apis/telemetry/v1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockTelemetryReconciler is a mock of TelemetryReconciler interface.
type MockTelemetryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryReconcilerMockRecorder
}

// MockTelemetryReconcilerMockRecorder is the mock recorder for MockTelemetryReconciler.
type MockTelemetryReconcilerMockRecorder struct {
	mock *MockTelemetryReconciler
}

// NewMockTelemetryReconciler creates a new mock instance.
func NewMockTelemetryReconciler(ctrl *gomock.Controller) *MockTelemetryReconciler {
	mock := &MockTelemetryReconciler{ctrl: ctrl}
	mock.recorder = &MockTelemetryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryReconciler) EXPECT() *MockTelemetryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTelemetry mocks base method.
func (m *MockTelemetryReconciler) ReconcileTelemetry(obj *v1.Telemetry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTelemetry", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTelemetry indicates an expected call of ReconcileTelemetry.
func (mr *MockTelemetryReconcilerMockRecorder) ReconcileTelemetry(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTelemetry", reflect.TypeOf((*MockTelemetryReconciler)(nil).ReconcileTelemetry), obj)
}

// MockTelemetryDeletionReconciler is a mock of TelemetryDeletionReconciler interface.
type MockTelemetryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryDeletionReconcilerMockRecorder
}

// MockTelemetryDeletionReconcilerMockRecorder is the mock recorder for MockTelemetryDeletionReconciler.
type MockTelemetryDeletionReconcilerMockRecorder struct {
	mock *MockTelemetryDeletionReconciler
}

// NewMockTelemetryDeletionReconciler creates a new mock instance.
func NewMockTelemetryDeletionReconciler(ctrl *gomock.Controller) *MockTelemetryDeletionReconciler {
	mock := &MockTelemetryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockTelemetryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryDeletionReconciler) EXPECT() *MockTelemetryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileTelemetryDeletion mocks base method.
func (m *MockTelemetryDeletionReconciler) ReconcileTelemetryDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTelemetryDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTelemetryDeletion indicates an expected call of ReconcileTelemetryDeletion.
func (mr *MockTelemetryDeletionReconcilerMockRecorder) ReconcileTelemetryDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTelemetryDeletion", reflect.TypeOf((*MockTelemetryDeletionReconciler)(nil).ReconcileTelemetryDeletion), req)
}

// MockTelemetryFinalizer is a mock of TelemetryFinalizer interface.
type MockTelemetryFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryFinalizerMockRecorder
}

// MockTelemetryFinalizerMockRecorder is the mock recorder for MockTelemetryFinalizer.
type MockTelemetryFinalizerMockRecorder struct {
	mock *MockTelemetryFinalizer
}

// NewMockTelemetryFinalizer creates a new mock instance.
func NewMockTelemetryFinalizer(ctrl *gomock.Controller) *MockTelemetryFinalizer {
	mock := &MockTelemetryFinalizer{ctrl: ctrl}
	mock.recorder = &MockTelemetryFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryFinalizer) EXPECT() *MockTelemetryFinalizerMockRecorder {
	return m.recorder
}

// FinalizeTelemetry mocks base method.
func (m *MockTelemetryFinalizer) FinalizeTelemetry(obj *v1.Telemetry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeTelemetry", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeTelemetry indicates an expected call of FinalizeTelemetry.
func (mr *MockTelemetryFinalizerMockRecorder) FinalizeTelemetry(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeTelemetry", reflect.TypeOf((*MockTelemetryFinalizer)(nil).FinalizeTelemetry), obj)
}

// ReconcileTelemetry mocks base method.
func (m *MockTelemetryFinalizer) ReconcileTelemetry(obj *v1.Telemetry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTelemetry", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileTelemetry indicates an expected call of ReconcileTelemetry.
func (mr *MockTelemetryFinalizerMockRecorder) ReconcileTelemetry(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTelemetry", reflect.TypeOf((*MockTelemetryFinalizer)(nil).ReconcileTelemetry), obj)
}

// TelemetryFinalizerName mocks base method.
func (m *MockTelemetryFinalizer) TelemetryFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TelemetryFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TelemetryFinalizerName indicates an expected call of TelemetryFinalizerName.
func (mr *MockTelemetryFinalizerMockRecorder) TelemetryFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TelemetryFinalizerName", reflect.TypeOf((*MockTelemetryFinalizer)(nil).TelemetryFinalizerName))
}

// MockTelemetryReconcileLoop is a mock of TelemetryReconcileLoop interface.
type MockTelemetryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryReconcileLoopMockRecorder
}

// MockTelemetryReconcileLoopMockRecorder is the mock recorder for MockTelemetryReconcileLoop.
type MockTelemetryReconcileLoopMockRecorder struct {
	mock *MockTelemetryReconcileLoop
}

// NewMockTelemetryReconcileLoop creates a new mock instance.
func NewMockTelemetryReconcileLoop(ctrl *gomock.Controller) *MockTelemetryReconcileLoop {
	mock := &MockTelemetryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockTelemetryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryReconcileLoop) EXPECT() *MockTelemetryReconcileLoopMockRecorder {
	return m.recorder
}

// RunTelemetryReconciler mocks base method.
func (m *MockTelemetryReconcileLoop) RunTelemetryReconciler(ctx context.Context, rec controller.TelemetryReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTelemetryReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTelemetryReconciler indicates an expected call of RunTelemetryReconciler.
func (mr *MockTelemetryReconcileLoopMockRecorder) RunTelemetryReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTelemetryReconciler", reflect.TypeOf((*MockTelemetryReconcileLoop)(nil).RunTelemetryReconciler), varargs...)
}

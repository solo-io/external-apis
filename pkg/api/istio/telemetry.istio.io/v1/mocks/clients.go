// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/external-apis/pkg/api/istio/telemetry.istio.io/v1"
	v10 "istio.io/client-go/pkg/apis/telemetry/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// Telemetries mocks base method.
func (m *MockClientset) Telemetries() v1.TelemetryClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Telemetries")
	ret0, _ := ret[0].(v1.TelemetryClient)
	return ret0
}

// Telemetries indicates an expected call of Telemetries.
func (mr *MockClientsetMockRecorder) Telemetries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Telemetries", reflect.TypeOf((*MockClientset)(nil).Telemetries))
}

// MockTelemetryReader is a mock of TelemetryReader interface.
type MockTelemetryReader struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryReaderMockRecorder
}

// MockTelemetryReaderMockRecorder is the mock recorder for MockTelemetryReader.
type MockTelemetryReaderMockRecorder struct {
	mock *MockTelemetryReader
}

// NewMockTelemetryReader creates a new mock instance.
func NewMockTelemetryReader(ctrl *gomock.Controller) *MockTelemetryReader {
	mock := &MockTelemetryReader{ctrl: ctrl}
	mock.recorder = &MockTelemetryReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryReader) EXPECT() *MockTelemetryReaderMockRecorder {
	return m.recorder
}

// GetTelemetry mocks base method.
func (m *MockTelemetryReader) GetTelemetry(ctx context.Context, key client.ObjectKey) (*v10.Telemetry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetry", ctx, key)
	ret0, _ := ret[0].(*v10.Telemetry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelemetry indicates an expected call of GetTelemetry.
func (mr *MockTelemetryReaderMockRecorder) GetTelemetry(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetry", reflect.TypeOf((*MockTelemetryReader)(nil).GetTelemetry), ctx, key)
}

// ListTelemetry mocks base method.
func (m *MockTelemetryReader) ListTelemetry(ctx context.Context, opts ...client.ListOption) (*v10.TelemetryList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTelemetry", varargs...)
	ret0, _ := ret[0].(*v10.TelemetryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTelemetry indicates an expected call of ListTelemetry.
func (mr *MockTelemetryReaderMockRecorder) ListTelemetry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTelemetry", reflect.TypeOf((*MockTelemetryReader)(nil).ListTelemetry), varargs...)
}

// MockTelemetryWriter is a mock of TelemetryWriter interface.
type MockTelemetryWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryWriterMockRecorder
}

// MockTelemetryWriterMockRecorder is the mock recorder for MockTelemetryWriter.
type MockTelemetryWriterMockRecorder struct {
	mock *MockTelemetryWriter
}

// NewMockTelemetryWriter creates a new mock instance.
func NewMockTelemetryWriter(ctrl *gomock.Controller) *MockTelemetryWriter {
	mock := &MockTelemetryWriter{ctrl: ctrl}
	mock.recorder = &MockTelemetryWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryWriter) EXPECT() *MockTelemetryWriterMockRecorder {
	return m.recorder
}

// CreateTelemetry mocks base method.
func (m *MockTelemetryWriter) CreateTelemetry(ctx context.Context, obj *v10.Telemetry, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTelemetry indicates an expected call of CreateTelemetry.
func (mr *MockTelemetryWriterMockRecorder) CreateTelemetry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTelemetry", reflect.TypeOf((*MockTelemetryWriter)(nil).CreateTelemetry), varargs...)
}

// DeleteAllOfTelemetry mocks base method.
func (m *MockTelemetryWriter) DeleteAllOfTelemetry(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTelemetry indicates an expected call of DeleteAllOfTelemetry.
func (mr *MockTelemetryWriterMockRecorder) DeleteAllOfTelemetry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTelemetry", reflect.TypeOf((*MockTelemetryWriter)(nil).DeleteAllOfTelemetry), varargs...)
}

// DeleteTelemetry mocks base method.
func (m *MockTelemetryWriter) DeleteTelemetry(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTelemetry indicates an expected call of DeleteTelemetry.
func (mr *MockTelemetryWriterMockRecorder) DeleteTelemetry(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTelemetry", reflect.TypeOf((*MockTelemetryWriter)(nil).DeleteTelemetry), varargs...)
}

// PatchTelemetry mocks base method.
func (m *MockTelemetryWriter) PatchTelemetry(ctx context.Context, obj *v10.Telemetry, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTelemetry indicates an expected call of PatchTelemetry.
func (mr *MockTelemetryWriterMockRecorder) PatchTelemetry(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTelemetry", reflect.TypeOf((*MockTelemetryWriter)(nil).PatchTelemetry), varargs...)
}

// UpdateTelemetry mocks base method.
func (m *MockTelemetryWriter) UpdateTelemetry(ctx context.Context, obj *v10.Telemetry, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTelemetry indicates an expected call of UpdateTelemetry.
func (mr *MockTelemetryWriterMockRecorder) UpdateTelemetry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTelemetry", reflect.TypeOf((*MockTelemetryWriter)(nil).UpdateTelemetry), varargs...)
}

// UpsertTelemetry mocks base method.
func (m *MockTelemetryWriter) UpsertTelemetry(ctx context.Context, obj *v10.Telemetry, transitionFuncs ...v1.TelemetryTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTelemetry indicates an expected call of UpsertTelemetry.
func (mr *MockTelemetryWriterMockRecorder) UpsertTelemetry(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTelemetry", reflect.TypeOf((*MockTelemetryWriter)(nil).UpsertTelemetry), varargs...)
}

// MockTelemetryStatusWriter is a mock of TelemetryStatusWriter interface.
type MockTelemetryStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryStatusWriterMockRecorder
}

// MockTelemetryStatusWriterMockRecorder is the mock recorder for MockTelemetryStatusWriter.
type MockTelemetryStatusWriterMockRecorder struct {
	mock *MockTelemetryStatusWriter
}

// NewMockTelemetryStatusWriter creates a new mock instance.
func NewMockTelemetryStatusWriter(ctrl *gomock.Controller) *MockTelemetryStatusWriter {
	mock := &MockTelemetryStatusWriter{ctrl: ctrl}
	mock.recorder = &MockTelemetryStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryStatusWriter) EXPECT() *MockTelemetryStatusWriterMockRecorder {
	return m.recorder
}

// PatchTelemetryStatus mocks base method.
func (m *MockTelemetryStatusWriter) PatchTelemetryStatus(ctx context.Context, obj *v10.Telemetry, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTelemetryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTelemetryStatus indicates an expected call of PatchTelemetryStatus.
func (mr *MockTelemetryStatusWriterMockRecorder) PatchTelemetryStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTelemetryStatus", reflect.TypeOf((*MockTelemetryStatusWriter)(nil).PatchTelemetryStatus), varargs...)
}

// UpdateTelemetryStatus mocks base method.
func (m *MockTelemetryStatusWriter) UpdateTelemetryStatus(ctx context.Context, obj *v10.Telemetry, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTelemetryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTelemetryStatus indicates an expected call of UpdateTelemetryStatus.
func (mr *MockTelemetryStatusWriterMockRecorder) UpdateTelemetryStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTelemetryStatus", reflect.TypeOf((*MockTelemetryStatusWriter)(nil).UpdateTelemetryStatus), varargs...)
}

// MockTelemetryClient is a mock of TelemetryClient interface.
type MockTelemetryClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryClientMockRecorder
}

// MockTelemetryClientMockRecorder is the mock recorder for MockTelemetryClient.
type MockTelemetryClientMockRecorder struct {
	mock *MockTelemetryClient
}

// NewMockTelemetryClient creates a new mock instance.
func NewMockTelemetryClient(ctrl *gomock.Controller) *MockTelemetryClient {
	mock := &MockTelemetryClient{ctrl: ctrl}
	mock.recorder = &MockTelemetryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryClient) EXPECT() *MockTelemetryClientMockRecorder {
	return m.recorder
}

// CreateTelemetry mocks base method.
func (m *MockTelemetryClient) CreateTelemetry(ctx context.Context, obj *v10.Telemetry, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTelemetry indicates an expected call of CreateTelemetry.
func (mr *MockTelemetryClientMockRecorder) CreateTelemetry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTelemetry", reflect.TypeOf((*MockTelemetryClient)(nil).CreateTelemetry), varargs...)
}

// DeleteAllOfTelemetry mocks base method.
func (m *MockTelemetryClient) DeleteAllOfTelemetry(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfTelemetry indicates an expected call of DeleteAllOfTelemetry.
func (mr *MockTelemetryClientMockRecorder) DeleteAllOfTelemetry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfTelemetry", reflect.TypeOf((*MockTelemetryClient)(nil).DeleteAllOfTelemetry), varargs...)
}

// DeleteTelemetry mocks base method.
func (m *MockTelemetryClient) DeleteTelemetry(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTelemetry indicates an expected call of DeleteTelemetry.
func (mr *MockTelemetryClientMockRecorder) DeleteTelemetry(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTelemetry", reflect.TypeOf((*MockTelemetryClient)(nil).DeleteTelemetry), varargs...)
}

// GetTelemetry mocks base method.
func (m *MockTelemetryClient) GetTelemetry(ctx context.Context, key client.ObjectKey) (*v10.Telemetry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetry", ctx, key)
	ret0, _ := ret[0].(*v10.Telemetry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelemetry indicates an expected call of GetTelemetry.
func (mr *MockTelemetryClientMockRecorder) GetTelemetry(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetry", reflect.TypeOf((*MockTelemetryClient)(nil).GetTelemetry), ctx, key)
}

// ListTelemetry mocks base method.
func (m *MockTelemetryClient) ListTelemetry(ctx context.Context, opts ...client.ListOption) (*v10.TelemetryList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTelemetry", varargs...)
	ret0, _ := ret[0].(*v10.TelemetryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTelemetry indicates an expected call of ListTelemetry.
func (mr *MockTelemetryClientMockRecorder) ListTelemetry(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTelemetry", reflect.TypeOf((*MockTelemetryClient)(nil).ListTelemetry), varargs...)
}

// PatchTelemetry mocks base method.
func (m *MockTelemetryClient) PatchTelemetry(ctx context.Context, obj *v10.Telemetry, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTelemetry indicates an expected call of PatchTelemetry.
func (mr *MockTelemetryClientMockRecorder) PatchTelemetry(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTelemetry", reflect.TypeOf((*MockTelemetryClient)(nil).PatchTelemetry), varargs...)
}

// PatchTelemetryStatus mocks base method.
func (m *MockTelemetryClient) PatchTelemetryStatus(ctx context.Context, obj *v10.Telemetry, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTelemetryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTelemetryStatus indicates an expected call of PatchTelemetryStatus.
func (mr *MockTelemetryClientMockRecorder) PatchTelemetryStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTelemetryStatus", reflect.TypeOf((*MockTelemetryClient)(nil).PatchTelemetryStatus), varargs...)
}

// UpdateTelemetry mocks base method.
func (m *MockTelemetryClient) UpdateTelemetry(ctx context.Context, obj *v10.Telemetry, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTelemetry indicates an expected call of UpdateTelemetry.
func (mr *MockTelemetryClientMockRecorder) UpdateTelemetry(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTelemetry", reflect.TypeOf((*MockTelemetryClient)(nil).UpdateTelemetry), varargs...)
}

// UpdateTelemetryStatus mocks base method.
func (m *MockTelemetryClient) UpdateTelemetryStatus(ctx context.Context, obj *v10.Telemetry, opts ...client.SubResourceUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTelemetryStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTelemetryStatus indicates an expected call of UpdateTelemetryStatus.
func (mr *MockTelemetryClientMockRecorder) UpdateTelemetryStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTelemetryStatus", reflect.TypeOf((*MockTelemetryClient)(nil).UpdateTelemetryStatus), varargs...)
}

// UpsertTelemetry mocks base method.
func (m *MockTelemetryClient) UpsertTelemetry(ctx context.Context, obj *v10.Telemetry, transitionFuncs ...v1.TelemetryTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertTelemetry", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTelemetry indicates an expected call of UpsertTelemetry.
func (mr *MockTelemetryClientMockRecorder) UpsertTelemetry(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTelemetry", reflect.TypeOf((*MockTelemetryClient)(nil).UpsertTelemetry), varargs...)
}

// MockMulticlusterTelemetryClient is a mock of MulticlusterTelemetryClient interface.
type MockMulticlusterTelemetryClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterTelemetryClientMockRecorder
}

// MockMulticlusterTelemetryClientMockRecorder is the mock recorder for MockMulticlusterTelemetryClient.
type MockMulticlusterTelemetryClientMockRecorder struct {
	mock *MockMulticlusterTelemetryClient
}

// NewMockMulticlusterTelemetryClient creates a new mock instance.
func NewMockMulticlusterTelemetryClient(ctrl *gomock.Controller) *MockMulticlusterTelemetryClient {
	mock := &MockMulticlusterTelemetryClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterTelemetryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterTelemetryClient) EXPECT() *MockMulticlusterTelemetryClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterTelemetryClient) Cluster(cluster string) (v1.TelemetryClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1.TelemetryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterTelemetryClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterTelemetryClient)(nil).Cluster), cluster)
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./clients.go -destination mocks/clients.go

package v1

import (
	"context"

	"github.com/solo-io/skv2/pkg/controllerutils"
	"github.com/solo-io/skv2/pkg/multicluster"
	telemetry_istio_io_v1 "istio.io/client-go/pkg/apis/telemetry/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// MulticlusterClientset for the telemetry.istio.io/v1 APIs
type MulticlusterClientset interface {
	// Cluster returns a Clientset for the given cluster
	Cluster(cluster string) (Clientset, error)
}

type multiclusterClientset struct {
	client multicluster.Client
}

func NewMulticlusterClientset(client multicluster.Client) MulticlusterClientset {
	return &multiclusterClientset{client: client}
}

func (m *multiclusterClientset) Cluster(cluster string) (Clientset, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

// clienset for the telemetry.istio.io/v1 APIs
type Clientset interface {
	// clienset for the telemetry.istio.io/v1/v1 APIs
	Telemetries() TelemetryClient
}

type clientSet struct {
	client client.Client
}

func NewClientsetFromConfig(cfg *rest.Config) (Clientset, error) {
	scheme := scheme.Scheme
	if err := telemetry_istio_io_v1.SchemeBuilder.AddToScheme(scheme); err != nil {
		return nil, err
	}
	client, err := client.New(cfg, client.Options{
		Scheme: scheme,
	})
	if err != nil {
		return nil, err
	}
	return NewClientset(client), nil
}

func NewClientset(client client.Client) Clientset {
	return &clientSet{client: client}
}

// clienset for the telemetry.istio.io/v1/v1 APIs
func (c *clientSet) Telemetries() TelemetryClient {
	return NewTelemetryClient(c.client)
}

// Reader knows how to read and list Telemetrys.
type TelemetryReader interface {
	// Get retrieves a Telemetry for the given object key
	GetTelemetry(ctx context.Context, key client.ObjectKey) (*telemetry_istio_io_v1.Telemetry, error)

	// List retrieves list of Telemetrys for a given namespace and list options.
	ListTelemetry(ctx context.Context, opts ...client.ListOption) (*telemetry_istio_io_v1.TelemetryList, error)
}

// TelemetryTransitionFunction instructs the TelemetryWriter how to transition between an existing
// Telemetry object and a desired on an Upsert
type TelemetryTransitionFunction func(existing, desired *telemetry_istio_io_v1.Telemetry) error

// Writer knows how to create, delete, and update Telemetrys.
type TelemetryWriter interface {
	// Create saves the Telemetry object.
	CreateTelemetry(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, opts ...client.CreateOption) error

	// Delete deletes the Telemetry object.
	DeleteTelemetry(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error

	// Update updates the given Telemetry object.
	UpdateTelemetry(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, opts ...client.UpdateOption) error

	// Patch patches the given Telemetry object.
	PatchTelemetry(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, patch client.Patch, opts ...client.PatchOption) error

	// DeleteAllOf deletes all Telemetry objects matching the given options.
	DeleteAllOfTelemetry(ctx context.Context, opts ...client.DeleteAllOfOption) error

	// Create or Update the Telemetry object.
	UpsertTelemetry(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, transitionFuncs ...TelemetryTransitionFunction) error
}

// StatusWriter knows how to update status subresource of a Telemetry object.
type TelemetryStatusWriter interface {
	// Update updates the fields corresponding to the status subresource for the
	// given Telemetry object.
	UpdateTelemetryStatus(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, opts ...client.SubResourceUpdateOption) error

	// Patch patches the given Telemetry object's subresource.
	PatchTelemetryStatus(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, patch client.Patch, opts ...client.SubResourcePatchOption) error
}

// Client knows how to perform CRUD operations on Telemetrys.
type TelemetryClient interface {
	TelemetryReader
	TelemetryWriter
	TelemetryStatusWriter
}

type telemetryClient struct {
	client client.Client
}

func NewTelemetryClient(client client.Client) *telemetryClient {
	return &telemetryClient{client: client}
}

func (c *telemetryClient) GetTelemetry(ctx context.Context, key client.ObjectKey) (*telemetry_istio_io_v1.Telemetry, error) {
	obj := &telemetry_istio_io_v1.Telemetry{}
	if err := c.client.Get(ctx, key, obj); err != nil {
		return nil, err
	}
	return obj, nil
}

func (c *telemetryClient) ListTelemetry(ctx context.Context, opts ...client.ListOption) (*telemetry_istio_io_v1.TelemetryList, error) {
	list := &telemetry_istio_io_v1.TelemetryList{}
	if err := c.client.List(ctx, list, opts...); err != nil {
		return nil, err
	}
	return list, nil
}

func (c *telemetryClient) CreateTelemetry(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, opts ...client.CreateOption) error {
	return c.client.Create(ctx, obj, opts...)
}

func (c *telemetryClient) DeleteTelemetry(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	obj := &telemetry_istio_io_v1.Telemetry{}
	obj.SetName(key.Name)
	obj.SetNamespace(key.Namespace)
	return c.client.Delete(ctx, obj, opts...)
}

func (c *telemetryClient) UpdateTelemetry(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, opts ...client.UpdateOption) error {
	return c.client.Update(ctx, obj, opts...)
}

func (c *telemetryClient) PatchTelemetry(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, patch client.Patch, opts ...client.PatchOption) error {
	return c.client.Patch(ctx, obj, patch, opts...)
}

func (c *telemetryClient) DeleteAllOfTelemetry(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	obj := &telemetry_istio_io_v1.Telemetry{}
	return c.client.DeleteAllOf(ctx, obj, opts...)
}

func (c *telemetryClient) UpsertTelemetry(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, transitionFuncs ...TelemetryTransitionFunction) error {
	genericTxFunc := func(existing, desired runtime.Object) error {
		for _, txFunc := range transitionFuncs {
			if err := txFunc(existing.(*telemetry_istio_io_v1.Telemetry), desired.(*telemetry_istio_io_v1.Telemetry)); err != nil {
				return err
			}
		}
		return nil
	}
	_, err := controllerutils.Upsert(ctx, c.client, obj, genericTxFunc)
	return err
}

func (c *telemetryClient) UpdateTelemetryStatus(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, opts ...client.SubResourceUpdateOption) error {
	return c.client.Status().Update(ctx, obj, opts...)
}

func (c *telemetryClient) PatchTelemetryStatus(ctx context.Context, obj *telemetry_istio_io_v1.Telemetry, patch client.Patch, opts ...client.SubResourcePatchOption) error {
	return c.client.Status().Patch(ctx, obj, patch, opts...)
}

// Provides TelemetryClients for multiple clusters.
type MulticlusterTelemetryClient interface {
	// Cluster returns a TelemetryClient for the given cluster
	Cluster(cluster string) (TelemetryClient, error)
}

type multiclusterTelemetryClient struct {
	client multicluster.Client
}

func NewMulticlusterTelemetryClient(client multicluster.Client) MulticlusterTelemetryClient {
	return &multiclusterTelemetryClient{client: client}
}

func (m *multiclusterTelemetryClient) Cluster(cluster string) (TelemetryClient, error) {
	client, err := m.client.Cluster(cluster)
	if err != nil {
		return nil, err
	}
	return NewTelemetryClient(client), nil
}

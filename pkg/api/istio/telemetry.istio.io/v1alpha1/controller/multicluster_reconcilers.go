// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	telemetry_istio_io_v1alpha1 "istio.io/client-go/pkg/apis/telemetry/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the Telemetry Resource across clusters.
// implemented by the user
type MulticlusterTelemetryReconciler interface {
	ReconcileTelemetry(clusterName string, obj *telemetry_istio_io_v1alpha1.Telemetry) (reconcile.Result, error)
}

// Reconcile deletion events for the Telemetry Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterTelemetryDeletionReconciler interface {
	ReconcileTelemetryDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterTelemetryReconcilerFuncs struct {
	OnReconcileTelemetry         func(clusterName string, obj *telemetry_istio_io_v1alpha1.Telemetry) (reconcile.Result, error)
	OnReconcileTelemetryDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterTelemetryReconcilerFuncs) ReconcileTelemetry(clusterName string, obj *telemetry_istio_io_v1alpha1.Telemetry) (reconcile.Result, error) {
	if f.OnReconcileTelemetry == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileTelemetry(clusterName, obj)
}

func (f *MulticlusterTelemetryReconcilerFuncs) ReconcileTelemetryDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileTelemetryDeletion == nil {
		return nil
	}
	return f.OnReconcileTelemetryDeletion(clusterName, req)
}

type MulticlusterTelemetryReconcileLoop interface {
	// AddMulticlusterTelemetryReconciler adds a MulticlusterTelemetryReconciler to the MulticlusterTelemetryReconcileLoop.
	AddMulticlusterTelemetryReconciler(ctx context.Context, rec MulticlusterTelemetryReconciler, predicates ...predicate.Predicate)
}

type multiclusterTelemetryReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterTelemetryReconcileLoop) AddMulticlusterTelemetryReconciler(ctx context.Context, rec MulticlusterTelemetryReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericTelemetryMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterTelemetryReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterTelemetryReconcileLoop {
	return &multiclusterTelemetryReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &telemetry_istio_io_v1alpha1.Telemetry{}, options)}
}

type genericTelemetryMulticlusterReconciler struct {
	reconciler MulticlusterTelemetryReconciler
}

func (g genericTelemetryMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterTelemetryDeletionReconciler); ok {
		return deletionReconciler.ReconcileTelemetryDeletion(cluster, req)
	}
	return nil
}

func (g genericTelemetryMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*telemetry_istio_io_v1alpha1.Telemetry)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Telemetry handler received event for %T", object)
	}
	return g.reconciler.ReconcileTelemetry(cluster, obj)
}

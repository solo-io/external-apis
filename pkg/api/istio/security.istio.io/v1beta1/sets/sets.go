// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1beta1sets

import (
	security_istio_io_v1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type AuthorizationPolicySet interface {
	Keys() sets.String
	List() []*security_istio_io_v1beta1.AuthorizationPolicy
	Map() map[string]*security_istio_io_v1beta1.AuthorizationPolicy
	Insert(authorizationPolicy ...*security_istio_io_v1beta1.AuthorizationPolicy)
	Equal(authorizationPolicySet AuthorizationPolicySet) bool
	Has(authorizationPolicy *security_istio_io_v1beta1.AuthorizationPolicy) bool
	Delete(authorizationPolicy *security_istio_io_v1beta1.AuthorizationPolicy)
	Union(set AuthorizationPolicySet) AuthorizationPolicySet
	Difference(set AuthorizationPolicySet) AuthorizationPolicySet
	Intersection(set AuthorizationPolicySet) AuthorizationPolicySet
	Find(id ezkube.ResourceId) (*security_istio_io_v1beta1.AuthorizationPolicy, error)
}

func makeGenericAuthorizationPolicySet(authorizationPolicyList []*security_istio_io_v1beta1.AuthorizationPolicy) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range authorizationPolicyList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type authorizationPolicySet struct {
	set sksets.ResourceSet
}

func NewAuthorizationPolicySet(authorizationPolicyList ...*security_istio_io_v1beta1.AuthorizationPolicy) AuthorizationPolicySet {
	return &authorizationPolicySet{set: makeGenericAuthorizationPolicySet(authorizationPolicyList)}
}

func (s authorizationPolicySet) Keys() sets.String {
	return s.set.Keys()
}

func (s authorizationPolicySet) List() []*security_istio_io_v1beta1.AuthorizationPolicy {
	var authorizationPolicyList []*security_istio_io_v1beta1.AuthorizationPolicy
	for _, obj := range s.set.List() {
		authorizationPolicyList = append(authorizationPolicyList, obj.(*security_istio_io_v1beta1.AuthorizationPolicy))
	}
	return authorizationPolicyList
}

func (s authorizationPolicySet) Map() map[string]*security_istio_io_v1beta1.AuthorizationPolicy {
	newMap := map[string]*security_istio_io_v1beta1.AuthorizationPolicy{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*security_istio_io_v1beta1.AuthorizationPolicy)
	}
	return newMap
}

func (s authorizationPolicySet) Insert(
	authorizationPolicyList ...*security_istio_io_v1beta1.AuthorizationPolicy,
) {
	for _, obj := range authorizationPolicyList {
		s.set.Insert(obj)
	}
}

func (s authorizationPolicySet) Has(authorizationPolicy *security_istio_io_v1beta1.AuthorizationPolicy) bool {
	return s.set.Has(authorizationPolicy)
}

func (s authorizationPolicySet) Equal(
	authorizationPolicySet AuthorizationPolicySet,
) bool {
	return s.set.Equal(makeGenericAuthorizationPolicySet(authorizationPolicySet.List()))
}

func (s authorizationPolicySet) Delete(AuthorizationPolicy *security_istio_io_v1beta1.AuthorizationPolicy) {
	s.set.Delete(AuthorizationPolicy)
}

func (s authorizationPolicySet) Union(set AuthorizationPolicySet) AuthorizationPolicySet {
	return NewAuthorizationPolicySet(append(s.List(), set.List()...)...)
}

func (s authorizationPolicySet) Difference(set AuthorizationPolicySet) AuthorizationPolicySet {
	newSet := s.set.Difference(makeGenericAuthorizationPolicySet(set.List()))
	return authorizationPolicySet{set: newSet}
}

func (s authorizationPolicySet) Intersection(set AuthorizationPolicySet) AuthorizationPolicySet {
	newSet := s.set.Intersection(makeGenericAuthorizationPolicySet(set.List()))
	var authorizationPolicyList []*security_istio_io_v1beta1.AuthorizationPolicy
	for _, obj := range newSet.List() {
		authorizationPolicyList = append(authorizationPolicyList, obj.(*security_istio_io_v1beta1.AuthorizationPolicy))
	}
	return NewAuthorizationPolicySet(authorizationPolicyList...)
}

func (s authorizationPolicySet) Find(id ezkube.ResourceId) (*security_istio_io_v1beta1.AuthorizationPolicy, error) {
	obj, err := s.set.Find(&security_istio_io_v1beta1.AuthorizationPolicy{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*security_istio_io_v1beta1.AuthorizationPolicy), nil
}

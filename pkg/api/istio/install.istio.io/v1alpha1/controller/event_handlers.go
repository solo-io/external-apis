// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	install_istio_io_v1alpha1 "github.com/solo-io/istio-operator-legacy/operator/pkg/apis/istio/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the IstioOperator Resource
// DEPRECATED: Prefer reconciler pattern.
type IstioOperatorEventHandler interface {
	CreateIstioOperator(obj *install_istio_io_v1alpha1.IstioOperator) error
	UpdateIstioOperator(old, new *install_istio_io_v1alpha1.IstioOperator) error
	DeleteIstioOperator(obj *install_istio_io_v1alpha1.IstioOperator) error
	GenericIstioOperator(obj *install_istio_io_v1alpha1.IstioOperator) error
}

type IstioOperatorEventHandlerFuncs struct {
	OnCreate  func(obj *install_istio_io_v1alpha1.IstioOperator) error
	OnUpdate  func(old, new *install_istio_io_v1alpha1.IstioOperator) error
	OnDelete  func(obj *install_istio_io_v1alpha1.IstioOperator) error
	OnGeneric func(obj *install_istio_io_v1alpha1.IstioOperator) error
}

func (f *IstioOperatorEventHandlerFuncs) CreateIstioOperator(obj *install_istio_io_v1alpha1.IstioOperator) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *IstioOperatorEventHandlerFuncs) DeleteIstioOperator(obj *install_istio_io_v1alpha1.IstioOperator) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *IstioOperatorEventHandlerFuncs) UpdateIstioOperator(objOld, objNew *install_istio_io_v1alpha1.IstioOperator) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *IstioOperatorEventHandlerFuncs) GenericIstioOperator(obj *install_istio_io_v1alpha1.IstioOperator) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type IstioOperatorEventWatcher interface {
	AddEventHandler(ctx context.Context, h IstioOperatorEventHandler, predicates ...predicate.Predicate) error
}

type istioOperatorEventWatcher struct {
	watcher events.EventWatcher
}

func NewIstioOperatorEventWatcher(name string, mgr manager.Manager) IstioOperatorEventWatcher {
	return &istioOperatorEventWatcher{
		watcher: events.NewWatcher(name, mgr, &install_istio_io_v1alpha1.IstioOperator{}),
	}
}

func (c *istioOperatorEventWatcher) AddEventHandler(ctx context.Context, h IstioOperatorEventHandler, predicates ...predicate.Predicate) error {
	handler := genericIstioOperatorHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericIstioOperatorHandler implements a generic events.EventHandler
type genericIstioOperatorHandler struct {
	handler IstioOperatorEventHandler
}

func (h genericIstioOperatorHandler) Create(object client.Object) error {
	obj, ok := object.(*install_istio_io_v1alpha1.IstioOperator)
	if !ok {
		return errors.Errorf("internal error: IstioOperator handler received event for %T", object)
	}
	return h.handler.CreateIstioOperator(obj)
}

func (h genericIstioOperatorHandler) Delete(object client.Object) error {
	obj, ok := object.(*install_istio_io_v1alpha1.IstioOperator)
	if !ok {
		return errors.Errorf("internal error: IstioOperator handler received event for %T", object)
	}
	return h.handler.DeleteIstioOperator(obj)
}

func (h genericIstioOperatorHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*install_istio_io_v1alpha1.IstioOperator)
	if !ok {
		return errors.Errorf("internal error: IstioOperator handler received event for %T", old)
	}
	objNew, ok := new.(*install_istio_io_v1alpha1.IstioOperator)
	if !ok {
		return errors.Errorf("internal error: IstioOperator handler received event for %T", new)
	}
	return h.handler.UpdateIstioOperator(objOld, objNew)
}

func (h genericIstioOperatorHandler) Generic(object client.Object) error {
	obj, ok := object.(*install_istio_io_v1alpha1.IstioOperator)
	if !ok {
		return errors.Errorf("internal error: IstioOperator handler received event for %T", object)
	}
	return h.handler.GenericIstioOperator(obj)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/istio/install.istio.io/v1alpha1/controller"
	apis "istio.io/istio/operator/pkg/apis"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockIstioOperatorEventHandler is a mock of IstioOperatorEventHandler interface.
type MockIstioOperatorEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIstioOperatorEventHandlerMockRecorder
}

// MockIstioOperatorEventHandlerMockRecorder is the mock recorder for MockIstioOperatorEventHandler.
type MockIstioOperatorEventHandlerMockRecorder struct {
	mock *MockIstioOperatorEventHandler
}

// NewMockIstioOperatorEventHandler creates a new mock instance.
func NewMockIstioOperatorEventHandler(ctrl *gomock.Controller) *MockIstioOperatorEventHandler {
	mock := &MockIstioOperatorEventHandler{ctrl: ctrl}
	mock.recorder = &MockIstioOperatorEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstioOperatorEventHandler) EXPECT() *MockIstioOperatorEventHandlerMockRecorder {
	return m.recorder
}

// CreateIstioOperator mocks base method.
func (m *MockIstioOperatorEventHandler) CreateIstioOperator(obj *apis.IstioOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIstioOperator", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIstioOperator indicates an expected call of CreateIstioOperator.
func (mr *MockIstioOperatorEventHandlerMockRecorder) CreateIstioOperator(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIstioOperator", reflect.TypeOf((*MockIstioOperatorEventHandler)(nil).CreateIstioOperator), obj)
}

// DeleteIstioOperator mocks base method.
func (m *MockIstioOperatorEventHandler) DeleteIstioOperator(obj *apis.IstioOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIstioOperator", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIstioOperator indicates an expected call of DeleteIstioOperator.
func (mr *MockIstioOperatorEventHandlerMockRecorder) DeleteIstioOperator(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIstioOperator", reflect.TypeOf((*MockIstioOperatorEventHandler)(nil).DeleteIstioOperator), obj)
}

// GenericIstioOperator mocks base method.
func (m *MockIstioOperatorEventHandler) GenericIstioOperator(obj *apis.IstioOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericIstioOperator", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericIstioOperator indicates an expected call of GenericIstioOperator.
func (mr *MockIstioOperatorEventHandlerMockRecorder) GenericIstioOperator(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericIstioOperator", reflect.TypeOf((*MockIstioOperatorEventHandler)(nil).GenericIstioOperator), obj)
}

// UpdateIstioOperator mocks base method.
func (m *MockIstioOperatorEventHandler) UpdateIstioOperator(old, new *apis.IstioOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIstioOperator", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIstioOperator indicates an expected call of UpdateIstioOperator.
func (mr *MockIstioOperatorEventHandlerMockRecorder) UpdateIstioOperator(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIstioOperator", reflect.TypeOf((*MockIstioOperatorEventHandler)(nil).UpdateIstioOperator), old, new)
}

// MockIstioOperatorEventWatcher is a mock of IstioOperatorEventWatcher interface.
type MockIstioOperatorEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIstioOperatorEventWatcherMockRecorder
}

// MockIstioOperatorEventWatcherMockRecorder is the mock recorder for MockIstioOperatorEventWatcher.
type MockIstioOperatorEventWatcherMockRecorder struct {
	mock *MockIstioOperatorEventWatcher
}

// NewMockIstioOperatorEventWatcher creates a new mock instance.
func NewMockIstioOperatorEventWatcher(ctrl *gomock.Controller) *MockIstioOperatorEventWatcher {
	mock := &MockIstioOperatorEventWatcher{ctrl: ctrl}
	mock.recorder = &MockIstioOperatorEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstioOperatorEventWatcher) EXPECT() *MockIstioOperatorEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockIstioOperatorEventWatcher) AddEventHandler(ctx context.Context, h controller.IstioOperatorEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockIstioOperatorEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockIstioOperatorEventWatcher)(nil).AddEventHandler), varargs...)
}

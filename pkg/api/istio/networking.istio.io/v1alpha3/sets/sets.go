// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha3sets

import (
	networking_istio_io_v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type DestinationRuleSet interface {
	Keys() sets.String
	List() []*networking_istio_io_v1alpha3.DestinationRule
	Map() map[string]*networking_istio_io_v1alpha3.DestinationRule
	Insert(destinationRule ...*networking_istio_io_v1alpha3.DestinationRule)
	Equal(destinationRuleSet DestinationRuleSet) bool
	Has(destinationRule *networking_istio_io_v1alpha3.DestinationRule) bool
	Delete(destinationRule *networking_istio_io_v1alpha3.DestinationRule)
	Union(set DestinationRuleSet) DestinationRuleSet
	Difference(set DestinationRuleSet) DestinationRuleSet
	Intersection(set DestinationRuleSet) DestinationRuleSet
	Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.DestinationRule, error)
}

func makeGenericDestinationRuleSet(destinationRuleList []*networking_istio_io_v1alpha3.DestinationRule) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range destinationRuleList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type destinationRuleSet struct {
	set sksets.ResourceSet
}

func NewDestinationRuleSet(destinationRuleList ...*networking_istio_io_v1alpha3.DestinationRule) DestinationRuleSet {
	return &destinationRuleSet{set: makeGenericDestinationRuleSet(destinationRuleList)}
}

func (s destinationRuleSet) Keys() sets.String {
	return s.set.Keys()
}

func (s destinationRuleSet) List() []*networking_istio_io_v1alpha3.DestinationRule {
	var destinationRuleList []*networking_istio_io_v1alpha3.DestinationRule
	for _, obj := range s.set.List() {
		destinationRuleList = append(destinationRuleList, obj.(*networking_istio_io_v1alpha3.DestinationRule))
	}
	return destinationRuleList
}

func (s destinationRuleSet) Map() map[string]*networking_istio_io_v1alpha3.DestinationRule {
	newMap := map[string]*networking_istio_io_v1alpha3.DestinationRule{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*networking_istio_io_v1alpha3.DestinationRule)
	}
	return newMap
}

func (s destinationRuleSet) Insert(
	destinationRuleList ...*networking_istio_io_v1alpha3.DestinationRule,
) {
	for _, obj := range destinationRuleList {
		s.set.Insert(obj)
	}
}

func (s destinationRuleSet) Has(destinationRule *networking_istio_io_v1alpha3.DestinationRule) bool {
	return s.set.Has(destinationRule)
}

func (s destinationRuleSet) Equal(
	destinationRuleSet DestinationRuleSet,
) bool {
	return s.set.Equal(makeGenericDestinationRuleSet(destinationRuleSet.List()))
}

func (s destinationRuleSet) Delete(DestinationRule *networking_istio_io_v1alpha3.DestinationRule) {
	s.set.Delete(DestinationRule)
}

func (s destinationRuleSet) Union(set DestinationRuleSet) DestinationRuleSet {
	return NewDestinationRuleSet(append(s.List(), set.List()...)...)
}

func (s destinationRuleSet) Difference(set DestinationRuleSet) DestinationRuleSet {
	newSet := s.set.Difference(makeGenericDestinationRuleSet(set.List()))
	return destinationRuleSet{set: newSet}
}

func (s destinationRuleSet) Intersection(set DestinationRuleSet) DestinationRuleSet {
	newSet := s.set.Intersection(makeGenericDestinationRuleSet(set.List()))
	var destinationRuleList []*networking_istio_io_v1alpha3.DestinationRule
	for _, obj := range newSet.List() {
		destinationRuleList = append(destinationRuleList, obj.(*networking_istio_io_v1alpha3.DestinationRule))
	}
	return NewDestinationRuleSet(destinationRuleList...)
}

func (s destinationRuleSet) Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.DestinationRule, error) {
	obj, err := s.set.Find(&networking_istio_io_v1alpha3.DestinationRule{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*networking_istio_io_v1alpha3.DestinationRule), nil
}

type EnvoyFilterSet interface {
	Keys() sets.String
	List() []*networking_istio_io_v1alpha3.EnvoyFilter
	Map() map[string]*networking_istio_io_v1alpha3.EnvoyFilter
	Insert(envoyFilter ...*networking_istio_io_v1alpha3.EnvoyFilter)
	Equal(envoyFilterSet EnvoyFilterSet) bool
	Has(envoyFilter *networking_istio_io_v1alpha3.EnvoyFilter) bool
	Delete(envoyFilter *networking_istio_io_v1alpha3.EnvoyFilter)
	Union(set EnvoyFilterSet) EnvoyFilterSet
	Difference(set EnvoyFilterSet) EnvoyFilterSet
	Intersection(set EnvoyFilterSet) EnvoyFilterSet
	Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.EnvoyFilter, error)
}

func makeGenericEnvoyFilterSet(envoyFilterList []*networking_istio_io_v1alpha3.EnvoyFilter) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range envoyFilterList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type envoyFilterSet struct {
	set sksets.ResourceSet
}

func NewEnvoyFilterSet(envoyFilterList ...*networking_istio_io_v1alpha3.EnvoyFilter) EnvoyFilterSet {
	return &envoyFilterSet{set: makeGenericEnvoyFilterSet(envoyFilterList)}
}

func (s envoyFilterSet) Keys() sets.String {
	return s.set.Keys()
}

func (s envoyFilterSet) List() []*networking_istio_io_v1alpha3.EnvoyFilter {
	var envoyFilterList []*networking_istio_io_v1alpha3.EnvoyFilter
	for _, obj := range s.set.List() {
		envoyFilterList = append(envoyFilterList, obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
	}
	return envoyFilterList
}

func (s envoyFilterSet) Map() map[string]*networking_istio_io_v1alpha3.EnvoyFilter {
	newMap := map[string]*networking_istio_io_v1alpha3.EnvoyFilter{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*networking_istio_io_v1alpha3.EnvoyFilter)
	}
	return newMap
}

func (s envoyFilterSet) Insert(
	envoyFilterList ...*networking_istio_io_v1alpha3.EnvoyFilter,
) {
	for _, obj := range envoyFilterList {
		s.set.Insert(obj)
	}
}

func (s envoyFilterSet) Has(envoyFilter *networking_istio_io_v1alpha3.EnvoyFilter) bool {
	return s.set.Has(envoyFilter)
}

func (s envoyFilterSet) Equal(
	envoyFilterSet EnvoyFilterSet,
) bool {
	return s.set.Equal(makeGenericEnvoyFilterSet(envoyFilterSet.List()))
}

func (s envoyFilterSet) Delete(EnvoyFilter *networking_istio_io_v1alpha3.EnvoyFilter) {
	s.set.Delete(EnvoyFilter)
}

func (s envoyFilterSet) Union(set EnvoyFilterSet) EnvoyFilterSet {
	return NewEnvoyFilterSet(append(s.List(), set.List()...)...)
}

func (s envoyFilterSet) Difference(set EnvoyFilterSet) EnvoyFilterSet {
	newSet := s.set.Difference(makeGenericEnvoyFilterSet(set.List()))
	return envoyFilterSet{set: newSet}
}

func (s envoyFilterSet) Intersection(set EnvoyFilterSet) EnvoyFilterSet {
	newSet := s.set.Intersection(makeGenericEnvoyFilterSet(set.List()))
	var envoyFilterList []*networking_istio_io_v1alpha3.EnvoyFilter
	for _, obj := range newSet.List() {
		envoyFilterList = append(envoyFilterList, obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
	}
	return NewEnvoyFilterSet(envoyFilterList...)
}

func (s envoyFilterSet) Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.EnvoyFilter, error) {
	obj, err := s.set.Find(&networking_istio_io_v1alpha3.EnvoyFilter{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*networking_istio_io_v1alpha3.EnvoyFilter), nil
}

type GatewaySet interface {
	Keys() sets.String
	List() []*networking_istio_io_v1alpha3.Gateway
	Map() map[string]*networking_istio_io_v1alpha3.Gateway
	Insert(gateway ...*networking_istio_io_v1alpha3.Gateway)
	Equal(gatewaySet GatewaySet) bool
	Has(gateway *networking_istio_io_v1alpha3.Gateway) bool
	Delete(gateway *networking_istio_io_v1alpha3.Gateway)
	Union(set GatewaySet) GatewaySet
	Difference(set GatewaySet) GatewaySet
	Intersection(set GatewaySet) GatewaySet
	Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.Gateway, error)
}

func makeGenericGatewaySet(gatewayList []*networking_istio_io_v1alpha3.Gateway) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range gatewayList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type gatewaySet struct {
	set sksets.ResourceSet
}

func NewGatewaySet(gatewayList ...*networking_istio_io_v1alpha3.Gateway) GatewaySet {
	return &gatewaySet{set: makeGenericGatewaySet(gatewayList)}
}

func (s gatewaySet) Keys() sets.String {
	return s.set.Keys()
}

func (s gatewaySet) List() []*networking_istio_io_v1alpha3.Gateway {
	var gatewayList []*networking_istio_io_v1alpha3.Gateway
	for _, obj := range s.set.List() {
		gatewayList = append(gatewayList, obj.(*networking_istio_io_v1alpha3.Gateway))
	}
	return gatewayList
}

func (s gatewaySet) Map() map[string]*networking_istio_io_v1alpha3.Gateway {
	newMap := map[string]*networking_istio_io_v1alpha3.Gateway{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*networking_istio_io_v1alpha3.Gateway)
	}
	return newMap
}

func (s gatewaySet) Insert(
	gatewayList ...*networking_istio_io_v1alpha3.Gateway,
) {
	for _, obj := range gatewayList {
		s.set.Insert(obj)
	}
}

func (s gatewaySet) Has(gateway *networking_istio_io_v1alpha3.Gateway) bool {
	return s.set.Has(gateway)
}

func (s gatewaySet) Equal(
	gatewaySet GatewaySet,
) bool {
	return s.set.Equal(makeGenericGatewaySet(gatewaySet.List()))
}

func (s gatewaySet) Delete(Gateway *networking_istio_io_v1alpha3.Gateway) {
	s.set.Delete(Gateway)
}

func (s gatewaySet) Union(set GatewaySet) GatewaySet {
	return NewGatewaySet(append(s.List(), set.List()...)...)
}

func (s gatewaySet) Difference(set GatewaySet) GatewaySet {
	newSet := s.set.Difference(makeGenericGatewaySet(set.List()))
	return gatewaySet{set: newSet}
}

func (s gatewaySet) Intersection(set GatewaySet) GatewaySet {
	newSet := s.set.Intersection(makeGenericGatewaySet(set.List()))
	var gatewayList []*networking_istio_io_v1alpha3.Gateway
	for _, obj := range newSet.List() {
		gatewayList = append(gatewayList, obj.(*networking_istio_io_v1alpha3.Gateway))
	}
	return NewGatewaySet(gatewayList...)
}

func (s gatewaySet) Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.Gateway, error) {
	obj, err := s.set.Find(&networking_istio_io_v1alpha3.Gateway{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*networking_istio_io_v1alpha3.Gateway), nil
}

type ServiceEntrySet interface {
	Keys() sets.String
	List() []*networking_istio_io_v1alpha3.ServiceEntry
	Map() map[string]*networking_istio_io_v1alpha3.ServiceEntry
	Insert(serviceEntry ...*networking_istio_io_v1alpha3.ServiceEntry)
	Equal(serviceEntrySet ServiceEntrySet) bool
	Has(serviceEntry *networking_istio_io_v1alpha3.ServiceEntry) bool
	Delete(serviceEntry *networking_istio_io_v1alpha3.ServiceEntry)
	Union(set ServiceEntrySet) ServiceEntrySet
	Difference(set ServiceEntrySet) ServiceEntrySet
	Intersection(set ServiceEntrySet) ServiceEntrySet
	Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.ServiceEntry, error)
}

func makeGenericServiceEntrySet(serviceEntryList []*networking_istio_io_v1alpha3.ServiceEntry) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range serviceEntryList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type serviceEntrySet struct {
	set sksets.ResourceSet
}

func NewServiceEntrySet(serviceEntryList ...*networking_istio_io_v1alpha3.ServiceEntry) ServiceEntrySet {
	return &serviceEntrySet{set: makeGenericServiceEntrySet(serviceEntryList)}
}

func (s serviceEntrySet) Keys() sets.String {
	return s.set.Keys()
}

func (s serviceEntrySet) List() []*networking_istio_io_v1alpha3.ServiceEntry {
	var serviceEntryList []*networking_istio_io_v1alpha3.ServiceEntry
	for _, obj := range s.set.List() {
		serviceEntryList = append(serviceEntryList, obj.(*networking_istio_io_v1alpha3.ServiceEntry))
	}
	return serviceEntryList
}

func (s serviceEntrySet) Map() map[string]*networking_istio_io_v1alpha3.ServiceEntry {
	newMap := map[string]*networking_istio_io_v1alpha3.ServiceEntry{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*networking_istio_io_v1alpha3.ServiceEntry)
	}
	return newMap
}

func (s serviceEntrySet) Insert(
	serviceEntryList ...*networking_istio_io_v1alpha3.ServiceEntry,
) {
	for _, obj := range serviceEntryList {
		s.set.Insert(obj)
	}
}

func (s serviceEntrySet) Has(serviceEntry *networking_istio_io_v1alpha3.ServiceEntry) bool {
	return s.set.Has(serviceEntry)
}

func (s serviceEntrySet) Equal(
	serviceEntrySet ServiceEntrySet,
) bool {
	return s.set.Equal(makeGenericServiceEntrySet(serviceEntrySet.List()))
}

func (s serviceEntrySet) Delete(ServiceEntry *networking_istio_io_v1alpha3.ServiceEntry) {
	s.set.Delete(ServiceEntry)
}

func (s serviceEntrySet) Union(set ServiceEntrySet) ServiceEntrySet {
	return NewServiceEntrySet(append(s.List(), set.List()...)...)
}

func (s serviceEntrySet) Difference(set ServiceEntrySet) ServiceEntrySet {
	newSet := s.set.Difference(makeGenericServiceEntrySet(set.List()))
	return serviceEntrySet{set: newSet}
}

func (s serviceEntrySet) Intersection(set ServiceEntrySet) ServiceEntrySet {
	newSet := s.set.Intersection(makeGenericServiceEntrySet(set.List()))
	var serviceEntryList []*networking_istio_io_v1alpha3.ServiceEntry
	for _, obj := range newSet.List() {
		serviceEntryList = append(serviceEntryList, obj.(*networking_istio_io_v1alpha3.ServiceEntry))
	}
	return NewServiceEntrySet(serviceEntryList...)
}

func (s serviceEntrySet) Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.ServiceEntry, error) {
	obj, err := s.set.Find(&networking_istio_io_v1alpha3.ServiceEntry{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*networking_istio_io_v1alpha3.ServiceEntry), nil
}

type VirtualServiceSet interface {
	Keys() sets.String
	List() []*networking_istio_io_v1alpha3.VirtualService
	Map() map[string]*networking_istio_io_v1alpha3.VirtualService
	Insert(virtualService ...*networking_istio_io_v1alpha3.VirtualService)
	Equal(virtualServiceSet VirtualServiceSet) bool
	Has(virtualService *networking_istio_io_v1alpha3.VirtualService) bool
	Delete(virtualService *networking_istio_io_v1alpha3.VirtualService)
	Union(set VirtualServiceSet) VirtualServiceSet
	Difference(set VirtualServiceSet) VirtualServiceSet
	Intersection(set VirtualServiceSet) VirtualServiceSet
	Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.VirtualService, error)
}

func makeGenericVirtualServiceSet(virtualServiceList []*networking_istio_io_v1alpha3.VirtualService) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range virtualServiceList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type virtualServiceSet struct {
	set sksets.ResourceSet
}

func NewVirtualServiceSet(virtualServiceList ...*networking_istio_io_v1alpha3.VirtualService) VirtualServiceSet {
	return &virtualServiceSet{set: makeGenericVirtualServiceSet(virtualServiceList)}
}

func (s virtualServiceSet) Keys() sets.String {
	return s.set.Keys()
}

func (s virtualServiceSet) List() []*networking_istio_io_v1alpha3.VirtualService {
	var virtualServiceList []*networking_istio_io_v1alpha3.VirtualService
	for _, obj := range s.set.List() {
		virtualServiceList = append(virtualServiceList, obj.(*networking_istio_io_v1alpha3.VirtualService))
	}
	return virtualServiceList
}

func (s virtualServiceSet) Map() map[string]*networking_istio_io_v1alpha3.VirtualService {
	newMap := map[string]*networking_istio_io_v1alpha3.VirtualService{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*networking_istio_io_v1alpha3.VirtualService)
	}
	return newMap
}

func (s virtualServiceSet) Insert(
	virtualServiceList ...*networking_istio_io_v1alpha3.VirtualService,
) {
	for _, obj := range virtualServiceList {
		s.set.Insert(obj)
	}
}

func (s virtualServiceSet) Has(virtualService *networking_istio_io_v1alpha3.VirtualService) bool {
	return s.set.Has(virtualService)
}

func (s virtualServiceSet) Equal(
	virtualServiceSet VirtualServiceSet,
) bool {
	return s.set.Equal(makeGenericVirtualServiceSet(virtualServiceSet.List()))
}

func (s virtualServiceSet) Delete(VirtualService *networking_istio_io_v1alpha3.VirtualService) {
	s.set.Delete(VirtualService)
}

func (s virtualServiceSet) Union(set VirtualServiceSet) VirtualServiceSet {
	return NewVirtualServiceSet(append(s.List(), set.List()...)...)
}

func (s virtualServiceSet) Difference(set VirtualServiceSet) VirtualServiceSet {
	newSet := s.set.Difference(makeGenericVirtualServiceSet(set.List()))
	return virtualServiceSet{set: newSet}
}

func (s virtualServiceSet) Intersection(set VirtualServiceSet) VirtualServiceSet {
	newSet := s.set.Intersection(makeGenericVirtualServiceSet(set.List()))
	var virtualServiceList []*networking_istio_io_v1alpha3.VirtualService
	for _, obj := range newSet.List() {
		virtualServiceList = append(virtualServiceList, obj.(*networking_istio_io_v1alpha3.VirtualService))
	}
	return NewVirtualServiceSet(virtualServiceList...)
}

func (s virtualServiceSet) Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.VirtualService, error) {
	obj, err := s.set.Find(&networking_istio_io_v1alpha3.VirtualService{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*networking_istio_io_v1alpha3.VirtualService), nil
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha3sets

import (
	networking_istio_io_v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type EnvoyFilterSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	List(filterResource ...func(*networking_istio_io_v1alpha3.EnvoyFilter) bool) []*networking_istio_io_v1alpha3.EnvoyFilter
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	// The filter function should return false to keep the resource, true to drop it.
	UnsortedList(filterResource ...func(*networking_istio_io_v1alpha3.EnvoyFilter) bool) []*networking_istio_io_v1alpha3.EnvoyFilter
	// Return the Set as a map of key to resource.
	Map() map[string]*networking_istio_io_v1alpha3.EnvoyFilter
	// Insert a resource into the set.
	Insert(envoyFilter ...*networking_istio_io_v1alpha3.EnvoyFilter)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(envoyFilterSet EnvoyFilterSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(envoyFilter ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(envoyFilter ezkube.ResourceId)
	// Return the union with the provided set
	Union(set EnvoyFilterSet) EnvoyFilterSet
	// Return the difference with the provided set
	Difference(set EnvoyFilterSet) EnvoyFilterSet
	// Return the intersection with the provided set
	Intersection(set EnvoyFilterSet) EnvoyFilterSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.EnvoyFilter, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another EnvoyFilterSet
	Delta(newSet EnvoyFilterSet) sksets.ResourceDelta
	// Create a deep copy of the current EnvoyFilterSet
	Clone() EnvoyFilterSet
}

func makeGenericEnvoyFilterSet(envoyFilterList []*networking_istio_io_v1alpha3.EnvoyFilter) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range envoyFilterList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type envoyFilterSet struct {
	set sksets.ResourceSet
}

func NewEnvoyFilterSet(envoyFilterList ...*networking_istio_io_v1alpha3.EnvoyFilter) EnvoyFilterSet {
	return &envoyFilterSet{set: makeGenericEnvoyFilterSet(envoyFilterList)}
}

func NewEnvoyFilterSetFromList(envoyFilterList *networking_istio_io_v1alpha3.EnvoyFilterList) EnvoyFilterSet {
	list := make([]*networking_istio_io_v1alpha3.EnvoyFilter, 0, len(envoyFilterList.Items))
	for idx := range envoyFilterList.Items {
		list = append(list, envoyFilterList.Items[idx])
	}
	return &envoyFilterSet{set: makeGenericEnvoyFilterSet(list)}
}

func (s *envoyFilterSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *envoyFilterSet) List(filterResource ...func(*networking_istio_io_v1alpha3.EnvoyFilter) bool) []*networking_istio_io_v1alpha3.EnvoyFilter {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
		})
	}

	objs := s.Generic().List(genericFilters...)
	envoyFilterList := make([]*networking_istio_io_v1alpha3.EnvoyFilter, 0, len(objs))
	for _, obj := range objs {
		envoyFilterList = append(envoyFilterList, obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
	}
	return envoyFilterList
}

func (s *envoyFilterSet) UnsortedList(filterResource ...func(*networking_istio_io_v1alpha3.EnvoyFilter) bool) []*networking_istio_io_v1alpha3.EnvoyFilter {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
		})
	}

	var envoyFilterList []*networking_istio_io_v1alpha3.EnvoyFilter
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		envoyFilterList = append(envoyFilterList, obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
	}
	return envoyFilterList
}

func (s *envoyFilterSet) Map() map[string]*networking_istio_io_v1alpha3.EnvoyFilter {
	if s == nil {
		return nil
	}

	newMap := map[string]*networking_istio_io_v1alpha3.EnvoyFilter{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*networking_istio_io_v1alpha3.EnvoyFilter)
	}
	return newMap
}

func (s *envoyFilterSet) Insert(
	envoyFilterList ...*networking_istio_io_v1alpha3.EnvoyFilter,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range envoyFilterList {
		s.Generic().Insert(obj)
	}
}

func (s *envoyFilterSet) Has(envoyFilter ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(envoyFilter)
}

func (s *envoyFilterSet) Equal(
	envoyFilterSet EnvoyFilterSet,
) bool {
	if s == nil {
		return envoyFilterSet == nil
	}
	return s.Generic().Equal(envoyFilterSet.Generic())
}

func (s *envoyFilterSet) Delete(EnvoyFilter ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(EnvoyFilter)
}

func (s *envoyFilterSet) Union(set EnvoyFilterSet) EnvoyFilterSet {
	if s == nil {
		return set
	}
	return &envoyFilterMergedSet{sets: []sksets.ResourceSet{s.Generic(), set.Generic()}}
}

func (s *envoyFilterSet) Difference(set EnvoyFilterSet) EnvoyFilterSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &envoyFilterSet{set: newSet}
}

func (s *envoyFilterSet) Intersection(set EnvoyFilterSet) EnvoyFilterSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var envoyFilterList []*networking_istio_io_v1alpha3.EnvoyFilter
	for _, obj := range newSet.List() {
		envoyFilterList = append(envoyFilterList, obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
	}
	return NewEnvoyFilterSet(envoyFilterList...)
}

func (s *envoyFilterSet) Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.EnvoyFilter, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find EnvoyFilter %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&networking_istio_io_v1alpha3.EnvoyFilter{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*networking_istio_io_v1alpha3.EnvoyFilter), nil
}

func (s *envoyFilterSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *envoyFilterSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *envoyFilterSet) Delta(newSet EnvoyFilterSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

func (s *envoyFilterSet) Clone() EnvoyFilterSet {
	if s == nil {
		return nil
	}
	return &envoyFilterMergedSet{sets: []sksets.ResourceSet{s.Generic()}}
}

type envoyFilterMergedSet struct {
	sets []sksets.ResourceSet
}

func NewEnvoyFilterMergedSet(envoyFilterList ...*networking_istio_io_v1alpha3.EnvoyFilter) EnvoyFilterSet {
	return &envoyFilterMergedSet{sets: []sksets.ResourceSet{makeGenericEnvoyFilterSet(envoyFilterList)}}
}

func NewEnvoyFilterMergedSetFromList(envoyFilterList *networking_istio_io_v1alpha3.EnvoyFilterList) EnvoyFilterSet {
	list := make([]*networking_istio_io_v1alpha3.EnvoyFilter, 0, len(envoyFilterList.Items))
	for idx := range envoyFilterList.Items {
		list = append(list, envoyFilterList.Items[idx])
	}
	return &envoyFilterMergedSet{sets: []sksets.ResourceSet{makeGenericEnvoyFilterSet(list)}}
}

func (s *envoyFilterMergedSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	toRet := sets.String{}
	for _, set := range s.sets {
		toRet = toRet.Union(set.Keys())
	}
	return toRet
}

func (s *envoyFilterMergedSet) List(filterResource ...func(*networking_istio_io_v1alpha3.EnvoyFilter) bool) []*networking_istio_io_v1alpha3.EnvoyFilter {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
		})
	}
	envoyFilterList := []*networking_istio_io_v1alpha3.EnvoyFilter{}
	for _, set := range s.sets {
		for _, obj := range set.List(genericFilters...) {
			envoyFilterList = append(envoyFilterList, obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
		}
	}
	return envoyFilterList
}

func (s *envoyFilterMergedSet) UnsortedList(filterResource ...func(*networking_istio_io_v1alpha3.EnvoyFilter) bool) []*networking_istio_io_v1alpha3.EnvoyFilter {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		filter := filter
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
		})
	}

	envoyFilterList := []*networking_istio_io_v1alpha3.EnvoyFilter{}
	for _, set := range s.sets {
		for _, obj := range set.UnsortedList(genericFilters...) {
			envoyFilterList = append(envoyFilterList, obj.(*networking_istio_io_v1alpha3.EnvoyFilter))
		}
	}
	return envoyFilterList
}

func (s *envoyFilterMergedSet) Map() map[string]*networking_istio_io_v1alpha3.EnvoyFilter {
	if s == nil {
		return nil
	}

	newMap := map[string]*networking_istio_io_v1alpha3.EnvoyFilter{}
	for _, set := range s.sets {
		for k, v := range set.Map() {
			newMap[k] = v.(*networking_istio_io_v1alpha3.EnvoyFilter)
		}
	}
	return newMap
}

func (s *envoyFilterMergedSet) Insert(
	envoyFilterList ...*networking_istio_io_v1alpha3.EnvoyFilter,
) {
	if s == nil {
	}
	if len(s.sets) == 0 {
		s.sets = append(s.sets, makeGenericEnvoyFilterSet(envoyFilterList))
	}
	for _, obj := range envoyFilterList {
		inserted := false
		for _, set := range s.sets {
			if set.Has(obj) {
				set.Insert(obj)
				inserted = true
				break
			}
		}
		if !inserted {
			s.sets[0].Insert(obj)
		}
	}
}

func (s *envoyFilterMergedSet) Has(envoyFilter ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	for _, set := range s.sets {
		if set.Has(envoyFilter) {
			return true
		}
	}
	return false
}

func (s *envoyFilterMergedSet) Equal(
	envoyFilterSet EnvoyFilterSet,
) bool {
	panic("unimplemented")
}

func (s *envoyFilterMergedSet) Delete(EnvoyFilter ezkube.ResourceId) {
	for _, set := range s.sets {
		set.Delete(EnvoyFilter)
	}
}

func (s *envoyFilterMergedSet) Union(set EnvoyFilterSet) EnvoyFilterSet {
	if s == nil {
		return set
	}
	return &envoyFilterMergedSet{sets: append(s.sets, set.Generic())}
}

func (s *envoyFilterMergedSet) Difference(set EnvoyFilterSet) EnvoyFilterSet {
	panic("unimplemented")
}

func (s *envoyFilterMergedSet) Intersection(set EnvoyFilterSet) EnvoyFilterSet {
	panic("unimplemented")
}

func (s *envoyFilterMergedSet) Find(id ezkube.ResourceId) (*networking_istio_io_v1alpha3.EnvoyFilter, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find EnvoyFilter %v", sksets.Key(id))
	}

	var err error
	for _, set := range s.sets {
		var obj ezkube.ResourceId
		obj, err = set.Find(&networking_istio_io_v1alpha3.EnvoyFilter{}, id)
		if err == nil {
			return obj.(*networking_istio_io_v1alpha3.EnvoyFilter), nil
		}
	}

	return nil, err
}

func (s *envoyFilterMergedSet) Length() int {
	if s == nil {
		return 0
	}
	totalLen := 0
	for _, set := range s.sets {
		totalLen += set.Length()
	}
	return totalLen
}

func (s *envoyFilterMergedSet) Generic() sksets.ResourceSet {
	panic("unimplemented")
}

func (s *envoyFilterMergedSet) Delta(newSet EnvoyFilterSet) sksets.ResourceDelta {
	panic("unimplemented")
}

func (s *envoyFilterMergedSet) Clone() EnvoyFilterSet {
	if s == nil {
		return nil
	}
	return &envoyFilterMergedSet{sets: s.sets[:]}
}

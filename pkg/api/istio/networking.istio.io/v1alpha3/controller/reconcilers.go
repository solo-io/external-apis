// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	networking_istio_io_v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the EnvoyFilter Resource.
// implemented by the user
type EnvoyFilterReconciler interface {
	ReconcileEnvoyFilter(obj *networking_istio_io_v1alpha3.EnvoyFilter) (reconcile.Result, error)
}

// Reconcile deletion events for the EnvoyFilter Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type EnvoyFilterDeletionReconciler interface {
	ReconcileEnvoyFilterDeletion(req reconcile.Request) error
}

type EnvoyFilterReconcilerFuncs struct {
	OnReconcileEnvoyFilter         func(obj *networking_istio_io_v1alpha3.EnvoyFilter) (reconcile.Result, error)
	OnReconcileEnvoyFilterDeletion func(req reconcile.Request) error
}

func (f *EnvoyFilterReconcilerFuncs) ReconcileEnvoyFilter(obj *networking_istio_io_v1alpha3.EnvoyFilter) (reconcile.Result, error) {
	if f.OnReconcileEnvoyFilter == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileEnvoyFilter(obj)
}

func (f *EnvoyFilterReconcilerFuncs) ReconcileEnvoyFilterDeletion(req reconcile.Request) error {
	if f.OnReconcileEnvoyFilterDeletion == nil {
		return nil
	}
	return f.OnReconcileEnvoyFilterDeletion(req)
}

// Reconcile and finalize the EnvoyFilter Resource
// implemented by the user
type EnvoyFilterFinalizer interface {
	EnvoyFilterReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	EnvoyFilterFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeEnvoyFilter(obj *networking_istio_io_v1alpha3.EnvoyFilter) error
}

type EnvoyFilterReconcileLoop interface {
	RunEnvoyFilterReconciler(ctx context.Context, rec EnvoyFilterReconciler, predicates ...predicate.Predicate) error
}

type envoyFilterReconcileLoop struct {
	loop reconcile.Loop
}

func NewEnvoyFilterReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) EnvoyFilterReconcileLoop {
	return &envoyFilterReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &networking_istio_io_v1alpha3.EnvoyFilter{}, options),
	}
}

func (c *envoyFilterReconcileLoop) RunEnvoyFilterReconciler(ctx context.Context, reconciler EnvoyFilterReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericEnvoyFilterReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(EnvoyFilterFinalizer); ok {
		reconcilerWrapper = genericEnvoyFilterFinalizer{
			genericEnvoyFilterReconciler: genericReconciler,
			finalizingReconciler:         finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericEnvoyFilterHandler implements a generic reconcile.Reconciler
type genericEnvoyFilterReconciler struct {
	reconciler EnvoyFilterReconciler
}

func (r genericEnvoyFilterReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_istio_io_v1alpha3.EnvoyFilter)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: EnvoyFilter handler received event for %T", object)
	}
	return r.reconciler.ReconcileEnvoyFilter(obj)
}

func (r genericEnvoyFilterReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(EnvoyFilterDeletionReconciler); ok {
		return deletionReconciler.ReconcileEnvoyFilterDeletion(request)
	}
	return nil
}

// genericEnvoyFilterFinalizer implements a generic reconcile.FinalizingReconciler
type genericEnvoyFilterFinalizer struct {
	genericEnvoyFilterReconciler
	finalizingReconciler EnvoyFilterFinalizer
}

func (r genericEnvoyFilterFinalizer) FinalizerName() string {
	return r.finalizingReconciler.EnvoyFilterFinalizerName()
}

func (r genericEnvoyFilterFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*networking_istio_io_v1alpha3.EnvoyFilter)
	if !ok {
		return errors.Errorf("internal error: EnvoyFilter handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeEnvoyFilter(obj)
}

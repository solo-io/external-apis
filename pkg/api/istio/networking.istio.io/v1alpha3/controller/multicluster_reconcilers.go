// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	networking_istio_io_v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the EnvoyFilter Resource across clusters.
// implemented by the user
type MulticlusterEnvoyFilterReconciler interface {
	ReconcileEnvoyFilter(clusterName string, obj *networking_istio_io_v1alpha3.EnvoyFilter) (reconcile.Result, error)
}

// Reconcile deletion events for the EnvoyFilter Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterEnvoyFilterDeletionReconciler interface {
	ReconcileEnvoyFilterDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterEnvoyFilterReconcilerFuncs struct {
	OnReconcileEnvoyFilter         func(clusterName string, obj *networking_istio_io_v1alpha3.EnvoyFilter) (reconcile.Result, error)
	OnReconcileEnvoyFilterDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterEnvoyFilterReconcilerFuncs) ReconcileEnvoyFilter(clusterName string, obj *networking_istio_io_v1alpha3.EnvoyFilter) (reconcile.Result, error) {
	if f.OnReconcileEnvoyFilter == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileEnvoyFilter(clusterName, obj)
}

func (f *MulticlusterEnvoyFilterReconcilerFuncs) ReconcileEnvoyFilterDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileEnvoyFilterDeletion == nil {
		return nil
	}
	return f.OnReconcileEnvoyFilterDeletion(clusterName, req)
}

type MulticlusterEnvoyFilterReconcileLoop interface {
	// AddMulticlusterEnvoyFilterReconciler adds a MulticlusterEnvoyFilterReconciler to the MulticlusterEnvoyFilterReconcileLoop.
	AddMulticlusterEnvoyFilterReconciler(ctx context.Context, rec MulticlusterEnvoyFilterReconciler, predicates ...predicate.Predicate)
}

type multiclusterEnvoyFilterReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterEnvoyFilterReconcileLoop) AddMulticlusterEnvoyFilterReconciler(ctx context.Context, rec MulticlusterEnvoyFilterReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericEnvoyFilterMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterEnvoyFilterReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterEnvoyFilterReconcileLoop {
	return &multiclusterEnvoyFilterReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &networking_istio_io_v1alpha3.EnvoyFilter{}, options)}
}

type genericEnvoyFilterMulticlusterReconciler struct {
	reconciler MulticlusterEnvoyFilterReconciler
}

func (g genericEnvoyFilterMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterEnvoyFilterDeletionReconciler); ok {
		return deletionReconciler.ReconcileEnvoyFilterDeletion(cluster, req)
	}
	return nil
}

func (g genericEnvoyFilterMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*networking_istio_io_v1alpha3.EnvoyFilter)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: EnvoyFilter handler received event for %T", object)
	}
	return g.reconciler.ReconcileEnvoyFilter(cluster, obj)
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	networking_istio_io_v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the EnvoyFilter Resource
// DEPRECATED: Prefer reconciler pattern.
type EnvoyFilterEventHandler interface {
	CreateEnvoyFilter(obj *networking_istio_io_v1alpha3.EnvoyFilter) error
	UpdateEnvoyFilter(old, new *networking_istio_io_v1alpha3.EnvoyFilter) error
	DeleteEnvoyFilter(obj *networking_istio_io_v1alpha3.EnvoyFilter) error
	GenericEnvoyFilter(obj *networking_istio_io_v1alpha3.EnvoyFilter) error
}

type EnvoyFilterEventHandlerFuncs struct {
	OnCreate  func(obj *networking_istio_io_v1alpha3.EnvoyFilter) error
	OnUpdate  func(old, new *networking_istio_io_v1alpha3.EnvoyFilter) error
	OnDelete  func(obj *networking_istio_io_v1alpha3.EnvoyFilter) error
	OnGeneric func(obj *networking_istio_io_v1alpha3.EnvoyFilter) error
}

func (f *EnvoyFilterEventHandlerFuncs) CreateEnvoyFilter(obj *networking_istio_io_v1alpha3.EnvoyFilter) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *EnvoyFilterEventHandlerFuncs) DeleteEnvoyFilter(obj *networking_istio_io_v1alpha3.EnvoyFilter) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *EnvoyFilterEventHandlerFuncs) UpdateEnvoyFilter(objOld, objNew *networking_istio_io_v1alpha3.EnvoyFilter) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *EnvoyFilterEventHandlerFuncs) GenericEnvoyFilter(obj *networking_istio_io_v1alpha3.EnvoyFilter) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type EnvoyFilterEventWatcher interface {
	AddEventHandler(ctx context.Context, h EnvoyFilterEventHandler, predicates ...predicate.Predicate) error
}

type envoyFilterEventWatcher struct {
	watcher events.EventWatcher
}

func NewEnvoyFilterEventWatcher(name string, mgr manager.Manager) EnvoyFilterEventWatcher {
	return &envoyFilterEventWatcher{
		watcher: events.NewWatcher(name, mgr, &networking_istio_io_v1alpha3.EnvoyFilter{}),
	}
}

func (c *envoyFilterEventWatcher) AddEventHandler(ctx context.Context, h EnvoyFilterEventHandler, predicates ...predicate.Predicate) error {
	handler := genericEnvoyFilterHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericEnvoyFilterHandler implements a generic events.EventHandler
type genericEnvoyFilterHandler struct {
	handler EnvoyFilterEventHandler
}

func (h genericEnvoyFilterHandler) Create(object client.Object) error {
	obj, ok := object.(*networking_istio_io_v1alpha3.EnvoyFilter)
	if !ok {
		return errors.Errorf("internal error: EnvoyFilter handler received event for %T", object)
	}
	return h.handler.CreateEnvoyFilter(obj)
}

func (h genericEnvoyFilterHandler) Delete(object client.Object) error {
	obj, ok := object.(*networking_istio_io_v1alpha3.EnvoyFilter)
	if !ok {
		return errors.Errorf("internal error: EnvoyFilter handler received event for %T", object)
	}
	return h.handler.DeleteEnvoyFilter(obj)
}

func (h genericEnvoyFilterHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*networking_istio_io_v1alpha3.EnvoyFilter)
	if !ok {
		return errors.Errorf("internal error: EnvoyFilter handler received event for %T", old)
	}
	objNew, ok := new.(*networking_istio_io_v1alpha3.EnvoyFilter)
	if !ok {
		return errors.Errorf("internal error: EnvoyFilter handler received event for %T", new)
	}
	return h.handler.UpdateEnvoyFilter(objOld, objNew)
}

func (h genericEnvoyFilterHandler) Generic(object client.Object) error {
	obj, ok := object.(*networking_istio_io_v1alpha3.EnvoyFilter)
	if !ok {
		return errors.Errorf("internal error: EnvoyFilter handler received event for %T", object)
	}
	return h.handler.GenericEnvoyFilter(obj)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/controller"
	v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockEnvoyFilterEventHandler is a mock of EnvoyFilterEventHandler interface.
type MockEnvoyFilterEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyFilterEventHandlerMockRecorder
}

// MockEnvoyFilterEventHandlerMockRecorder is the mock recorder for MockEnvoyFilterEventHandler.
type MockEnvoyFilterEventHandlerMockRecorder struct {
	mock *MockEnvoyFilterEventHandler
}

// NewMockEnvoyFilterEventHandler creates a new mock instance.
func NewMockEnvoyFilterEventHandler(ctrl *gomock.Controller) *MockEnvoyFilterEventHandler {
	mock := &MockEnvoyFilterEventHandler{ctrl: ctrl}
	mock.recorder = &MockEnvoyFilterEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyFilterEventHandler) EXPECT() *MockEnvoyFilterEventHandlerMockRecorder {
	return m.recorder
}

// CreateEnvoyFilter mocks base method.
func (m *MockEnvoyFilterEventHandler) CreateEnvoyFilter(obj *v1alpha3.EnvoyFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvoyFilter", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvoyFilter indicates an expected call of CreateEnvoyFilter.
func (mr *MockEnvoyFilterEventHandlerMockRecorder) CreateEnvoyFilter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterEventHandler)(nil).CreateEnvoyFilter), obj)
}

// DeleteEnvoyFilter mocks base method.
func (m *MockEnvoyFilterEventHandler) DeleteEnvoyFilter(obj *v1alpha3.EnvoyFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvoyFilter", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvoyFilter indicates an expected call of DeleteEnvoyFilter.
func (mr *MockEnvoyFilterEventHandlerMockRecorder) DeleteEnvoyFilter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterEventHandler)(nil).DeleteEnvoyFilter), obj)
}

// GenericEnvoyFilter mocks base method.
func (m *MockEnvoyFilterEventHandler) GenericEnvoyFilter(obj *v1alpha3.EnvoyFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericEnvoyFilter", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericEnvoyFilter indicates an expected call of GenericEnvoyFilter.
func (mr *MockEnvoyFilterEventHandlerMockRecorder) GenericEnvoyFilter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterEventHandler)(nil).GenericEnvoyFilter), obj)
}

// UpdateEnvoyFilter mocks base method.
func (m *MockEnvoyFilterEventHandler) UpdateEnvoyFilter(old, new *v1alpha3.EnvoyFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvoyFilter", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvoyFilter indicates an expected call of UpdateEnvoyFilter.
func (mr *MockEnvoyFilterEventHandlerMockRecorder) UpdateEnvoyFilter(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterEventHandler)(nil).UpdateEnvoyFilter), old, new)
}

// MockEnvoyFilterEventWatcher is a mock of EnvoyFilterEventWatcher interface.
type MockEnvoyFilterEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyFilterEventWatcherMockRecorder
}

// MockEnvoyFilterEventWatcherMockRecorder is the mock recorder for MockEnvoyFilterEventWatcher.
type MockEnvoyFilterEventWatcherMockRecorder struct {
	mock *MockEnvoyFilterEventWatcher
}

// NewMockEnvoyFilterEventWatcher creates a new mock instance.
func NewMockEnvoyFilterEventWatcher(ctrl *gomock.Controller) *MockEnvoyFilterEventWatcher {
	mock := &MockEnvoyFilterEventWatcher{ctrl: ctrl}
	mock.recorder = &MockEnvoyFilterEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyFilterEventWatcher) EXPECT() *MockEnvoyFilterEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockEnvoyFilterEventWatcher) AddEventHandler(ctx context.Context, h controller.EnvoyFilterEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockEnvoyFilterEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockEnvoyFilterEventWatcher)(nil).AddEventHandler), varargs...)
}

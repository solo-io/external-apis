// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockEnvoyFilterReconciler is a mock of EnvoyFilterReconciler interface.
type MockEnvoyFilterReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyFilterReconcilerMockRecorder
}

// MockEnvoyFilterReconcilerMockRecorder is the mock recorder for MockEnvoyFilterReconciler.
type MockEnvoyFilterReconcilerMockRecorder struct {
	mock *MockEnvoyFilterReconciler
}

// NewMockEnvoyFilterReconciler creates a new mock instance.
func NewMockEnvoyFilterReconciler(ctrl *gomock.Controller) *MockEnvoyFilterReconciler {
	mock := &MockEnvoyFilterReconciler{ctrl: ctrl}
	mock.recorder = &MockEnvoyFilterReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyFilterReconciler) EXPECT() *MockEnvoyFilterReconcilerMockRecorder {
	return m.recorder
}

// ReconcileEnvoyFilter mocks base method.
func (m *MockEnvoyFilterReconciler) ReconcileEnvoyFilter(obj *v1alpha3.EnvoyFilter) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileEnvoyFilter", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileEnvoyFilter indicates an expected call of ReconcileEnvoyFilter.
func (mr *MockEnvoyFilterReconcilerMockRecorder) ReconcileEnvoyFilter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterReconciler)(nil).ReconcileEnvoyFilter), obj)
}

// MockEnvoyFilterDeletionReconciler is a mock of EnvoyFilterDeletionReconciler interface.
type MockEnvoyFilterDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyFilterDeletionReconcilerMockRecorder
}

// MockEnvoyFilterDeletionReconcilerMockRecorder is the mock recorder for MockEnvoyFilterDeletionReconciler.
type MockEnvoyFilterDeletionReconcilerMockRecorder struct {
	mock *MockEnvoyFilterDeletionReconciler
}

// NewMockEnvoyFilterDeletionReconciler creates a new mock instance.
func NewMockEnvoyFilterDeletionReconciler(ctrl *gomock.Controller) *MockEnvoyFilterDeletionReconciler {
	mock := &MockEnvoyFilterDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockEnvoyFilterDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyFilterDeletionReconciler) EXPECT() *MockEnvoyFilterDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileEnvoyFilterDeletion mocks base method.
func (m *MockEnvoyFilterDeletionReconciler) ReconcileEnvoyFilterDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileEnvoyFilterDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileEnvoyFilterDeletion indicates an expected call of ReconcileEnvoyFilterDeletion.
func (mr *MockEnvoyFilterDeletionReconcilerMockRecorder) ReconcileEnvoyFilterDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileEnvoyFilterDeletion", reflect.TypeOf((*MockEnvoyFilterDeletionReconciler)(nil).ReconcileEnvoyFilterDeletion), req)
}

// MockEnvoyFilterFinalizer is a mock of EnvoyFilterFinalizer interface.
type MockEnvoyFilterFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyFilterFinalizerMockRecorder
}

// MockEnvoyFilterFinalizerMockRecorder is the mock recorder for MockEnvoyFilterFinalizer.
type MockEnvoyFilterFinalizerMockRecorder struct {
	mock *MockEnvoyFilterFinalizer
}

// NewMockEnvoyFilterFinalizer creates a new mock instance.
func NewMockEnvoyFilterFinalizer(ctrl *gomock.Controller) *MockEnvoyFilterFinalizer {
	mock := &MockEnvoyFilterFinalizer{ctrl: ctrl}
	mock.recorder = &MockEnvoyFilterFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyFilterFinalizer) EXPECT() *MockEnvoyFilterFinalizerMockRecorder {
	return m.recorder
}

// EnvoyFilterFinalizerName mocks base method.
func (m *MockEnvoyFilterFinalizer) EnvoyFilterFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvoyFilterFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// EnvoyFilterFinalizerName indicates an expected call of EnvoyFilterFinalizerName.
func (mr *MockEnvoyFilterFinalizerMockRecorder) EnvoyFilterFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvoyFilterFinalizerName", reflect.TypeOf((*MockEnvoyFilterFinalizer)(nil).EnvoyFilterFinalizerName))
}

// FinalizeEnvoyFilter mocks base method.
func (m *MockEnvoyFilterFinalizer) FinalizeEnvoyFilter(obj *v1alpha3.EnvoyFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeEnvoyFilter", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeEnvoyFilter indicates an expected call of FinalizeEnvoyFilter.
func (mr *MockEnvoyFilterFinalizerMockRecorder) FinalizeEnvoyFilter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterFinalizer)(nil).FinalizeEnvoyFilter), obj)
}

// ReconcileEnvoyFilter mocks base method.
func (m *MockEnvoyFilterFinalizer) ReconcileEnvoyFilter(obj *v1alpha3.EnvoyFilter) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileEnvoyFilter", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileEnvoyFilter indicates an expected call of ReconcileEnvoyFilter.
func (mr *MockEnvoyFilterFinalizerMockRecorder) ReconcileEnvoyFilter(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileEnvoyFilter", reflect.TypeOf((*MockEnvoyFilterFinalizer)(nil).ReconcileEnvoyFilter), obj)
}

// MockEnvoyFilterReconcileLoop is a mock of EnvoyFilterReconcileLoop interface.
type MockEnvoyFilterReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockEnvoyFilterReconcileLoopMockRecorder
}

// MockEnvoyFilterReconcileLoopMockRecorder is the mock recorder for MockEnvoyFilterReconcileLoop.
type MockEnvoyFilterReconcileLoopMockRecorder struct {
	mock *MockEnvoyFilterReconcileLoop
}

// NewMockEnvoyFilterReconcileLoop creates a new mock instance.
func NewMockEnvoyFilterReconcileLoop(ctrl *gomock.Controller) *MockEnvoyFilterReconcileLoop {
	mock := &MockEnvoyFilterReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockEnvoyFilterReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvoyFilterReconcileLoop) EXPECT() *MockEnvoyFilterReconcileLoopMockRecorder {
	return m.recorder
}

// RunEnvoyFilterReconciler mocks base method.
func (m *MockEnvoyFilterReconcileLoop) RunEnvoyFilterReconciler(ctx context.Context, rec controller.EnvoyFilterReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunEnvoyFilterReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunEnvoyFilterReconciler indicates an expected call of RunEnvoyFilterReconciler.
func (mr *MockEnvoyFilterReconcileLoopMockRecorder) RunEnvoyFilterReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunEnvoyFilterReconciler", reflect.TypeOf((*MockEnvoyFilterReconcileLoop)(nil).RunEnvoyFilterReconciler), varargs...)
}

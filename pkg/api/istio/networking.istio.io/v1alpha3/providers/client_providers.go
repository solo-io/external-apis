// Code generated by skv2. DO NOT EDIT.

package v1alpha3

import (
	networking_istio_io_v1alpha3 "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for EnvoyFilterClient from Clientset
func EnvoyFilterClientFromClientsetProvider(clients networking_istio_io_v1alpha3.Clientset) networking_istio_io_v1alpha3.EnvoyFilterClient {
	return clients.EnvoyFilters()
}

// Provider for EnvoyFilter Client from Client
func EnvoyFilterClientProvider(client client.Client) networking_istio_io_v1alpha3.EnvoyFilterClient {
	return networking_istio_io_v1alpha3.NewEnvoyFilterClient(client)
}

type EnvoyFilterClientFactory func(client client.Client) networking_istio_io_v1alpha3.EnvoyFilterClient

func EnvoyFilterClientFactoryProvider() EnvoyFilterClientFactory {
	return EnvoyFilterClientProvider
}

type EnvoyFilterClientFromConfigFactory func(cfg *rest.Config) (networking_istio_io_v1alpha3.EnvoyFilterClient, error)

func EnvoyFilterClientFromConfigFactoryProvider() EnvoyFilterClientFromConfigFactory {
	return func(cfg *rest.Config) (networking_istio_io_v1alpha3.EnvoyFilterClient, error) {
		clients, err := networking_istio_io_v1alpha3.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.EnvoyFilters(), nil
	}
}

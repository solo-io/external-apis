// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1beta1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1beta1 "istio.io/client-go/pkg/apis/networking/v1beta1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockDestinationRuleReconciler is a mock of DestinationRuleReconciler interface.
type MockDestinationRuleReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationRuleReconcilerMockRecorder
}

// MockDestinationRuleReconcilerMockRecorder is the mock recorder for MockDestinationRuleReconciler.
type MockDestinationRuleReconcilerMockRecorder struct {
	mock *MockDestinationRuleReconciler
}

// NewMockDestinationRuleReconciler creates a new mock instance.
func NewMockDestinationRuleReconciler(ctrl *gomock.Controller) *MockDestinationRuleReconciler {
	mock := &MockDestinationRuleReconciler{ctrl: ctrl}
	mock.recorder = &MockDestinationRuleReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationRuleReconciler) EXPECT() *MockDestinationRuleReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDestinationRule mocks base method.
func (m *MockDestinationRuleReconciler) ReconcileDestinationRule(obj *v1beta1.DestinationRule) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDestinationRule", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDestinationRule indicates an expected call of ReconcileDestinationRule.
func (mr *MockDestinationRuleReconcilerMockRecorder) ReconcileDestinationRule(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDestinationRule", reflect.TypeOf((*MockDestinationRuleReconciler)(nil).ReconcileDestinationRule), obj)
}

// MockDestinationRuleDeletionReconciler is a mock of DestinationRuleDeletionReconciler interface.
type MockDestinationRuleDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationRuleDeletionReconcilerMockRecorder
}

// MockDestinationRuleDeletionReconcilerMockRecorder is the mock recorder for MockDestinationRuleDeletionReconciler.
type MockDestinationRuleDeletionReconcilerMockRecorder struct {
	mock *MockDestinationRuleDeletionReconciler
}

// NewMockDestinationRuleDeletionReconciler creates a new mock instance.
func NewMockDestinationRuleDeletionReconciler(ctrl *gomock.Controller) *MockDestinationRuleDeletionReconciler {
	mock := &MockDestinationRuleDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockDestinationRuleDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationRuleDeletionReconciler) EXPECT() *MockDestinationRuleDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDestinationRuleDeletion mocks base method.
func (m *MockDestinationRuleDeletionReconciler) ReconcileDestinationRuleDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDestinationRuleDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDestinationRuleDeletion indicates an expected call of ReconcileDestinationRuleDeletion.
func (mr *MockDestinationRuleDeletionReconcilerMockRecorder) ReconcileDestinationRuleDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDestinationRuleDeletion", reflect.TypeOf((*MockDestinationRuleDeletionReconciler)(nil).ReconcileDestinationRuleDeletion), req)
}

// MockDestinationRuleFinalizer is a mock of DestinationRuleFinalizer interface.
type MockDestinationRuleFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationRuleFinalizerMockRecorder
}

// MockDestinationRuleFinalizerMockRecorder is the mock recorder for MockDestinationRuleFinalizer.
type MockDestinationRuleFinalizerMockRecorder struct {
	mock *MockDestinationRuleFinalizer
}

// NewMockDestinationRuleFinalizer creates a new mock instance.
func NewMockDestinationRuleFinalizer(ctrl *gomock.Controller) *MockDestinationRuleFinalizer {
	mock := &MockDestinationRuleFinalizer{ctrl: ctrl}
	mock.recorder = &MockDestinationRuleFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationRuleFinalizer) EXPECT() *MockDestinationRuleFinalizerMockRecorder {
	return m.recorder
}

// DestinationRuleFinalizerName mocks base method.
func (m *MockDestinationRuleFinalizer) DestinationRuleFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestinationRuleFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DestinationRuleFinalizerName indicates an expected call of DestinationRuleFinalizerName.
func (mr *MockDestinationRuleFinalizerMockRecorder) DestinationRuleFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestinationRuleFinalizerName", reflect.TypeOf((*MockDestinationRuleFinalizer)(nil).DestinationRuleFinalizerName))
}

// FinalizeDestinationRule mocks base method.
func (m *MockDestinationRuleFinalizer) FinalizeDestinationRule(obj *v1beta1.DestinationRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeDestinationRule", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeDestinationRule indicates an expected call of FinalizeDestinationRule.
func (mr *MockDestinationRuleFinalizerMockRecorder) FinalizeDestinationRule(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeDestinationRule", reflect.TypeOf((*MockDestinationRuleFinalizer)(nil).FinalizeDestinationRule), obj)
}

// ReconcileDestinationRule mocks base method.
func (m *MockDestinationRuleFinalizer) ReconcileDestinationRule(obj *v1beta1.DestinationRule) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDestinationRule", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDestinationRule indicates an expected call of ReconcileDestinationRule.
func (mr *MockDestinationRuleFinalizerMockRecorder) ReconcileDestinationRule(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDestinationRule", reflect.TypeOf((*MockDestinationRuleFinalizer)(nil).ReconcileDestinationRule), obj)
}

// MockDestinationRuleReconcileLoop is a mock of DestinationRuleReconcileLoop interface.
type MockDestinationRuleReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationRuleReconcileLoopMockRecorder
}

// MockDestinationRuleReconcileLoopMockRecorder is the mock recorder for MockDestinationRuleReconcileLoop.
type MockDestinationRuleReconcileLoopMockRecorder struct {
	mock *MockDestinationRuleReconcileLoop
}

// NewMockDestinationRuleReconcileLoop creates a new mock instance.
func NewMockDestinationRuleReconcileLoop(ctrl *gomock.Controller) *MockDestinationRuleReconcileLoop {
	mock := &MockDestinationRuleReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockDestinationRuleReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationRuleReconcileLoop) EXPECT() *MockDestinationRuleReconcileLoopMockRecorder {
	return m.recorder
}

// RunDestinationRuleReconciler mocks base method.
func (m *MockDestinationRuleReconcileLoop) RunDestinationRuleReconciler(ctx context.Context, rec controller.DestinationRuleReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunDestinationRuleReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunDestinationRuleReconciler indicates an expected call of RunDestinationRuleReconciler.
func (mr *MockDestinationRuleReconcileLoopMockRecorder) RunDestinationRuleReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDestinationRuleReconciler", reflect.TypeOf((*MockDestinationRuleReconcileLoop)(nil).RunDestinationRuleReconciler), varargs...)
}

// MockGatewayReconciler is a mock of GatewayReconciler interface.
type MockGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayReconcilerMockRecorder
}

// MockGatewayReconcilerMockRecorder is the mock recorder for MockGatewayReconciler.
type MockGatewayReconcilerMockRecorder struct {
	mock *MockGatewayReconciler
}

// NewMockGatewayReconciler creates a new mock instance.
func NewMockGatewayReconciler(ctrl *gomock.Controller) *MockGatewayReconciler {
	mock := &MockGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayReconciler) EXPECT() *MockGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGateway mocks base method.
func (m *MockGatewayReconciler) ReconcileGateway(obj *v1beta1.Gateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGateway indicates an expected call of ReconcileGateway.
func (mr *MockGatewayReconcilerMockRecorder) ReconcileGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGateway", reflect.TypeOf((*MockGatewayReconciler)(nil).ReconcileGateway), obj)
}

// MockGatewayDeletionReconciler is a mock of GatewayDeletionReconciler interface.
type MockGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayDeletionReconcilerMockRecorder
}

// MockGatewayDeletionReconcilerMockRecorder is the mock recorder for MockGatewayDeletionReconciler.
type MockGatewayDeletionReconcilerMockRecorder struct {
	mock *MockGatewayDeletionReconciler
}

// NewMockGatewayDeletionReconciler creates a new mock instance.
func NewMockGatewayDeletionReconciler(ctrl *gomock.Controller) *MockGatewayDeletionReconciler {
	mock := &MockGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayDeletionReconciler) EXPECT() *MockGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayDeletion mocks base method.
func (m *MockGatewayDeletionReconciler) ReconcileGatewayDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGatewayDeletion indicates an expected call of ReconcileGatewayDeletion.
func (mr *MockGatewayDeletionReconcilerMockRecorder) ReconcileGatewayDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayDeletion", reflect.TypeOf((*MockGatewayDeletionReconciler)(nil).ReconcileGatewayDeletion), req)
}

// MockGatewayFinalizer is a mock of GatewayFinalizer interface.
type MockGatewayFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayFinalizerMockRecorder
}

// MockGatewayFinalizerMockRecorder is the mock recorder for MockGatewayFinalizer.
type MockGatewayFinalizerMockRecorder struct {
	mock *MockGatewayFinalizer
}

// NewMockGatewayFinalizer creates a new mock instance.
func NewMockGatewayFinalizer(ctrl *gomock.Controller) *MockGatewayFinalizer {
	mock := &MockGatewayFinalizer{ctrl: ctrl}
	mock.recorder = &MockGatewayFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayFinalizer) EXPECT() *MockGatewayFinalizerMockRecorder {
	return m.recorder
}

// FinalizeGateway mocks base method.
func (m *MockGatewayFinalizer) FinalizeGateway(obj *v1beta1.Gateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeGateway", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeGateway indicates an expected call of FinalizeGateway.
func (mr *MockGatewayFinalizerMockRecorder) FinalizeGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeGateway", reflect.TypeOf((*MockGatewayFinalizer)(nil).FinalizeGateway), obj)
}

// GatewayFinalizerName mocks base method.
func (m *MockGatewayFinalizer) GatewayFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GatewayFinalizerName indicates an expected call of GatewayFinalizerName.
func (mr *MockGatewayFinalizerMockRecorder) GatewayFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayFinalizerName", reflect.TypeOf((*MockGatewayFinalizer)(nil).GatewayFinalizerName))
}

// ReconcileGateway mocks base method.
func (m *MockGatewayFinalizer) ReconcileGateway(obj *v1beta1.Gateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGateway", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGateway indicates an expected call of ReconcileGateway.
func (mr *MockGatewayFinalizerMockRecorder) ReconcileGateway(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGateway", reflect.TypeOf((*MockGatewayFinalizer)(nil).ReconcileGateway), obj)
}

// MockGatewayReconcileLoop is a mock of GatewayReconcileLoop interface.
type MockGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayReconcileLoopMockRecorder
}

// MockGatewayReconcileLoopMockRecorder is the mock recorder for MockGatewayReconcileLoop.
type MockGatewayReconcileLoopMockRecorder struct {
	mock *MockGatewayReconcileLoop
}

// NewMockGatewayReconcileLoop creates a new mock instance.
func NewMockGatewayReconcileLoop(ctrl *gomock.Controller) *MockGatewayReconcileLoop {
	mock := &MockGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayReconcileLoop) EXPECT() *MockGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// RunGatewayReconciler mocks base method.
func (m *MockGatewayReconcileLoop) RunGatewayReconciler(ctx context.Context, rec controller.GatewayReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunGatewayReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunGatewayReconciler indicates an expected call of RunGatewayReconciler.
func (mr *MockGatewayReconcileLoopMockRecorder) RunGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunGatewayReconciler", reflect.TypeOf((*MockGatewayReconcileLoop)(nil).RunGatewayReconciler), varargs...)
}

// MockServiceEntryReconciler is a mock of ServiceEntryReconciler interface.
type MockServiceEntryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEntryReconcilerMockRecorder
}

// MockServiceEntryReconcilerMockRecorder is the mock recorder for MockServiceEntryReconciler.
type MockServiceEntryReconcilerMockRecorder struct {
	mock *MockServiceEntryReconciler
}

// NewMockServiceEntryReconciler creates a new mock instance.
func NewMockServiceEntryReconciler(ctrl *gomock.Controller) *MockServiceEntryReconciler {
	mock := &MockServiceEntryReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceEntryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceEntryReconciler) EXPECT() *MockServiceEntryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceEntry mocks base method.
func (m *MockServiceEntryReconciler) ReconcileServiceEntry(obj *v1beta1.ServiceEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceEntry", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileServiceEntry indicates an expected call of ReconcileServiceEntry.
func (mr *MockServiceEntryReconcilerMockRecorder) ReconcileServiceEntry(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceEntry", reflect.TypeOf((*MockServiceEntryReconciler)(nil).ReconcileServiceEntry), obj)
}

// MockServiceEntryDeletionReconciler is a mock of ServiceEntryDeletionReconciler interface.
type MockServiceEntryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEntryDeletionReconcilerMockRecorder
}

// MockServiceEntryDeletionReconcilerMockRecorder is the mock recorder for MockServiceEntryDeletionReconciler.
type MockServiceEntryDeletionReconcilerMockRecorder struct {
	mock *MockServiceEntryDeletionReconciler
}

// NewMockServiceEntryDeletionReconciler creates a new mock instance.
func NewMockServiceEntryDeletionReconciler(ctrl *gomock.Controller) *MockServiceEntryDeletionReconciler {
	mock := &MockServiceEntryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockServiceEntryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceEntryDeletionReconciler) EXPECT() *MockServiceEntryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceEntryDeletion mocks base method.
func (m *MockServiceEntryDeletionReconciler) ReconcileServiceEntryDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceEntryDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileServiceEntryDeletion indicates an expected call of ReconcileServiceEntryDeletion.
func (mr *MockServiceEntryDeletionReconcilerMockRecorder) ReconcileServiceEntryDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceEntryDeletion", reflect.TypeOf((*MockServiceEntryDeletionReconciler)(nil).ReconcileServiceEntryDeletion), req)
}

// MockServiceEntryFinalizer is a mock of ServiceEntryFinalizer interface.
type MockServiceEntryFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEntryFinalizerMockRecorder
}

// MockServiceEntryFinalizerMockRecorder is the mock recorder for MockServiceEntryFinalizer.
type MockServiceEntryFinalizerMockRecorder struct {
	mock *MockServiceEntryFinalizer
}

// NewMockServiceEntryFinalizer creates a new mock instance.
func NewMockServiceEntryFinalizer(ctrl *gomock.Controller) *MockServiceEntryFinalizer {
	mock := &MockServiceEntryFinalizer{ctrl: ctrl}
	mock.recorder = &MockServiceEntryFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceEntryFinalizer) EXPECT() *MockServiceEntryFinalizerMockRecorder {
	return m.recorder
}

// FinalizeServiceEntry mocks base method.
func (m *MockServiceEntryFinalizer) FinalizeServiceEntry(obj *v1beta1.ServiceEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeServiceEntry", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeServiceEntry indicates an expected call of FinalizeServiceEntry.
func (mr *MockServiceEntryFinalizerMockRecorder) FinalizeServiceEntry(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeServiceEntry", reflect.TypeOf((*MockServiceEntryFinalizer)(nil).FinalizeServiceEntry), obj)
}

// ReconcileServiceEntry mocks base method.
func (m *MockServiceEntryFinalizer) ReconcileServiceEntry(obj *v1beta1.ServiceEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceEntry", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileServiceEntry indicates an expected call of ReconcileServiceEntry.
func (mr *MockServiceEntryFinalizerMockRecorder) ReconcileServiceEntry(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceEntry", reflect.TypeOf((*MockServiceEntryFinalizer)(nil).ReconcileServiceEntry), obj)
}

// ServiceEntryFinalizerName mocks base method.
func (m *MockServiceEntryFinalizer) ServiceEntryFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceEntryFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceEntryFinalizerName indicates an expected call of ServiceEntryFinalizerName.
func (mr *MockServiceEntryFinalizerMockRecorder) ServiceEntryFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceEntryFinalizerName", reflect.TypeOf((*MockServiceEntryFinalizer)(nil).ServiceEntryFinalizerName))
}

// MockServiceEntryReconcileLoop is a mock of ServiceEntryReconcileLoop interface.
type MockServiceEntryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEntryReconcileLoopMockRecorder
}

// MockServiceEntryReconcileLoopMockRecorder is the mock recorder for MockServiceEntryReconcileLoop.
type MockServiceEntryReconcileLoopMockRecorder struct {
	mock *MockServiceEntryReconcileLoop
}

// NewMockServiceEntryReconcileLoop creates a new mock instance.
func NewMockServiceEntryReconcileLoop(ctrl *gomock.Controller) *MockServiceEntryReconcileLoop {
	mock := &MockServiceEntryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockServiceEntryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceEntryReconcileLoop) EXPECT() *MockServiceEntryReconcileLoopMockRecorder {
	return m.recorder
}

// RunServiceEntryReconciler mocks base method.
func (m *MockServiceEntryReconcileLoop) RunServiceEntryReconciler(ctx context.Context, rec controller.ServiceEntryReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunServiceEntryReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunServiceEntryReconciler indicates an expected call of RunServiceEntryReconciler.
func (mr *MockServiceEntryReconcileLoopMockRecorder) RunServiceEntryReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunServiceEntryReconciler", reflect.TypeOf((*MockServiceEntryReconcileLoop)(nil).RunServiceEntryReconciler), varargs...)
}

// MockWorkloadEntryReconciler is a mock of WorkloadEntryReconciler interface.
type MockWorkloadEntryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadEntryReconcilerMockRecorder
}

// MockWorkloadEntryReconcilerMockRecorder is the mock recorder for MockWorkloadEntryReconciler.
type MockWorkloadEntryReconcilerMockRecorder struct {
	mock *MockWorkloadEntryReconciler
}

// NewMockWorkloadEntryReconciler creates a new mock instance.
func NewMockWorkloadEntryReconciler(ctrl *gomock.Controller) *MockWorkloadEntryReconciler {
	mock := &MockWorkloadEntryReconciler{ctrl: ctrl}
	mock.recorder = &MockWorkloadEntryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadEntryReconciler) EXPECT() *MockWorkloadEntryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkloadEntry mocks base method.
func (m *MockWorkloadEntryReconciler) ReconcileWorkloadEntry(obj *v1beta1.WorkloadEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkloadEntry", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkloadEntry indicates an expected call of ReconcileWorkloadEntry.
func (mr *MockWorkloadEntryReconcilerMockRecorder) ReconcileWorkloadEntry(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkloadEntry", reflect.TypeOf((*MockWorkloadEntryReconciler)(nil).ReconcileWorkloadEntry), obj)
}

// MockWorkloadEntryDeletionReconciler is a mock of WorkloadEntryDeletionReconciler interface.
type MockWorkloadEntryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadEntryDeletionReconcilerMockRecorder
}

// MockWorkloadEntryDeletionReconcilerMockRecorder is the mock recorder for MockWorkloadEntryDeletionReconciler.
type MockWorkloadEntryDeletionReconcilerMockRecorder struct {
	mock *MockWorkloadEntryDeletionReconciler
}

// NewMockWorkloadEntryDeletionReconciler creates a new mock instance.
func NewMockWorkloadEntryDeletionReconciler(ctrl *gomock.Controller) *MockWorkloadEntryDeletionReconciler {
	mock := &MockWorkloadEntryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockWorkloadEntryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadEntryDeletionReconciler) EXPECT() *MockWorkloadEntryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkloadEntryDeletion mocks base method.
func (m *MockWorkloadEntryDeletionReconciler) ReconcileWorkloadEntryDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkloadEntryDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWorkloadEntryDeletion indicates an expected call of ReconcileWorkloadEntryDeletion.
func (mr *MockWorkloadEntryDeletionReconcilerMockRecorder) ReconcileWorkloadEntryDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkloadEntryDeletion", reflect.TypeOf((*MockWorkloadEntryDeletionReconciler)(nil).ReconcileWorkloadEntryDeletion), req)
}

// MockWorkloadEntryFinalizer is a mock of WorkloadEntryFinalizer interface.
type MockWorkloadEntryFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadEntryFinalizerMockRecorder
}

// MockWorkloadEntryFinalizerMockRecorder is the mock recorder for MockWorkloadEntryFinalizer.
type MockWorkloadEntryFinalizerMockRecorder struct {
	mock *MockWorkloadEntryFinalizer
}

// NewMockWorkloadEntryFinalizer creates a new mock instance.
func NewMockWorkloadEntryFinalizer(ctrl *gomock.Controller) *MockWorkloadEntryFinalizer {
	mock := &MockWorkloadEntryFinalizer{ctrl: ctrl}
	mock.recorder = &MockWorkloadEntryFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadEntryFinalizer) EXPECT() *MockWorkloadEntryFinalizerMockRecorder {
	return m.recorder
}

// FinalizeWorkloadEntry mocks base method.
func (m *MockWorkloadEntryFinalizer) FinalizeWorkloadEntry(obj *v1beta1.WorkloadEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeWorkloadEntry", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeWorkloadEntry indicates an expected call of FinalizeWorkloadEntry.
func (mr *MockWorkloadEntryFinalizerMockRecorder) FinalizeWorkloadEntry(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeWorkloadEntry", reflect.TypeOf((*MockWorkloadEntryFinalizer)(nil).FinalizeWorkloadEntry), obj)
}

// ReconcileWorkloadEntry mocks base method.
func (m *MockWorkloadEntryFinalizer) ReconcileWorkloadEntry(obj *v1beta1.WorkloadEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkloadEntry", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkloadEntry indicates an expected call of ReconcileWorkloadEntry.
func (mr *MockWorkloadEntryFinalizerMockRecorder) ReconcileWorkloadEntry(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkloadEntry", reflect.TypeOf((*MockWorkloadEntryFinalizer)(nil).ReconcileWorkloadEntry), obj)
}

// WorkloadEntryFinalizerName mocks base method.
func (m *MockWorkloadEntryFinalizer) WorkloadEntryFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadEntryFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkloadEntryFinalizerName indicates an expected call of WorkloadEntryFinalizerName.
func (mr *MockWorkloadEntryFinalizerMockRecorder) WorkloadEntryFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadEntryFinalizerName", reflect.TypeOf((*MockWorkloadEntryFinalizer)(nil).WorkloadEntryFinalizerName))
}

// MockWorkloadEntryReconcileLoop is a mock of WorkloadEntryReconcileLoop interface.
type MockWorkloadEntryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadEntryReconcileLoopMockRecorder
}

// MockWorkloadEntryReconcileLoopMockRecorder is the mock recorder for MockWorkloadEntryReconcileLoop.
type MockWorkloadEntryReconcileLoopMockRecorder struct {
	mock *MockWorkloadEntryReconcileLoop
}

// NewMockWorkloadEntryReconcileLoop creates a new mock instance.
func NewMockWorkloadEntryReconcileLoop(ctrl *gomock.Controller) *MockWorkloadEntryReconcileLoop {
	mock := &MockWorkloadEntryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockWorkloadEntryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadEntryReconcileLoop) EXPECT() *MockWorkloadEntryReconcileLoopMockRecorder {
	return m.recorder
}

// RunWorkloadEntryReconciler mocks base method.
func (m *MockWorkloadEntryReconcileLoop) RunWorkloadEntryReconciler(ctx context.Context, rec controller.WorkloadEntryReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWorkloadEntryReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWorkloadEntryReconciler indicates an expected call of RunWorkloadEntryReconciler.
func (mr *MockWorkloadEntryReconcileLoopMockRecorder) RunWorkloadEntryReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWorkloadEntryReconciler", reflect.TypeOf((*MockWorkloadEntryReconcileLoop)(nil).RunWorkloadEntryReconciler), varargs...)
}

// MockWorkloadGroupReconciler is a mock of WorkloadGroupReconciler interface.
type MockWorkloadGroupReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadGroupReconcilerMockRecorder
}

// MockWorkloadGroupReconcilerMockRecorder is the mock recorder for MockWorkloadGroupReconciler.
type MockWorkloadGroupReconcilerMockRecorder struct {
	mock *MockWorkloadGroupReconciler
}

// NewMockWorkloadGroupReconciler creates a new mock instance.
func NewMockWorkloadGroupReconciler(ctrl *gomock.Controller) *MockWorkloadGroupReconciler {
	mock := &MockWorkloadGroupReconciler{ctrl: ctrl}
	mock.recorder = &MockWorkloadGroupReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadGroupReconciler) EXPECT() *MockWorkloadGroupReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkloadGroup mocks base method.
func (m *MockWorkloadGroupReconciler) ReconcileWorkloadGroup(obj *v1beta1.WorkloadGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkloadGroup", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkloadGroup indicates an expected call of ReconcileWorkloadGroup.
func (mr *MockWorkloadGroupReconcilerMockRecorder) ReconcileWorkloadGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkloadGroup", reflect.TypeOf((*MockWorkloadGroupReconciler)(nil).ReconcileWorkloadGroup), obj)
}

// MockWorkloadGroupDeletionReconciler is a mock of WorkloadGroupDeletionReconciler interface.
type MockWorkloadGroupDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadGroupDeletionReconcilerMockRecorder
}

// MockWorkloadGroupDeletionReconcilerMockRecorder is the mock recorder for MockWorkloadGroupDeletionReconciler.
type MockWorkloadGroupDeletionReconcilerMockRecorder struct {
	mock *MockWorkloadGroupDeletionReconciler
}

// NewMockWorkloadGroupDeletionReconciler creates a new mock instance.
func NewMockWorkloadGroupDeletionReconciler(ctrl *gomock.Controller) *MockWorkloadGroupDeletionReconciler {
	mock := &MockWorkloadGroupDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockWorkloadGroupDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadGroupDeletionReconciler) EXPECT() *MockWorkloadGroupDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkloadGroupDeletion mocks base method.
func (m *MockWorkloadGroupDeletionReconciler) ReconcileWorkloadGroupDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkloadGroupDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWorkloadGroupDeletion indicates an expected call of ReconcileWorkloadGroupDeletion.
func (mr *MockWorkloadGroupDeletionReconcilerMockRecorder) ReconcileWorkloadGroupDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkloadGroupDeletion", reflect.TypeOf((*MockWorkloadGroupDeletionReconciler)(nil).ReconcileWorkloadGroupDeletion), req)
}

// MockWorkloadGroupFinalizer is a mock of WorkloadGroupFinalizer interface.
type MockWorkloadGroupFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadGroupFinalizerMockRecorder
}

// MockWorkloadGroupFinalizerMockRecorder is the mock recorder for MockWorkloadGroupFinalizer.
type MockWorkloadGroupFinalizerMockRecorder struct {
	mock *MockWorkloadGroupFinalizer
}

// NewMockWorkloadGroupFinalizer creates a new mock instance.
func NewMockWorkloadGroupFinalizer(ctrl *gomock.Controller) *MockWorkloadGroupFinalizer {
	mock := &MockWorkloadGroupFinalizer{ctrl: ctrl}
	mock.recorder = &MockWorkloadGroupFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadGroupFinalizer) EXPECT() *MockWorkloadGroupFinalizerMockRecorder {
	return m.recorder
}

// FinalizeWorkloadGroup mocks base method.
func (m *MockWorkloadGroupFinalizer) FinalizeWorkloadGroup(obj *v1beta1.WorkloadGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeWorkloadGroup", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeWorkloadGroup indicates an expected call of FinalizeWorkloadGroup.
func (mr *MockWorkloadGroupFinalizerMockRecorder) FinalizeWorkloadGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeWorkloadGroup", reflect.TypeOf((*MockWorkloadGroupFinalizer)(nil).FinalizeWorkloadGroup), obj)
}

// ReconcileWorkloadGroup mocks base method.
func (m *MockWorkloadGroupFinalizer) ReconcileWorkloadGroup(obj *v1beta1.WorkloadGroup) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkloadGroup", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkloadGroup indicates an expected call of ReconcileWorkloadGroup.
func (mr *MockWorkloadGroupFinalizerMockRecorder) ReconcileWorkloadGroup(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkloadGroup", reflect.TypeOf((*MockWorkloadGroupFinalizer)(nil).ReconcileWorkloadGroup), obj)
}

// WorkloadGroupFinalizerName mocks base method.
func (m *MockWorkloadGroupFinalizer) WorkloadGroupFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadGroupFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkloadGroupFinalizerName indicates an expected call of WorkloadGroupFinalizerName.
func (mr *MockWorkloadGroupFinalizerMockRecorder) WorkloadGroupFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadGroupFinalizerName", reflect.TypeOf((*MockWorkloadGroupFinalizer)(nil).WorkloadGroupFinalizerName))
}

// MockWorkloadGroupReconcileLoop is a mock of WorkloadGroupReconcileLoop interface.
type MockWorkloadGroupReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadGroupReconcileLoopMockRecorder
}

// MockWorkloadGroupReconcileLoopMockRecorder is the mock recorder for MockWorkloadGroupReconcileLoop.
type MockWorkloadGroupReconcileLoopMockRecorder struct {
	mock *MockWorkloadGroupReconcileLoop
}

// NewMockWorkloadGroupReconcileLoop creates a new mock instance.
func NewMockWorkloadGroupReconcileLoop(ctrl *gomock.Controller) *MockWorkloadGroupReconcileLoop {
	mock := &MockWorkloadGroupReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockWorkloadGroupReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadGroupReconcileLoop) EXPECT() *MockWorkloadGroupReconcileLoopMockRecorder {
	return m.recorder
}

// RunWorkloadGroupReconciler mocks base method.
func (m *MockWorkloadGroupReconcileLoop) RunWorkloadGroupReconciler(ctx context.Context, rec controller.WorkloadGroupReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWorkloadGroupReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWorkloadGroupReconciler indicates an expected call of RunWorkloadGroupReconciler.
func (mr *MockWorkloadGroupReconcileLoopMockRecorder) RunWorkloadGroupReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWorkloadGroupReconciler", reflect.TypeOf((*MockWorkloadGroupReconcileLoop)(nil).RunWorkloadGroupReconciler), varargs...)
}

// MockVirtualServiceReconciler is a mock of VirtualServiceReconciler interface.
type MockVirtualServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceReconcilerMockRecorder
}

// MockVirtualServiceReconcilerMockRecorder is the mock recorder for MockVirtualServiceReconciler.
type MockVirtualServiceReconcilerMockRecorder struct {
	mock *MockVirtualServiceReconciler
}

// NewMockVirtualServiceReconciler creates a new mock instance.
func NewMockVirtualServiceReconciler(ctrl *gomock.Controller) *MockVirtualServiceReconciler {
	mock := &MockVirtualServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceReconciler) EXPECT() *MockVirtualServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualService mocks base method.
func (m *MockVirtualServiceReconciler) ReconcileVirtualService(obj *v1beta1.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService.
func (mr *MockVirtualServiceReconcilerMockRecorder) ReconcileVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MockVirtualServiceReconciler)(nil).ReconcileVirtualService), obj)
}

// MockVirtualServiceDeletionReconciler is a mock of VirtualServiceDeletionReconciler interface.
type MockVirtualServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceDeletionReconcilerMockRecorder
}

// MockVirtualServiceDeletionReconcilerMockRecorder is the mock recorder for MockVirtualServiceDeletionReconciler.
type MockVirtualServiceDeletionReconcilerMockRecorder struct {
	mock *MockVirtualServiceDeletionReconciler
}

// NewMockVirtualServiceDeletionReconciler creates a new mock instance.
func NewMockVirtualServiceDeletionReconciler(ctrl *gomock.Controller) *MockVirtualServiceDeletionReconciler {
	mock := &MockVirtualServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceDeletionReconciler) EXPECT() *MockVirtualServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualServiceDeletion mocks base method.
func (m *MockVirtualServiceDeletionReconciler) ReconcileVirtualServiceDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualServiceDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualServiceDeletion indicates an expected call of ReconcileVirtualServiceDeletion.
func (mr *MockVirtualServiceDeletionReconcilerMockRecorder) ReconcileVirtualServiceDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualServiceDeletion", reflect.TypeOf((*MockVirtualServiceDeletionReconciler)(nil).ReconcileVirtualServiceDeletion), req)
}

// MockVirtualServiceFinalizer is a mock of VirtualServiceFinalizer interface.
type MockVirtualServiceFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceFinalizerMockRecorder
}

// MockVirtualServiceFinalizerMockRecorder is the mock recorder for MockVirtualServiceFinalizer.
type MockVirtualServiceFinalizerMockRecorder struct {
	mock *MockVirtualServiceFinalizer
}

// NewMockVirtualServiceFinalizer creates a new mock instance.
func NewMockVirtualServiceFinalizer(ctrl *gomock.Controller) *MockVirtualServiceFinalizer {
	mock := &MockVirtualServiceFinalizer{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceFinalizer) EXPECT() *MockVirtualServiceFinalizerMockRecorder {
	return m.recorder
}

// FinalizeVirtualService mocks base method.
func (m *MockVirtualServiceFinalizer) FinalizeVirtualService(obj *v1beta1.VirtualService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualService", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualService indicates an expected call of FinalizeVirtualService.
func (mr *MockVirtualServiceFinalizerMockRecorder) FinalizeVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualService", reflect.TypeOf((*MockVirtualServiceFinalizer)(nil).FinalizeVirtualService), obj)
}

// ReconcileVirtualService mocks base method.
func (m *MockVirtualServiceFinalizer) ReconcileVirtualService(obj *v1beta1.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService.
func (mr *MockVirtualServiceFinalizerMockRecorder) ReconcileVirtualService(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MockVirtualServiceFinalizer)(nil).ReconcileVirtualService), obj)
}

// VirtualServiceFinalizerName mocks base method.
func (m *MockVirtualServiceFinalizer) VirtualServiceFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServiceFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// VirtualServiceFinalizerName indicates an expected call of VirtualServiceFinalizerName.
func (mr *MockVirtualServiceFinalizerMockRecorder) VirtualServiceFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServiceFinalizerName", reflect.TypeOf((*MockVirtualServiceFinalizer)(nil).VirtualServiceFinalizerName))
}

// MockVirtualServiceReconcileLoop is a mock of VirtualServiceReconcileLoop interface.
type MockVirtualServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServiceReconcileLoopMockRecorder
}

// MockVirtualServiceReconcileLoopMockRecorder is the mock recorder for MockVirtualServiceReconcileLoop.
type MockVirtualServiceReconcileLoopMockRecorder struct {
	mock *MockVirtualServiceReconcileLoop
}

// NewMockVirtualServiceReconcileLoop creates a new mock instance.
func NewMockVirtualServiceReconcileLoop(ctrl *gomock.Controller) *MockVirtualServiceReconcileLoop {
	mock := &MockVirtualServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockVirtualServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServiceReconcileLoop) EXPECT() *MockVirtualServiceReconcileLoopMockRecorder {
	return m.recorder
}

// RunVirtualServiceReconciler mocks base method.
func (m *MockVirtualServiceReconcileLoop) RunVirtualServiceReconciler(ctx context.Context, rec controller.VirtualServiceReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunVirtualServiceReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunVirtualServiceReconciler indicates an expected call of RunVirtualServiceReconciler.
func (mr *MockVirtualServiceReconcileLoopMockRecorder) RunVirtualServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVirtualServiceReconciler", reflect.TypeOf((*MockVirtualServiceReconcileLoop)(nil).RunVirtualServiceReconciler), varargs...)
}

// MockSidecarReconciler is a mock of SidecarReconciler interface.
type MockSidecarReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarReconcilerMockRecorder
}

// MockSidecarReconcilerMockRecorder is the mock recorder for MockSidecarReconciler.
type MockSidecarReconcilerMockRecorder struct {
	mock *MockSidecarReconciler
}

// NewMockSidecarReconciler creates a new mock instance.
func NewMockSidecarReconciler(ctrl *gomock.Controller) *MockSidecarReconciler {
	mock := &MockSidecarReconciler{ctrl: ctrl}
	mock.recorder = &MockSidecarReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarReconciler) EXPECT() *MockSidecarReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSidecar mocks base method.
func (m *MockSidecarReconciler) ReconcileSidecar(obj *v1beta1.Sidecar) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSidecar", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSidecar indicates an expected call of ReconcileSidecar.
func (mr *MockSidecarReconcilerMockRecorder) ReconcileSidecar(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSidecar", reflect.TypeOf((*MockSidecarReconciler)(nil).ReconcileSidecar), obj)
}

// MockSidecarDeletionReconciler is a mock of SidecarDeletionReconciler interface.
type MockSidecarDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarDeletionReconcilerMockRecorder
}

// MockSidecarDeletionReconcilerMockRecorder is the mock recorder for MockSidecarDeletionReconciler.
type MockSidecarDeletionReconcilerMockRecorder struct {
	mock *MockSidecarDeletionReconciler
}

// NewMockSidecarDeletionReconciler creates a new mock instance.
func NewMockSidecarDeletionReconciler(ctrl *gomock.Controller) *MockSidecarDeletionReconciler {
	mock := &MockSidecarDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockSidecarDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarDeletionReconciler) EXPECT() *MockSidecarDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSidecarDeletion mocks base method.
func (m *MockSidecarDeletionReconciler) ReconcileSidecarDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSidecarDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileSidecarDeletion indicates an expected call of ReconcileSidecarDeletion.
func (mr *MockSidecarDeletionReconcilerMockRecorder) ReconcileSidecarDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSidecarDeletion", reflect.TypeOf((*MockSidecarDeletionReconciler)(nil).ReconcileSidecarDeletion), req)
}

// MockSidecarFinalizer is a mock of SidecarFinalizer interface.
type MockSidecarFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarFinalizerMockRecorder
}

// MockSidecarFinalizerMockRecorder is the mock recorder for MockSidecarFinalizer.
type MockSidecarFinalizerMockRecorder struct {
	mock *MockSidecarFinalizer
}

// NewMockSidecarFinalizer creates a new mock instance.
func NewMockSidecarFinalizer(ctrl *gomock.Controller) *MockSidecarFinalizer {
	mock := &MockSidecarFinalizer{ctrl: ctrl}
	mock.recorder = &MockSidecarFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarFinalizer) EXPECT() *MockSidecarFinalizerMockRecorder {
	return m.recorder
}

// FinalizeSidecar mocks base method.
func (m *MockSidecarFinalizer) FinalizeSidecar(obj *v1beta1.Sidecar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeSidecar", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeSidecar indicates an expected call of FinalizeSidecar.
func (mr *MockSidecarFinalizerMockRecorder) FinalizeSidecar(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeSidecar", reflect.TypeOf((*MockSidecarFinalizer)(nil).FinalizeSidecar), obj)
}

// ReconcileSidecar mocks base method.
func (m *MockSidecarFinalizer) ReconcileSidecar(obj *v1beta1.Sidecar) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSidecar", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSidecar indicates an expected call of ReconcileSidecar.
func (mr *MockSidecarFinalizerMockRecorder) ReconcileSidecar(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSidecar", reflect.TypeOf((*MockSidecarFinalizer)(nil).ReconcileSidecar), obj)
}

// SidecarFinalizerName mocks base method.
func (m *MockSidecarFinalizer) SidecarFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SidecarFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SidecarFinalizerName indicates an expected call of SidecarFinalizerName.
func (mr *MockSidecarFinalizerMockRecorder) SidecarFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SidecarFinalizerName", reflect.TypeOf((*MockSidecarFinalizer)(nil).SidecarFinalizerName))
}

// MockSidecarReconcileLoop is a mock of SidecarReconcileLoop interface.
type MockSidecarReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockSidecarReconcileLoopMockRecorder
}

// MockSidecarReconcileLoopMockRecorder is the mock recorder for MockSidecarReconcileLoop.
type MockSidecarReconcileLoopMockRecorder struct {
	mock *MockSidecarReconcileLoop
}

// NewMockSidecarReconcileLoop creates a new mock instance.
func NewMockSidecarReconcileLoop(ctrl *gomock.Controller) *MockSidecarReconcileLoop {
	mock := &MockSidecarReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockSidecarReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSidecarReconcileLoop) EXPECT() *MockSidecarReconcileLoopMockRecorder {
	return m.recorder
}

// RunSidecarReconciler mocks base method.
func (m *MockSidecarReconcileLoop) RunSidecarReconciler(ctx context.Context, rec controller.SidecarReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunSidecarReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSidecarReconciler indicates an expected call of RunSidecarReconciler.
func (mr *MockSidecarReconcileLoopMockRecorder) RunSidecarReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSidecarReconciler", reflect.TypeOf((*MockSidecarReconcileLoop)(nil).RunSidecarReconciler), varargs...)
}

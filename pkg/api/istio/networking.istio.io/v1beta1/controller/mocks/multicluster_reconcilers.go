// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1beta1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1beta1 "istio.io/client-go/pkg/apis/networking/v1beta1"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterDestinationRuleReconciler is a mock of MulticlusterDestinationRuleReconciler interface.
type MockMulticlusterDestinationRuleReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDestinationRuleReconcilerMockRecorder
}

// MockMulticlusterDestinationRuleReconcilerMockRecorder is the mock recorder for MockMulticlusterDestinationRuleReconciler.
type MockMulticlusterDestinationRuleReconcilerMockRecorder struct {
	mock *MockMulticlusterDestinationRuleReconciler
}

// NewMockMulticlusterDestinationRuleReconciler creates a new mock instance.
func NewMockMulticlusterDestinationRuleReconciler(ctrl *gomock.Controller) *MockMulticlusterDestinationRuleReconciler {
	mock := &MockMulticlusterDestinationRuleReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDestinationRuleReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDestinationRuleReconciler) EXPECT() *MockMulticlusterDestinationRuleReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDestinationRule mocks base method.
func (m *MockMulticlusterDestinationRuleReconciler) ReconcileDestinationRule(clusterName string, obj *v1beta1.DestinationRule) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDestinationRule", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDestinationRule indicates an expected call of ReconcileDestinationRule.
func (mr *MockMulticlusterDestinationRuleReconcilerMockRecorder) ReconcileDestinationRule(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDestinationRule", reflect.TypeOf((*MockMulticlusterDestinationRuleReconciler)(nil).ReconcileDestinationRule), clusterName, obj)
}

// MockMulticlusterDestinationRuleDeletionReconciler is a mock of MulticlusterDestinationRuleDeletionReconciler interface.
type MockMulticlusterDestinationRuleDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDestinationRuleDeletionReconcilerMockRecorder
}

// MockMulticlusterDestinationRuleDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterDestinationRuleDeletionReconciler.
type MockMulticlusterDestinationRuleDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterDestinationRuleDeletionReconciler
}

// NewMockMulticlusterDestinationRuleDeletionReconciler creates a new mock instance.
func NewMockMulticlusterDestinationRuleDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterDestinationRuleDeletionReconciler {
	mock := &MockMulticlusterDestinationRuleDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDestinationRuleDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDestinationRuleDeletionReconciler) EXPECT() *MockMulticlusterDestinationRuleDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileDestinationRuleDeletion mocks base method.
func (m *MockMulticlusterDestinationRuleDeletionReconciler) ReconcileDestinationRuleDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileDestinationRuleDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileDestinationRuleDeletion indicates an expected call of ReconcileDestinationRuleDeletion.
func (mr *MockMulticlusterDestinationRuleDeletionReconcilerMockRecorder) ReconcileDestinationRuleDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDestinationRuleDeletion", reflect.TypeOf((*MockMulticlusterDestinationRuleDeletionReconciler)(nil).ReconcileDestinationRuleDeletion), clusterName, req)
}

// MockMulticlusterDestinationRuleReconcileLoop is a mock of MulticlusterDestinationRuleReconcileLoop interface.
type MockMulticlusterDestinationRuleReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterDestinationRuleReconcileLoopMockRecorder
}

// MockMulticlusterDestinationRuleReconcileLoopMockRecorder is the mock recorder for MockMulticlusterDestinationRuleReconcileLoop.
type MockMulticlusterDestinationRuleReconcileLoopMockRecorder struct {
	mock *MockMulticlusterDestinationRuleReconcileLoop
}

// NewMockMulticlusterDestinationRuleReconcileLoop creates a new mock instance.
func NewMockMulticlusterDestinationRuleReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterDestinationRuleReconcileLoop {
	mock := &MockMulticlusterDestinationRuleReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterDestinationRuleReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterDestinationRuleReconcileLoop) EXPECT() *MockMulticlusterDestinationRuleReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterDestinationRuleReconciler mocks base method.
func (m *MockMulticlusterDestinationRuleReconcileLoop) AddMulticlusterDestinationRuleReconciler(ctx context.Context, rec controller.MulticlusterDestinationRuleReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterDestinationRuleReconciler", varargs...)
}

// AddMulticlusterDestinationRuleReconciler indicates an expected call of AddMulticlusterDestinationRuleReconciler.
func (mr *MockMulticlusterDestinationRuleReconcileLoopMockRecorder) AddMulticlusterDestinationRuleReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterDestinationRuleReconciler", reflect.TypeOf((*MockMulticlusterDestinationRuleReconcileLoop)(nil).AddMulticlusterDestinationRuleReconciler), varargs...)
}

// MockMulticlusterGatewayReconciler is a mock of MulticlusterGatewayReconciler interface.
type MockMulticlusterGatewayReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayReconcilerMockRecorder
}

// MockMulticlusterGatewayReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayReconciler.
type MockMulticlusterGatewayReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayReconciler
}

// NewMockMulticlusterGatewayReconciler creates a new mock instance.
func NewMockMulticlusterGatewayReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayReconciler {
	mock := &MockMulticlusterGatewayReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayReconciler) EXPECT() *MockMulticlusterGatewayReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGateway mocks base method.
func (m *MockMulticlusterGatewayReconciler) ReconcileGateway(clusterName string, obj *v1beta1.Gateway) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGateway", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileGateway indicates an expected call of ReconcileGateway.
func (mr *MockMulticlusterGatewayReconcilerMockRecorder) ReconcileGateway(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGateway", reflect.TypeOf((*MockMulticlusterGatewayReconciler)(nil).ReconcileGateway), clusterName, obj)
}

// MockMulticlusterGatewayDeletionReconciler is a mock of MulticlusterGatewayDeletionReconciler interface.
type MockMulticlusterGatewayDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayDeletionReconcilerMockRecorder
}

// MockMulticlusterGatewayDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterGatewayDeletionReconciler.
type MockMulticlusterGatewayDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterGatewayDeletionReconciler
}

// NewMockMulticlusterGatewayDeletionReconciler creates a new mock instance.
func NewMockMulticlusterGatewayDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterGatewayDeletionReconciler {
	mock := &MockMulticlusterGatewayDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayDeletionReconciler) EXPECT() *MockMulticlusterGatewayDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileGatewayDeletion mocks base method.
func (m *MockMulticlusterGatewayDeletionReconciler) ReconcileGatewayDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileGatewayDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileGatewayDeletion indicates an expected call of ReconcileGatewayDeletion.
func (mr *MockMulticlusterGatewayDeletionReconcilerMockRecorder) ReconcileGatewayDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileGatewayDeletion", reflect.TypeOf((*MockMulticlusterGatewayDeletionReconciler)(nil).ReconcileGatewayDeletion), clusterName, req)
}

// MockMulticlusterGatewayReconcileLoop is a mock of MulticlusterGatewayReconcileLoop interface.
type MockMulticlusterGatewayReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterGatewayReconcileLoopMockRecorder
}

// MockMulticlusterGatewayReconcileLoopMockRecorder is the mock recorder for MockMulticlusterGatewayReconcileLoop.
type MockMulticlusterGatewayReconcileLoopMockRecorder struct {
	mock *MockMulticlusterGatewayReconcileLoop
}

// NewMockMulticlusterGatewayReconcileLoop creates a new mock instance.
func NewMockMulticlusterGatewayReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterGatewayReconcileLoop {
	mock := &MockMulticlusterGatewayReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterGatewayReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterGatewayReconcileLoop) EXPECT() *MockMulticlusterGatewayReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterGatewayReconciler mocks base method.
func (m *MockMulticlusterGatewayReconcileLoop) AddMulticlusterGatewayReconciler(ctx context.Context, rec controller.MulticlusterGatewayReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterGatewayReconciler", varargs...)
}

// AddMulticlusterGatewayReconciler indicates an expected call of AddMulticlusterGatewayReconciler.
func (mr *MockMulticlusterGatewayReconcileLoopMockRecorder) AddMulticlusterGatewayReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterGatewayReconciler", reflect.TypeOf((*MockMulticlusterGatewayReconcileLoop)(nil).AddMulticlusterGatewayReconciler), varargs...)
}

// MockMulticlusterServiceEntryReconciler is a mock of MulticlusterServiceEntryReconciler interface.
type MockMulticlusterServiceEntryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterServiceEntryReconcilerMockRecorder
}

// MockMulticlusterServiceEntryReconcilerMockRecorder is the mock recorder for MockMulticlusterServiceEntryReconciler.
type MockMulticlusterServiceEntryReconcilerMockRecorder struct {
	mock *MockMulticlusterServiceEntryReconciler
}

// NewMockMulticlusterServiceEntryReconciler creates a new mock instance.
func NewMockMulticlusterServiceEntryReconciler(ctrl *gomock.Controller) *MockMulticlusterServiceEntryReconciler {
	mock := &MockMulticlusterServiceEntryReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterServiceEntryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterServiceEntryReconciler) EXPECT() *MockMulticlusterServiceEntryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceEntry mocks base method.
func (m *MockMulticlusterServiceEntryReconciler) ReconcileServiceEntry(clusterName string, obj *v1beta1.ServiceEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceEntry", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileServiceEntry indicates an expected call of ReconcileServiceEntry.
func (mr *MockMulticlusterServiceEntryReconcilerMockRecorder) ReconcileServiceEntry(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceEntry", reflect.TypeOf((*MockMulticlusterServiceEntryReconciler)(nil).ReconcileServiceEntry), clusterName, obj)
}

// MockMulticlusterServiceEntryDeletionReconciler is a mock of MulticlusterServiceEntryDeletionReconciler interface.
type MockMulticlusterServiceEntryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterServiceEntryDeletionReconcilerMockRecorder
}

// MockMulticlusterServiceEntryDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterServiceEntryDeletionReconciler.
type MockMulticlusterServiceEntryDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterServiceEntryDeletionReconciler
}

// NewMockMulticlusterServiceEntryDeletionReconciler creates a new mock instance.
func NewMockMulticlusterServiceEntryDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterServiceEntryDeletionReconciler {
	mock := &MockMulticlusterServiceEntryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterServiceEntryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterServiceEntryDeletionReconciler) EXPECT() *MockMulticlusterServiceEntryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileServiceEntryDeletion mocks base method.
func (m *MockMulticlusterServiceEntryDeletionReconciler) ReconcileServiceEntryDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileServiceEntryDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileServiceEntryDeletion indicates an expected call of ReconcileServiceEntryDeletion.
func (mr *MockMulticlusterServiceEntryDeletionReconcilerMockRecorder) ReconcileServiceEntryDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileServiceEntryDeletion", reflect.TypeOf((*MockMulticlusterServiceEntryDeletionReconciler)(nil).ReconcileServiceEntryDeletion), clusterName, req)
}

// MockMulticlusterServiceEntryReconcileLoop is a mock of MulticlusterServiceEntryReconcileLoop interface.
type MockMulticlusterServiceEntryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterServiceEntryReconcileLoopMockRecorder
}

// MockMulticlusterServiceEntryReconcileLoopMockRecorder is the mock recorder for MockMulticlusterServiceEntryReconcileLoop.
type MockMulticlusterServiceEntryReconcileLoopMockRecorder struct {
	mock *MockMulticlusterServiceEntryReconcileLoop
}

// NewMockMulticlusterServiceEntryReconcileLoop creates a new mock instance.
func NewMockMulticlusterServiceEntryReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterServiceEntryReconcileLoop {
	mock := &MockMulticlusterServiceEntryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterServiceEntryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterServiceEntryReconcileLoop) EXPECT() *MockMulticlusterServiceEntryReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterServiceEntryReconciler mocks base method.
func (m *MockMulticlusterServiceEntryReconcileLoop) AddMulticlusterServiceEntryReconciler(ctx context.Context, rec controller.MulticlusterServiceEntryReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterServiceEntryReconciler", varargs...)
}

// AddMulticlusterServiceEntryReconciler indicates an expected call of AddMulticlusterServiceEntryReconciler.
func (mr *MockMulticlusterServiceEntryReconcileLoopMockRecorder) AddMulticlusterServiceEntryReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterServiceEntryReconciler", reflect.TypeOf((*MockMulticlusterServiceEntryReconcileLoop)(nil).AddMulticlusterServiceEntryReconciler), varargs...)
}

// MockMulticlusterWorkloadEntryReconciler is a mock of MulticlusterWorkloadEntryReconciler interface.
type MockMulticlusterWorkloadEntryReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWorkloadEntryReconcilerMockRecorder
}

// MockMulticlusterWorkloadEntryReconcilerMockRecorder is the mock recorder for MockMulticlusterWorkloadEntryReconciler.
type MockMulticlusterWorkloadEntryReconcilerMockRecorder struct {
	mock *MockMulticlusterWorkloadEntryReconciler
}

// NewMockMulticlusterWorkloadEntryReconciler creates a new mock instance.
func NewMockMulticlusterWorkloadEntryReconciler(ctrl *gomock.Controller) *MockMulticlusterWorkloadEntryReconciler {
	mock := &MockMulticlusterWorkloadEntryReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWorkloadEntryReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWorkloadEntryReconciler) EXPECT() *MockMulticlusterWorkloadEntryReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkloadEntry mocks base method.
func (m *MockMulticlusterWorkloadEntryReconciler) ReconcileWorkloadEntry(clusterName string, obj *v1beta1.WorkloadEntry) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkloadEntry", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileWorkloadEntry indicates an expected call of ReconcileWorkloadEntry.
func (mr *MockMulticlusterWorkloadEntryReconcilerMockRecorder) ReconcileWorkloadEntry(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkloadEntry", reflect.TypeOf((*MockMulticlusterWorkloadEntryReconciler)(nil).ReconcileWorkloadEntry), clusterName, obj)
}

// MockMulticlusterWorkloadEntryDeletionReconciler is a mock of MulticlusterWorkloadEntryDeletionReconciler interface.
type MockMulticlusterWorkloadEntryDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWorkloadEntryDeletionReconcilerMockRecorder
}

// MockMulticlusterWorkloadEntryDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterWorkloadEntryDeletionReconciler.
type MockMulticlusterWorkloadEntryDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterWorkloadEntryDeletionReconciler
}

// NewMockMulticlusterWorkloadEntryDeletionReconciler creates a new mock instance.
func NewMockMulticlusterWorkloadEntryDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterWorkloadEntryDeletionReconciler {
	mock := &MockMulticlusterWorkloadEntryDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWorkloadEntryDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWorkloadEntryDeletionReconciler) EXPECT() *MockMulticlusterWorkloadEntryDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileWorkloadEntryDeletion mocks base method.
func (m *MockMulticlusterWorkloadEntryDeletionReconciler) ReconcileWorkloadEntryDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileWorkloadEntryDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileWorkloadEntryDeletion indicates an expected call of ReconcileWorkloadEntryDeletion.
func (mr *MockMulticlusterWorkloadEntryDeletionReconcilerMockRecorder) ReconcileWorkloadEntryDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileWorkloadEntryDeletion", reflect.TypeOf((*MockMulticlusterWorkloadEntryDeletionReconciler)(nil).ReconcileWorkloadEntryDeletion), clusterName, req)
}

// MockMulticlusterWorkloadEntryReconcileLoop is a mock of MulticlusterWorkloadEntryReconcileLoop interface.
type MockMulticlusterWorkloadEntryReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterWorkloadEntryReconcileLoopMockRecorder
}

// MockMulticlusterWorkloadEntryReconcileLoopMockRecorder is the mock recorder for MockMulticlusterWorkloadEntryReconcileLoop.
type MockMulticlusterWorkloadEntryReconcileLoopMockRecorder struct {
	mock *MockMulticlusterWorkloadEntryReconcileLoop
}

// NewMockMulticlusterWorkloadEntryReconcileLoop creates a new mock instance.
func NewMockMulticlusterWorkloadEntryReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterWorkloadEntryReconcileLoop {
	mock := &MockMulticlusterWorkloadEntryReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterWorkloadEntryReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterWorkloadEntryReconcileLoop) EXPECT() *MockMulticlusterWorkloadEntryReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterWorkloadEntryReconciler mocks base method.
func (m *MockMulticlusterWorkloadEntryReconcileLoop) AddMulticlusterWorkloadEntryReconciler(ctx context.Context, rec controller.MulticlusterWorkloadEntryReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterWorkloadEntryReconciler", varargs...)
}

// AddMulticlusterWorkloadEntryReconciler indicates an expected call of AddMulticlusterWorkloadEntryReconciler.
func (mr *MockMulticlusterWorkloadEntryReconcileLoopMockRecorder) AddMulticlusterWorkloadEntryReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterWorkloadEntryReconciler", reflect.TypeOf((*MockMulticlusterWorkloadEntryReconcileLoop)(nil).AddMulticlusterWorkloadEntryReconciler), varargs...)
}

// MockMulticlusterVirtualServiceReconciler is a mock of MulticlusterVirtualServiceReconciler interface.
type MockMulticlusterVirtualServiceReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualServiceReconcilerMockRecorder
}

// MockMulticlusterVirtualServiceReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualServiceReconciler.
type MockMulticlusterVirtualServiceReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualServiceReconciler
}

// NewMockMulticlusterVirtualServiceReconciler creates a new mock instance.
func NewMockMulticlusterVirtualServiceReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualServiceReconciler {
	mock := &MockMulticlusterVirtualServiceReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualServiceReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualServiceReconciler) EXPECT() *MockMulticlusterVirtualServiceReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualService mocks base method.
func (m *MockMulticlusterVirtualServiceReconciler) ReconcileVirtualService(clusterName string, obj *v1beta1.VirtualService) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualService", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileVirtualService indicates an expected call of ReconcileVirtualService.
func (mr *MockMulticlusterVirtualServiceReconcilerMockRecorder) ReconcileVirtualService(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualService", reflect.TypeOf((*MockMulticlusterVirtualServiceReconciler)(nil).ReconcileVirtualService), clusterName, obj)
}

// MockMulticlusterVirtualServiceDeletionReconciler is a mock of MulticlusterVirtualServiceDeletionReconciler interface.
type MockMulticlusterVirtualServiceDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder
}

// MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterVirtualServiceDeletionReconciler.
type MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterVirtualServiceDeletionReconciler
}

// NewMockMulticlusterVirtualServiceDeletionReconciler creates a new mock instance.
func NewMockMulticlusterVirtualServiceDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterVirtualServiceDeletionReconciler {
	mock := &MockMulticlusterVirtualServiceDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualServiceDeletionReconciler) EXPECT() *MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileVirtualServiceDeletion mocks base method.
func (m *MockMulticlusterVirtualServiceDeletionReconciler) ReconcileVirtualServiceDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileVirtualServiceDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileVirtualServiceDeletion indicates an expected call of ReconcileVirtualServiceDeletion.
func (mr *MockMulticlusterVirtualServiceDeletionReconcilerMockRecorder) ReconcileVirtualServiceDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVirtualServiceDeletion", reflect.TypeOf((*MockMulticlusterVirtualServiceDeletionReconciler)(nil).ReconcileVirtualServiceDeletion), clusterName, req)
}

// MockMulticlusterVirtualServiceReconcileLoop is a mock of MulticlusterVirtualServiceReconcileLoop interface.
type MockMulticlusterVirtualServiceReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterVirtualServiceReconcileLoopMockRecorder
}

// MockMulticlusterVirtualServiceReconcileLoopMockRecorder is the mock recorder for MockMulticlusterVirtualServiceReconcileLoop.
type MockMulticlusterVirtualServiceReconcileLoopMockRecorder struct {
	mock *MockMulticlusterVirtualServiceReconcileLoop
}

// NewMockMulticlusterVirtualServiceReconcileLoop creates a new mock instance.
func NewMockMulticlusterVirtualServiceReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterVirtualServiceReconcileLoop {
	mock := &MockMulticlusterVirtualServiceReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterVirtualServiceReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterVirtualServiceReconcileLoop) EXPECT() *MockMulticlusterVirtualServiceReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterVirtualServiceReconciler mocks base method.
func (m *MockMulticlusterVirtualServiceReconcileLoop) AddMulticlusterVirtualServiceReconciler(ctx context.Context, rec controller.MulticlusterVirtualServiceReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterVirtualServiceReconciler", varargs...)
}

// AddMulticlusterVirtualServiceReconciler indicates an expected call of AddMulticlusterVirtualServiceReconciler.
func (mr *MockMulticlusterVirtualServiceReconcileLoopMockRecorder) AddMulticlusterVirtualServiceReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterVirtualServiceReconciler", reflect.TypeOf((*MockMulticlusterVirtualServiceReconcileLoop)(nil).AddMulticlusterVirtualServiceReconciler), varargs...)
}

// MockMulticlusterSidecarReconciler is a mock of MulticlusterSidecarReconciler interface.
type MockMulticlusterSidecarReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSidecarReconcilerMockRecorder
}

// MockMulticlusterSidecarReconcilerMockRecorder is the mock recorder for MockMulticlusterSidecarReconciler.
type MockMulticlusterSidecarReconcilerMockRecorder struct {
	mock *MockMulticlusterSidecarReconciler
}

// NewMockMulticlusterSidecarReconciler creates a new mock instance.
func NewMockMulticlusterSidecarReconciler(ctrl *gomock.Controller) *MockMulticlusterSidecarReconciler {
	mock := &MockMulticlusterSidecarReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSidecarReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSidecarReconciler) EXPECT() *MockMulticlusterSidecarReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSidecar mocks base method.
func (m *MockMulticlusterSidecarReconciler) ReconcileSidecar(clusterName string, obj *v1beta1.Sidecar) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSidecar", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileSidecar indicates an expected call of ReconcileSidecar.
func (mr *MockMulticlusterSidecarReconcilerMockRecorder) ReconcileSidecar(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSidecar", reflect.TypeOf((*MockMulticlusterSidecarReconciler)(nil).ReconcileSidecar), clusterName, obj)
}

// MockMulticlusterSidecarDeletionReconciler is a mock of MulticlusterSidecarDeletionReconciler interface.
type MockMulticlusterSidecarDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSidecarDeletionReconcilerMockRecorder
}

// MockMulticlusterSidecarDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterSidecarDeletionReconciler.
type MockMulticlusterSidecarDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterSidecarDeletionReconciler
}

// NewMockMulticlusterSidecarDeletionReconciler creates a new mock instance.
func NewMockMulticlusterSidecarDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterSidecarDeletionReconciler {
	mock := &MockMulticlusterSidecarDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSidecarDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSidecarDeletionReconciler) EXPECT() *MockMulticlusterSidecarDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileSidecarDeletion mocks base method.
func (m *MockMulticlusterSidecarDeletionReconciler) ReconcileSidecarDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileSidecarDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileSidecarDeletion indicates an expected call of ReconcileSidecarDeletion.
func (mr *MockMulticlusterSidecarDeletionReconcilerMockRecorder) ReconcileSidecarDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileSidecarDeletion", reflect.TypeOf((*MockMulticlusterSidecarDeletionReconciler)(nil).ReconcileSidecarDeletion), clusterName, req)
}

// MockMulticlusterSidecarReconcileLoop is a mock of MulticlusterSidecarReconcileLoop interface.
type MockMulticlusterSidecarReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterSidecarReconcileLoopMockRecorder
}

// MockMulticlusterSidecarReconcileLoopMockRecorder is the mock recorder for MockMulticlusterSidecarReconcileLoop.
type MockMulticlusterSidecarReconcileLoopMockRecorder struct {
	mock *MockMulticlusterSidecarReconcileLoop
}

// NewMockMulticlusterSidecarReconcileLoop creates a new mock instance.
func NewMockMulticlusterSidecarReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterSidecarReconcileLoop {
	mock := &MockMulticlusterSidecarReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterSidecarReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterSidecarReconcileLoop) EXPECT() *MockMulticlusterSidecarReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterSidecarReconciler mocks base method.
func (m *MockMulticlusterSidecarReconcileLoop) AddMulticlusterSidecarReconciler(ctx context.Context, rec controller.MulticlusterSidecarReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterSidecarReconciler", varargs...)
}

// AddMulticlusterSidecarReconciler indicates an expected call of AddMulticlusterSidecarReconciler.
func (mr *MockMulticlusterSidecarReconcileLoopMockRecorder) AddMulticlusterSidecarReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterSidecarReconciler", reflect.TypeOf((*MockMulticlusterSidecarReconcileLoop)(nil).AddMulticlusterSidecarReconciler), varargs...)
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha2sets

import (
	linkerd_io_v1alpha2 "github.com/linkerd/linkerd2/controller/gen/apis/serviceprofile/v1alpha2"

	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type ServiceProfileSet interface {
	Keys() sets.String
	List() []*linkerd_io_v1alpha2.ServiceProfile
	Map() map[string]*linkerd_io_v1alpha2.ServiceProfile
	Insert(serviceProfile ...*linkerd_io_v1alpha2.ServiceProfile)
	Equal(serviceProfileSet ServiceProfileSet) bool
	Has(serviceProfile *linkerd_io_v1alpha2.ServiceProfile) bool
	Delete(serviceProfile *linkerd_io_v1alpha2.ServiceProfile)
	Union(set ServiceProfileSet) ServiceProfileSet
	Difference(set ServiceProfileSet) ServiceProfileSet
	Intersection(set ServiceProfileSet) ServiceProfileSet
	Find(id ezkube.ResourceId) (*linkerd_io_v1alpha2.ServiceProfile, error)
	Length() int
}

func makeGenericServiceProfileSet(serviceProfileList []*linkerd_io_v1alpha2.ServiceProfile) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range serviceProfileList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type serviceProfileSet struct {
	set sksets.ResourceSet
}

func NewServiceProfileSet(serviceProfileList ...*linkerd_io_v1alpha2.ServiceProfile) ServiceProfileSet {
	return &serviceProfileSet{set: makeGenericServiceProfileSet(serviceProfileList)}
}

func NewServiceProfileSetFromList(serviceProfileList *linkerd_io_v1alpha2.ServiceProfileList) ServiceProfileSet {
	list := make([]*linkerd_io_v1alpha2.ServiceProfile, 0, len(serviceProfileList.Items))
	for idx := range serviceProfileList.Items {
		list = append(list, &serviceProfileList.Items[idx])
	}
	return &serviceProfileSet{set: makeGenericServiceProfileSet(list)}
}

func (s *serviceProfileSet) Keys() sets.String {
	return s.set.Keys()
}

func (s *serviceProfileSet) List() []*linkerd_io_v1alpha2.ServiceProfile {
	var serviceProfileList []*linkerd_io_v1alpha2.ServiceProfile
	for _, obj := range s.set.List() {
		serviceProfileList = append(serviceProfileList, obj.(*linkerd_io_v1alpha2.ServiceProfile))
	}
	return serviceProfileList
}

func (s *serviceProfileSet) Map() map[string]*linkerd_io_v1alpha2.ServiceProfile {
	newMap := map[string]*linkerd_io_v1alpha2.ServiceProfile{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*linkerd_io_v1alpha2.ServiceProfile)
	}
	return newMap
}

func (s *serviceProfileSet) Insert(
	serviceProfileList ...*linkerd_io_v1alpha2.ServiceProfile,
) {
	for _, obj := range serviceProfileList {
		s.set.Insert(obj)
	}
}

func (s *serviceProfileSet) Has(serviceProfile *linkerd_io_v1alpha2.ServiceProfile) bool {
	return s.set.Has(serviceProfile)
}

func (s *serviceProfileSet) Equal(
	serviceProfileSet ServiceProfileSet,
) bool {
	return s.set.Equal(makeGenericServiceProfileSet(serviceProfileSet.List()))
}

func (s *serviceProfileSet) Delete(ServiceProfile *linkerd_io_v1alpha2.ServiceProfile) {
	s.set.Delete(ServiceProfile)
}

func (s *serviceProfileSet) Union(set ServiceProfileSet) ServiceProfileSet {
	return NewServiceProfileSet(append(s.List(), set.List()...)...)
}

func (s *serviceProfileSet) Difference(set ServiceProfileSet) ServiceProfileSet {
	newSet := s.set.Difference(makeGenericServiceProfileSet(set.List()))
	return &serviceProfileSet{set: newSet}
}

func (s *serviceProfileSet) Intersection(set ServiceProfileSet) ServiceProfileSet {
	newSet := s.set.Intersection(makeGenericServiceProfileSet(set.List()))
	var serviceProfileList []*linkerd_io_v1alpha2.ServiceProfile
	for _, obj := range newSet.List() {
		serviceProfileList = append(serviceProfileList, obj.(*linkerd_io_v1alpha2.ServiceProfile))
	}
	return NewServiceProfileSet(serviceProfileList...)
}

func (s *serviceProfileSet) Find(id ezkube.ResourceId) (*linkerd_io_v1alpha2.ServiceProfile, error) {
	obj, err := s.set.Find(&linkerd_io_v1alpha2.ServiceProfile{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*linkerd_io_v1alpha2.ServiceProfile), nil
}

func (s *serviceProfileSet) Length() int {
	return s.set.Length()
}
